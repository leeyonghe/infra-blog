<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://leeyonghe.github.io/infra-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://leeyonghe.github.io/infra-blog/" rel="alternate" type="text/html" /><updated>2025-10-21T11:01:33+00:00</updated><id>https://leeyonghe.github.io/infra-blog/feed.xml</id><title type="html">Infrastructure Technology Blog</title><subtitle>인프라스트럭처와 관련된 모든 기술을 다루는 블로그입니다. 클라우드, 데브옵스, 네트워킹, 보안, 모니터링 등 인프라 운영과 관리에 필요한 모든 정보를 제공합니다. A comprehensive blog covering all infrastructure technologies including cloud, DevOps, networking, security, monitoring, and everything needed for infrastructure operations and management.
</subtitle><author><name>DevOps Engineer</name></author><entry><title type="html">리눅스 보안 완전 가이드 5편 - Wazuh SIEM과 컨테이너 보안 | Linux Security Guide Part 5 - Wazuh SIEM &amp;amp; Container Security</title><link href="https://leeyonghe.github.io/infra-blog/blog/2025/05/24/linux-security-guide-part5.html" rel="alternate" type="text/html" title="리눅스 보안 완전 가이드 5편 - Wazuh SIEM과 컨테이너 보안 | Linux Security Guide Part 5 - Wazuh SIEM &amp;amp; Container Security" /><published>2025-05-24T00:00:00+00:00</published><updated>2025-05-24T00:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2025/05/24/linux-security-guide-part5</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2025/05/24/linux-security-guide-part5.html"><![CDATA[<p>리눅스 보안의 최종 완성 단계인 Wazuh SIEM 구축과 컨테이너 보안을 완전히 마스터해보겠습니다. 엔터프라이즈급 보안 모니터링부터 최신 컨테이너 환경 보안까지, 차세대 보안 인프라를 구축하는 모든 것을 다룹니다.</p>

<h2 id="wazuh-siem-완전-구축--complete-wazuh-siem-implementation">Wazuh SIEM 완전 구축 | Complete Wazuh SIEM Implementation</h2>

<h3 id="-wazuh-아키텍처-및-설치">🔍 Wazuh 아키텍처 및 설치</h3>

<h4 id="wazuh-완전-설치-스크립트">Wazuh 완전 설치 스크립트</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/wazuh-installer.sh</span>
<span class="c"># Wazuh SIEM 완전 자동 설치 스크립트</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># 색상 정의</span>
<span class="nv">RED</span><span class="o">=</span><span class="s1">'\033[0;31m'</span>
<span class="nv">GREEN</span><span class="o">=</span><span class="s1">'\033[0;32m'</span>
<span class="nv">YELLOW</span><span class="o">=</span><span class="s1">'\033[1;33m'</span>
<span class="nv">BLUE</span><span class="o">=</span><span class="s1">'\033[0;34m'</span>
<span class="nv">NC</span><span class="o">=</span><span class="s1">'\033[0m'</span>

print_color<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">2</span><span class="k">}${</span><span class="nv">1</span><span class="k">}${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 시스템 정보 확인</span>
<span class="nv">OS_ID</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> ^ID<span class="o">=</span> /etc/os-release | <span class="nb">cut</span> <span class="nt">-d</span><span class="o">=</span> <span class="nt">-f2</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'"'</span><span class="si">)</span>
<span class="nv">OS_VERSION</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> ^VERSION_ID<span class="o">=</span> /etc/os-release | <span class="nb">cut</span> <span class="nt">-d</span><span class="o">=</span> <span class="nt">-f2</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'"'</span><span class="si">)</span>

print_color <span class="s2">"=== Wazuh SIEM Installation Started ==="</span> <span class="s2">"</span><span class="nv">$BLUE</span><span class="s2">"</span>
print_color <span class="s2">"OS: </span><span class="nv">$OS_ID</span><span class="s2"> </span><span class="nv">$OS_VERSION</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$BLUE</span><span class="s2">"</span>

<span class="c"># 전제 조건 확인</span>
check_prerequisites<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Checking prerequisites..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="c"># 최소 시스템 요구사항 확인</span>
    <span class="nv">RAM_GB</span><span class="o">=</span><span class="si">$(</span>free <span class="nt">-g</span> | <span class="nb">awk</span> <span class="s1">'/^Mem:/{print $2}'</span><span class="si">)</span>
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$RAM_GB</span><span class="s2">"</span> <span class="nt">-lt</span> 2 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>print_color <span class="s2">"WARNING: Minimum 2GB RAM recommended (Current: </span><span class="k">${</span><span class="nv">RAM_GB</span><span class="k">}</span><span class="s2">GB)"</span> <span class="s2">"</span><span class="nv">$RED</span><span class="s2">"</span>
    <span class="k">fi</span>
    
    <span class="c"># 디스크 공간 확인</span>
    <span class="nv">DISK_GB</span><span class="o">=</span><span class="si">$(</span><span class="nb">df</span> / | <span class="nb">awk</span> <span class="s1">'NR==2{print int($4/1048576)}'</span><span class="si">)</span>
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$DISK_GB</span><span class="s2">"</span> <span class="nt">-lt</span> 10 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>print_color <span class="s2">"WARNING: Minimum 10GB disk space recommended (Available: </span><span class="k">${</span><span class="nv">DISK_GB</span><span class="k">}</span><span class="s2">GB)"</span> <span class="s2">"</span><span class="nv">$RED</span><span class="s2">"</span>
    <span class="k">fi</span>
    
    <span class="c"># 네트워크 연결 확인</span>
    <span class="k">if</span> <span class="o">!</span> ping <span class="nt">-c</span> 1 packages.wazuh.com <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>print_color <span class="s2">"ERROR: Cannot reach Wazuh repository"</span> <span class="s2">"</span><span class="nv">$RED</span><span class="s2">"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    </span>print_color <span class="s2">"Prerequisites check completed"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># Wazuh 저장소 추가</span>
setup_repository<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Setting up Wazuh repository..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            <span class="c"># CentOS/RHEL/Fedora</span>
            rpm <span class="nt">--import</span> https://packages.wazuh.com/key/GPG-KEY-WAZUH
            <span class="nb">cat</span> <span class="o">&gt;</span> /etc/yum.repos.d/wazuh.repo <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
[wazuh]
gpgcheck=1
gpgkey=https://packages.wazuh.com/key/GPG-KEY-WAZUH
enabled=1
name=EL-</span><span class="nv">$releasever</span><span class="sh"> - Wazuh
baseurl=https://packages.wazuh.com/4.x/yum/
protect=1
</span><span class="no">EOF
</span>            <span class="p">;;</span>
            
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            <span class="c"># Ubuntu/Debian</span>
            curl <span class="nt">-s</span> https://packages.wazuh.com/key/GPG-KEY-WAZUH | gpg <span class="nt">--no-default-keyring</span> <span class="nt">--keyring</span> gnupg-ring:/usr/share/keyrings/wazuh.gpg <span class="nt">--import</span> <span class="o">&amp;&amp;</span> <span class="nb">chmod </span>644 /usr/share/keyrings/wazuh.gpg
            <span class="nb">echo</span> <span class="s2">"deb [signed-by=/usr/share/keyrings/wazuh.gpg] https://packages.wazuh.com/4.x/apt/ stable main"</span> | <span class="nb">tee</span> <span class="nt">-a</span> /etc/apt/sources.list.d/wazuh.list
            apt-get update
            <span class="p">;;</span>
            
        <span class="k">*</span><span class="p">)</span>
            print_color <span class="s2">"Unsupported OS: </span><span class="nv">$OS_ID</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$RED</span><span class="s2">"</span>
            <span class="nb">exit </span>1
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    print_color <span class="s2">"Repository setup completed"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># Wazuh Manager 설치</span>
install_wazuh_manager<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Installing Wazuh Manager..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            yum <span class="nb">install</span> <span class="nt">-y</span> wazuh-manager
            <span class="p">;;</span>
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            apt-get <span class="nb">install</span> <span class="nt">-y</span> wazuh-manager
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    <span class="c"># 서비스 활성화</span>
    systemctl daemon-reload
    systemctl <span class="nb">enable </span>wazuh-manager
    systemctl start wazuh-manager
    
    print_color <span class="s2">"Wazuh Manager installed successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># Wazuh API 설치 및 설정</span>
install_wazuh_api<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Installing and configuring Wazuh API..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            yum <span class="nb">install</span> <span class="nt">-y</span> nodejs npm
            <span class="p">;;</span>
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            apt-get <span class="nb">install</span> <span class="nt">-y</span> nodejs npm
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    <span class="c"># Wazuh API 설치</span>
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            yum <span class="nb">install</span> <span class="nt">-y</span> wazuh-api
            <span class="p">;;</span>
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            apt-get <span class="nb">install</span> <span class="nt">-y</span> wazuh-api
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    <span class="c"># API 설정</span>
    <span class="nb">cat</span> <span class="o">&gt;</span> /var/ossec/api/configuration/config.js <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
var config = {};

config.port = "55000";
config.host = "0.0.0.0";
config.https = "no";
config.basic_auth = "yes";
config.BehindProxyServer = "no";
config.cors = "yes";

module.exports = config;
</span><span class="no">EOF
    
</span>    <span class="c"># API 사용자 생성</span>
    <span class="nb">cd</span> /var/ossec/api/scripts
    ./configure_api.sh
    
    systemctl <span class="nb">enable </span>wazuh-api
    systemctl start wazuh-api
    
    print_color <span class="s2">"Wazuh API configured successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># Elastic Stack 설치</span>
install_elastic_stack<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Installing Elastic Stack..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="c"># Elasticsearch 저장소 추가</span>
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            rpm <span class="nt">--import</span> https://artifacts.elastic.co/GPG-KEY-elasticsearch
            <span class="nb">cat</span> <span class="o">&gt;</span> /etc/yum.repos.d/elasticsearch.repo <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
[elasticsearch]
name=Elasticsearch repository for 7.x packages
baseurl=https://artifacts.elastic.co/packages/7.x/yum
gpgcheck=1
gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
enabled=0
autorefresh=1
type=rpm-md
</span><span class="no">EOF
</span>            <span class="p">;;</span>
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            wget <span class="nt">-qO</span> - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
            <span class="nb">echo</span> <span class="s2">"deb https://artifacts.elastic.co/packages/7.x/apt stable main"</span> | <span class="nb">tee</span> /etc/apt/sources.list.d/elastic-7.x.list
            apt-get update
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    <span class="c"># Java 설치 (Elasticsearch 요구사항)</span>
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            yum <span class="nb">install</span> <span class="nt">-y</span> java-11-openjdk
            <span class="p">;;</span>
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            apt-get <span class="nb">install</span> <span class="nt">-y</span> openjdk-11-jdk
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    <span class="c"># Elasticsearch 설치</span>
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            yum <span class="nb">install</span> <span class="nt">--enablerepo</span><span class="o">=</span>elasticsearch <span class="nt">-y</span> elasticsearch
            <span class="p">;;</span>
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            apt-get <span class="nb">install</span> <span class="nt">-y</span> elasticsearch
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    <span class="c"># Elasticsearch 설정</span>
    <span class="nb">cat</span> <span class="o">&gt;</span> /etc/elasticsearch/elasticsearch.yml <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
cluster.name: wazuh-cluster
node.name: wazuh-node
path.data: /var/lib/elasticsearch
path.logs: /var/log/elasticsearch
network.host: localhost
http.port: 9200
cluster.initial_master_nodes: ["wazuh-node"]
</span><span class="no">EOF
    
</span>    <span class="c"># JVM 힙 크기 설정 (시스템 메모리의 50%)</span>
    <span class="nv">HEAP_SIZE</span><span class="o">=</span><span class="k">$((</span>RAM_GB <span class="o">/</span> <span class="m">2</span><span class="k">))</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$HEAP_SIZE</span> <span class="nt">-lt</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">HEAP_SIZE</span><span class="o">=</span>1
    <span class="k">fi
    
    </span><span class="nb">cat</span> <span class="o">&gt;</span> /etc/elasticsearch/jvm.options.d/wazuh.options <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
-Xms</span><span class="k">${</span><span class="nv">HEAP_SIZE</span><span class="k">}</span><span class="sh">g
-Xmx</span><span class="k">${</span><span class="nv">HEAP_SIZE</span><span class="k">}</span><span class="sh">g
</span><span class="no">EOF
    
</span>    systemctl daemon-reload
    systemctl <span class="nb">enable </span>elasticsearch
    systemctl start elasticsearch
    
    <span class="c"># Elasticsearch 시작 대기</span>
    <span class="nb">sleep </span>30
    
    <span class="c"># Kibana 설치</span>
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            yum <span class="nb">install</span> <span class="nt">--enablerepo</span><span class="o">=</span>elasticsearch <span class="nt">-y</span> kibana
            <span class="p">;;</span>
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            apt-get <span class="nb">install</span> <span class="nt">-y</span> kibana
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    <span class="c"># Kibana 설정</span>
    <span class="nb">cat</span> <span class="o">&gt;</span> /etc/kibana/kibana.yml <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
server.port: 5601
server.host: "0.0.0.0"
elasticsearch.hosts: ["http://localhost:9200"]
logging.dest: /var/log/kibana/kibana.log
</span><span class="no">EOF
    
</span>    systemctl <span class="nb">enable </span>kibana
    systemctl start kibana
    
    print_color <span class="s2">"Elastic Stack installed successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># Wazuh Kibana 플러그인 설치</span>
install_wazuh_kibana_plugin<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Installing Wazuh Kibana plugin..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="c"># Kibana 정지</span>
    systemctl stop kibana
    
    <span class="c"># 플러그인 설치</span>
    <span class="nb">sudo</span> <span class="nt">-u</span> kibana /usr/share/kibana/bin/kibana-plugin <span class="nb">install </span>https://packages.wazuh.com/4.x/ui/kibana/wazuh_kibana-4.8.0_7.17.0-1.zip
    
    <span class="c"># Kibana 시작</span>
    systemctl start kibana
    
    print_color <span class="s2">"Wazuh Kibana plugin installed successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># Filebeat 설치 및 설정</span>
install_filebeat<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Installing and configuring Filebeat..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="k">case</span> <span class="nv">$OS_ID</span> <span class="k">in</span>
        <span class="s2">"centos"</span><span class="p">|</span><span class="s2">"rhel"</span><span class="p">|</span><span class="s2">"fedora"</span><span class="p">)</span>
            yum <span class="nb">install</span> <span class="nt">--enablerepo</span><span class="o">=</span>elasticsearch <span class="nt">-y</span> filebeat
            <span class="p">;;</span>
        <span class="s2">"ubuntu"</span><span class="p">|</span><span class="s2">"debian"</span><span class="p">)</span>
            apt-get <span class="nb">install</span> <span class="nt">-y</span> filebeat
            <span class="p">;;</span>
    <span class="k">esac</span>
    
    <span class="c"># Filebeat 설정</span>
    curl <span class="nt">-so</span> /etc/filebeat/filebeat.yml https://raw.githubusercontent.com/wazuh/wazuh/4.8/extensions/filebeat/7.x/filebeat.yml
    curl <span class="nt">-so</span> /etc/filebeat/wazuh-template.json https://raw.githubusercontent.com/wazuh/wazuh/4.8/extensions/elasticsearch/7.x/wazuh-template.json
    
    <span class="c"># Wazuh 모듈 다운로드</span>
    curl <span class="nt">-s</span> https://packages.wazuh.com/4.x/filebeat/wazuh-filebeat-0.4.tar.gz | <span class="nb">tar</span> <span class="nt">-xvz</span> <span class="nt">-C</span> /usr/share/filebeat/module
    
    <span class="c"># Elasticsearch 템플릿 및 파이프라인 설정</span>
    filebeat setup <span class="nt">--template</span>
    
    systemctl daemon-reload
    systemctl <span class="nb">enable </span>filebeat
    systemctl start filebeat
    
    print_color <span class="s2">"Filebeat configured successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 방화벽 설정</span>
configure_firewall<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Configuring firewall..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="c"># 필요한 포트들</span>
    <span class="c"># 1514/udp: Wazuh agents</span>
    <span class="c"># 1515/tcp: Wazuh agents registration</span>
    <span class="c"># 55000/tcp: Wazuh API</span>
    <span class="c"># 5601/tcp: Kibana</span>
    <span class="c"># 9200/tcp: Elasticsearch</span>
    
    <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> ufw <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then</span>
        <span class="c"># Ubuntu UFW</span>
        ufw allow 1514/udp
        ufw allow 1515/tcp
        ufw allow 55000/tcp
        ufw allow 5601/tcp
        ufw allow 9200/tcp
    <span class="k">elif </span><span class="nb">command</span> <span class="nt">-v</span> firewall-cmd <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then</span>
        <span class="c"># CentOS/RHEL firewalld</span>
        firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>1514/udp
        firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>1515/tcp
        firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>55000/tcp
        firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>5601/tcp
        firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>9200/tcp
        firewall-cmd <span class="nt">--reload</span>
    <span class="k">fi
    
    </span>print_color <span class="s2">"Firewall configured successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 설치 검증</span>
verify_installation<span class="o">()</span> <span class="o">{</span>
    print_color <span class="s2">"Verifying installation..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    
    <span class="c"># 서비스 상태 확인</span>
    <span class="nv">SERVICES</span><span class="o">=(</span><span class="s2">"wazuh-manager"</span> <span class="s2">"wazuh-api"</span> <span class="s2">"elasticsearch"</span> <span class="s2">"kibana"</span> <span class="s2">"filebeat"</span><span class="o">)</span>
    
    <span class="k">for </span>service <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">SERVICES</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
        if </span>systemctl is-active <span class="nt">--quiet</span> <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
            </span>print_color <span class="s2">"✓ </span><span class="nv">$service</span><span class="s2"> is running"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
        <span class="k">else
            </span>print_color <span class="s2">"✗ </span><span class="nv">$service</span><span class="s2"> is not running"</span> <span class="s2">"</span><span class="nv">$RED</span><span class="s2">"</span>
        <span class="k">fi
    done</span>
    
    <span class="c"># 포트 확인</span>
    print_color <span class="s2">"</span><span class="se">\n</span><span class="s2">Port status:"</span> <span class="s2">"</span><span class="nv">$BLUE</span><span class="s2">"</span>
    ss <span class="nt">-tlnp</span> | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">':(1514|1515|5601|9200|55000)'</span>
    
    <span class="c"># Wazuh 에이전트 키 생성 예제</span>
    print_color <span class="s2">"</span><span class="se">\n</span><span class="s2">Generating example agent key..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
    /var/ossec/bin/manage_agents <span class="nt">-a</span> <span class="nt">-n</span> example-agent <span class="nt">-i</span> 001
    
    print_color <span class="s2">"</span><span class="se">\n</span><span class="s2">=== Installation Summary ==="</span> <span class="s2">"</span><span class="nv">$BLUE</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">"Wazuh Manager: http://</span><span class="si">$(</span><span class="nb">hostname</span> <span class="nt">-I</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="si">)</span><span class="s2">:55000"</span>
    <span class="nb">echo</span> <span class="s2">"Kibana Dashboard: http://</span><span class="si">$(</span><span class="nb">hostname</span> <span class="nt">-I</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="si">)</span><span class="s2">:5601"</span>
    <span class="nb">echo</span> <span class="s2">"Elasticsearch: http://</span><span class="si">$(</span><span class="nb">hostname</span> <span class="nt">-I</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="si">)</span><span class="s2">:9200"</span>
    <span class="nb">echo</span> <span class="s2">""</span>
    <span class="nb">echo</span> <span class="s2">"Default credentials:"</span>
    <span class="nb">echo</span> <span class="s2">"- Wazuh API: admin / admin"</span>
    <span class="nb">echo</span> <span class="s2">"- Change default passwords immediately!"</span>
<span class="o">}</span>

<span class="c"># 메인 설치 프로세스</span>
main<span class="o">()</span> <span class="o">{</span>
    check_prerequisites
    setup_repository
    install_wazuh_manager
    install_wazuh_api
    install_elastic_stack
    install_wazuh_kibana_plugin
    install_filebeat
    configure_firewall
    verify_installation
    
    print_color <span class="s2">"</span><span class="se">\n</span><span class="s2">🎉 Wazuh SIEM installation completed successfully!"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
    print_color <span class="s2">"Access Kibana at: http://</span><span class="si">$(</span><span class="nb">hostname</span> <span class="nt">-I</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="si">)</span><span class="s2">:5601"</span> <span class="s2">"</span><span class="nv">$BLUE</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 스크립트 실행</span>
<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"</span><span class="k">${</span><span class="nv">0</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span>main <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
<span class="k">fi</span>
</code></pre></div></div>

<h3 id="️-wazuh-고급-설정-및-규칙">🛡️ Wazuh 고급 설정 및 규칙</h3>

<h4 id="커스텀-보안-룰-작성">커스텀 보안 룰 작성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /var/ossec/etc/rules/local_rules.xml</span>
<span class="c"># Wazuh 커스텀 보안 룰</span>

&lt;group <span class="nv">name</span><span class="o">=</span><span class="s2">"local,syslog,"</span><span class="o">&gt;</span>

  &lt;<span class="o">!</span><span class="nt">--</span> 커스텀 SSH 공격 탐지 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100001"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"10"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;5720&lt;/if_sid&gt;
    &lt;match&gt;^Failed|^error: PAM: Authentication failure&lt;/match&gt;
    &lt;description&gt;SSH authentication failure.&lt;/description&gt;
    &lt;group&gt;authentication_failed,pci_dss_10.2.4,pci_dss_10.2.5,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100002"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"12"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;100001&lt;/if_sid&gt;
    &lt;same_source_ip /&gt;
    &lt;description&gt;SSH brute force attack detected <span class="o">(</span>multiple authentication failures<span class="o">)</span>.&lt;/description&gt;
    &lt;mitre&gt;
      &lt;<span class="nb">id</span><span class="o">&gt;</span>T1110&lt;/id&gt;
    &lt;/mitre&gt;
    &lt;group&gt;authentication_failures,pci_dss_10.2.4,pci_dss_10.2.5,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 웹 애플리케이션 공격 탐지 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100010"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"6"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;31100&lt;/if_sid&gt;
    &lt;url&gt;admin|wp-admin|phpmyadmin|cpanel&lt;/url&gt;
    &lt;description&gt;Attempt to access sensitive web directories.&lt;/description&gt;
    &lt;group&gt;web,accesslog,attack,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100011"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"8"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;31100&lt;/if_sid&gt;
    &lt;url&gt;<span class="se">\.</span>php<span class="se">\?</span>|<span class="se">\.</span>asp<span class="se">\?</span>|<span class="se">\.</span>jsp<span class="se">\?</span>&lt;/url&gt;
    &lt;description&gt;Potential web application vulnerability scan.&lt;/description&gt;
    &lt;group&gt;web,accesslog,attack,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100012"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"10"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;31100&lt;/if_sid&gt;
    &lt;url&gt;union.<span class="k">*select</span>|concat<span class="se">\(</span>|exec<span class="se">\(</span>|system<span class="se">\(</span>&lt;/url&gt;
    &lt;description&gt;SQL injection attempt detected.&lt;/description&gt;
    &lt;mitre&gt;
      &lt;<span class="nb">id</span><span class="o">&gt;</span>T1190&lt;/id&gt;
    &lt;/mitre&gt;
    &lt;group&gt;web,accesslog,attack,sql_injection,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 파일 시스템 모니터링 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100020"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"7"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;550&lt;/if_sid&gt;
    &lt;field <span class="nv">name</span><span class="o">=</span><span class="s2">"file"</span><span class="o">&gt;</span>/etc/passwd|/etc/shadow|/etc/group&lt;/field&gt;
    &lt;description&gt;Critical system file modified.&lt;/description&gt;
    &lt;group&gt;syscheck,pci_dss_11.5,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100021"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"12"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;554&lt;/if_sid&gt;
    &lt;field <span class="nv">name</span><span class="o">=</span><span class="s2">"file"</span><span class="o">&gt;</span>/bin/|/sbin/|/usr/bin/&lt;/field&gt;
    &lt;description&gt;System binary file modified or deleted - possible rootkit.&lt;/description&gt;
    &lt;mitre&gt;
      &lt;<span class="nb">id</span><span class="o">&gt;</span>T1014&lt;/id&gt;
    &lt;/mitre&gt;
    &lt;group&gt;syscheck,rootkit,pci_dss_11.5,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 네트워크 공격 탐지 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100030"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"8"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;4386&lt;/if_sid&gt;
    &lt;regex&gt;DPT<span class="o">=(</span>22|23|21|25|53|80|110|143|443|993|995|3389<span class="o">)</span>&lt;/regex&gt;
    &lt;description&gt;Port scan detected on critical services.&lt;/description&gt;
    &lt;group&gt;recon,pci_dss_11.4,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100031"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"10"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;100030&lt;/if_sid&gt;
    &lt;same_source_ip /&gt;
    &lt;description&gt;Multiple port scan attempts from same source.&lt;/description&gt;
    &lt;mitre&gt;
      &lt;<span class="nb">id</span><span class="o">&gt;</span>T1046&lt;/id&gt;
    &lt;/mitre&gt;
    &lt;group&gt;recon,pci_dss_11.4,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 악성코드 및 의심스러운 프로세스 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100040"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"12"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;530&lt;/if_sid&gt;
    &lt;match&gt;nc <span class="nt">-l</span>|ncat <span class="nt">-l</span>|/dev/tcp|/dev/udp&lt;/match&gt;
    &lt;description&gt;Potential reverse shell or backdoor detected.&lt;/description&gt;
    &lt;mitre&gt;
      &lt;<span class="nb">id</span><span class="o">&gt;</span>T1059&lt;/id&gt;
    &lt;/mitre&gt;
    &lt;group&gt;attack,malware,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100041"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"10"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;530&lt;/if_sid&gt;
    &lt;match&gt;wget.<span class="k">*</span><span class="se">\.</span><span class="o">(</span>sh|py|pl<span class="o">)</span>|curl.<span class="k">*</span><span class="se">\.</span><span class="o">(</span>sh|py|pl<span class="o">)</span>&lt;/match&gt;
    &lt;description&gt;Suspicious script download detected.&lt;/description&gt;
    &lt;group&gt;attack,malware,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 권한 상승 탐지 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100050"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"8"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;5401&lt;/if_sid&gt;
    &lt;user&gt;root&lt;/user&gt;
    &lt;description&gt;Successful <span class="nb">sudo </span>to root.&lt;/description&gt;
    &lt;group&gt;privilege_escalation,pci_dss_10.2.2,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100051"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"12"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;5402&lt;/if_sid&gt;
    &lt;same_user /&gt;
    &lt;description&gt;Multiple failed <span class="nb">sudo </span>attempts by same user.&lt;/description&gt;
    &lt;mitre&gt;
      &lt;<span class="nb">id</span><span class="o">&gt;</span>T1548&lt;/id&gt;
    &lt;/mitre&gt;
    &lt;group&gt;privilege_escalation,pci_dss_10.2.2,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 데이터 유출 감지 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100060"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"10"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;31100&lt;/if_sid&gt;
    &lt;status&gt;200&lt;/status&gt;
    &lt;size&gt;1048576&lt;/size&gt;
    &lt;description&gt;Large file download detected - potential data exfiltration.&lt;/description&gt;
    &lt;group&gt;web,data_exfiltration,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100061"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"8"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;530&lt;/if_sid&gt;
    &lt;match&gt;scp.<span class="k">*</span><span class="nt">-r</span>|rsync.<span class="k">*</span><span class="nt">-r</span>|tar.<span class="k">*</span><span class="nt">-c</span>&lt;/match&gt;
    &lt;description&gt;Bulk data transfer <span class="nb">command </span>detected.&lt;/description&gt;
    &lt;group&gt;data_exfiltration,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 컨테이너 보안 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100070"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"10"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;530&lt;/if_sid&gt;
    &lt;match&gt;docker.<span class="k">*</span><span class="nt">--privileged</span>|docker.<span class="k">*</span><span class="nt">--cap-add</span>&lt;/match&gt;
    &lt;description&gt;Privileged container execution detected.&lt;/description&gt;
    &lt;group&gt;docker,container_security,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100071"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"8"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;530&lt;/if_sid&gt;
    &lt;match&gt;kubectl.<span class="k">*</span>create|kubectl.<span class="k">*</span>apply&lt;/match&gt;
    &lt;description&gt;Kubernetes resource creation detected.&lt;/description&gt;
    &lt;group&gt;kubernetes,container_security,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 로그 변조 탐지 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100080"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"12"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;530&lt;/if_sid&gt;
    &lt;match&gt;rm.<span class="k">*</span>log|truncate.<span class="k">*</span>log|&gt;.<span class="k">*</span>log&lt;/match&gt;
    &lt;description&gt;Log file manipulation detected.&lt;/description&gt;
    &lt;mitre&gt;
      &lt;<span class="nb">id</span><span class="o">&gt;</span>T1070.002&lt;/id&gt;
    &lt;/mitre&gt;
    &lt;group&gt;log_tampering,attack,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 암호화폐 채굴 탐지 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100090"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"10"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;530&lt;/if_sid&gt;
    &lt;match&gt;xmrig|cpuminer|minerd|ccminer&lt;/match&gt;
    &lt;description&gt;Cryptocurrency mining activity detected.&lt;/description&gt;
    &lt;group&gt;malware,cryptomining,&lt;/group&gt;
  &lt;/rule&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 컴플라이언스 관련 이벤트 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rule <span class="nb">id</span><span class="o">=</span><span class="s2">"100100"</span> <span class="nv">level</span><span class="o">=</span><span class="s2">"5"</span><span class="o">&gt;</span>
    &lt;if_sid&gt;5501&lt;/if_sid&gt;
    &lt;user&gt;audit&lt;/user&gt;
    &lt;description&gt;Audit log access detected.&lt;/description&gt;
    &lt;group&gt;audit,compliance,pci_dss_10.2.3,&lt;/group&gt;
  &lt;/rule&gt;

&lt;/group&gt;
</code></pre></div></div>

<h4 id="고급-디코더-설정">고급 디코더 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /var/ossec/etc/decoders/local_decoder.xml</span>
<span class="c"># Wazuh 커스텀 디코더</span>

&lt;decoder <span class="nv">name</span><span class="o">=</span><span class="s2">"custom-ssh"</span><span class="o">&gt;</span>
  &lt;parent&gt;sshd&lt;/parent&gt;
  &lt;regex&gt;Failed password <span class="k">for</span> <span class="o">(</span><span class="se">\S</span>+<span class="o">)</span> from <span class="o">(</span><span class="se">\d</span>+.<span class="se">\d</span>+.<span class="se">\d</span>+.<span class="se">\d</span>+<span class="o">)</span> port <span class="o">(</span><span class="se">\d</span>+<span class="o">)</span>&lt;/regex&gt;
  &lt;order&gt;user,srcip,srcport&lt;/order&gt;
&lt;/decoder&gt;

&lt;decoder <span class="nv">name</span><span class="o">=</span><span class="s2">"custom-apache-error"</span><span class="o">&gt;</span>
  &lt;parent&gt;apache-errorlog&lt;/parent&gt;
  &lt;regex&gt;<span class="se">\[</span><span class="o">(</span><span class="se">\w</span>+ <span class="se">\w</span>+ <span class="se">\d</span>+ <span class="se">\d</span>+:<span class="se">\d</span>+:<span class="se">\d</span>+ <span class="se">\d</span>+<span class="o">)</span><span class="se">\]</span> <span class="se">\[</span><span class="o">(</span><span class="se">\w</span>+<span class="o">)</span><span class="se">\]</span> <span class="o">(</span><span class="se">\S</span>+<span class="o">)</span>: <span class="o">(</span>.+<span class="o">)</span>, referer: <span class="o">(</span><span class="se">\S</span>+<span class="o">)</span>&lt;/regex&gt;
  &lt;order&gt;timestamp,level,client,message,referer&lt;/order&gt;
&lt;/decoder&gt;

&lt;decoder <span class="nv">name</span><span class="o">=</span><span class="s2">"custom-mysql"</span><span class="o">&gt;</span>
  &lt;parent&gt;mysql_log&lt;/parent&gt;
  &lt;regex&gt;<span class="o">(</span><span class="se">\d</span>+<span class="o">)</span> Connect<span class="se">\s</span>+Access denied <span class="k">for </span>user <span class="s1">'(\S+)'</span>@<span class="s1">'(\S+)'</span>&lt;/regex&gt;
  &lt;order&gt;id,user,srcip&lt;/order&gt;
&lt;/decoder&gt;

&lt;decoder <span class="nv">name</span><span class="o">=</span><span class="s2">"custom-docker"</span><span class="o">&gt;</span>
  &lt;parent&gt;json&lt;/parent&gt;
  &lt;regex&gt;<span class="s2">"container_name"</span>:<span class="s2">"([^"</span><span class="o">]</span>+<span class="o">)</span><span class="s2">"&lt;/regex&gt;
  &lt;order&gt;container_name&lt;/order&gt;
&lt;/decoder&gt;

&lt;decoder name="</span>custom-kubernetes<span class="s2">"&gt;
  &lt;parent&gt;json&lt;/parent&gt;
  &lt;regex&gt;"</span>verb<span class="s2">":"</span><span class="o">(</span><span class="se">\S</span>+<span class="o">)</span><span class="s2">","</span>user<span class="s2">":{"</span>username<span class="s2">":"</span><span class="o">([</span>^<span class="s2">"]+)"</span><span class="o">}</span>&lt;/regex&gt;
  &lt;order&gt;verb,username&lt;/order&gt;
&lt;/decoder&gt;
</code></pre></div></div>

<h3 id="-wazuh-자동화-및-대응">📊 Wazuh 자동화 및 대응</h3>

<h4 id="자동-대응-스크립트">자동 대응 스크립트</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /var/ossec/active-response/bin/custom-response.sh</span>
<span class="c"># Wazuh 자동 대응 스크립트</span>

<span class="c"># 입력 파라미터 읽기</span>
<span class="nv">LOCAL</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$0</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s1">'/'</span> <span class="nt">-f4</span><span class="sb">`</span>
<span class="nv">PWD</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>
<span class="nb">read </span>INPUT_JSON

<span class="c"># JSON 파싱 함수</span>
get_json_value<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$INPUT_JSON</span><span class="s2">"</span> | python3 <span class="nt">-c</span> <span class="s2">"
import sys, json
data = json.load(sys.stdin)
print(data.get('</span><span class="nv">$1</span><span class="s2">', ''))
"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">echo</span> <span class="s2">""</span>
<span class="o">}</span>

<span class="c"># 로그 함수</span>
log_message<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2"> - </span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /var/ossec/logs/active-responses.log
<span class="o">}</span>

<span class="c"># 액션 및 매개변수 추출</span>
<span class="nv">ACTION</span><span class="o">=</span><span class="si">$(</span>get_json_value <span class="s2">"command"</span><span class="si">)</span>
<span class="nv">SRCIP</span><span class="o">=</span><span class="si">$(</span>get_json_value <span class="s2">"parameters.alert.data.srcip"</span><span class="si">)</span>
<span class="nv">RULE_ID</span><span class="o">=</span><span class="si">$(</span>get_json_value <span class="s2">"parameters.alert.rule.id"</span><span class="si">)</span>
<span class="nv">USERNAME</span><span class="o">=</span><span class="si">$(</span>get_json_value <span class="s2">"parameters.alert.data.user"</span><span class="si">)</span>
<span class="nv">FILENAME</span><span class="o">=</span><span class="si">$(</span>get_json_value <span class="s2">"parameters.alert.syscheck.path"</span><span class="si">)</span>

log_message <span class="s2">"Active response triggered: Action=</span><span class="nv">$ACTION</span><span class="s2">, Rule=</span><span class="nv">$RULE_ID</span><span class="s2">, SrcIP=</span><span class="nv">$SRCIP</span><span class="s2">"</span>

<span class="k">case</span> <span class="nv">$ACTION</span> <span class="k">in</span>
    <span class="s2">"ban-ip"</span><span class="p">)</span>
        <span class="c"># IP 차단</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$SRCIP</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
            <span class="c"># iptables 차단</span>
            iptables <span class="nt">-I</span> INPUT <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$SRCIP</span><span class="s2">"</span> <span class="nt">-j</span> DROP
            
            <span class="c"># Fail2Ban 차단 (Fail2Ban이 설치된 경우)</span>
            <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> fail2ban-client <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
                </span>fail2ban-client <span class="nb">set </span>sshd banip <span class="s2">"</span><span class="nv">$SRCIP</span><span class="s2">"</span>
            <span class="k">fi
            
            </span>log_message <span class="s2">"IP </span><span class="nv">$SRCIP</span><span class="s2"> banned successfully"</span>
            
            <span class="c"># 알림 발송</span>
            /usr/local/bin/send-alert.sh <span class="s2">"IP Banned"</span> <span class="s2">"IP </span><span class="nv">$SRCIP</span><span class="s2"> has been banned due to rule </span><span class="nv">$RULE_ID</span><span class="s2">"</span>
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"disable-user"</span><span class="p">)</span>
        <span class="c"># 사용자 계정 비활성화</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$USERNAME</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>usermod <span class="nt">-L</span> <span class="s2">"</span><span class="nv">$USERNAME</span><span class="s2">"</span>
            log_message <span class="s2">"User </span><span class="nv">$USERNAME</span><span class="s2"> disabled due to suspicious activity"</span>
            
            <span class="c"># 활성 세션 종료</span>
            pkill <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$USERNAME</span><span class="s2">"</span>
            
            <span class="c"># 알림 발송</span>
            /usr/local/bin/send-alert.sh <span class="s2">"User Disabled"</span> <span class="s2">"User </span><span class="nv">$USERNAME</span><span class="s2"> has been disabled due to rule </span><span class="nv">$RULE_ID</span><span class="s2">"</span>
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"quarantine-file"</span><span class="p">)</span>
        <span class="c"># 파일 격리</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$FILENAME</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$FILENAME</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nv">QUARANTINE_DIR</span><span class="o">=</span><span class="s2">"/var/ossec/quarantine/</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span>
            <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$QUARANTINE_DIR</span><span class="s2">"</span>
            
            <span class="c"># 파일 이동</span>
            <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$FILENAME</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$QUARANTINE_DIR</span><span class="s2">/"</span>
            log_message <span class="s2">"File </span><span class="nv">$FILENAME</span><span class="s2"> quarantined to </span><span class="nv">$QUARANTINE_DIR</span><span class="s2">"</span>
            
            <span class="c"># 알림 발송</span>
            /usr/local/bin/send-alert.sh <span class="s2">"File Quarantined"</span> <span class="s2">"File </span><span class="nv">$FILENAME</span><span class="s2"> has been quarantined due to rule </span><span class="nv">$RULE_ID</span><span class="s2">"</span>
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"restart-service"</span><span class="p">)</span>
        <span class="c"># 서비스 재시작</span>
        <span class="nv">SERVICE</span><span class="o">=</span><span class="si">$(</span>get_json_value <span class="s2">"parameters.service"</span><span class="si">)</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$SERVICE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>systemctl restart <span class="s2">"</span><span class="nv">$SERVICE</span><span class="s2">"</span>
            log_message <span class="s2">"Service </span><span class="nv">$SERVICE</span><span class="s2"> restarted due to rule </span><span class="nv">$RULE_ID</span><span class="s2">"</span>
            
            <span class="c"># 알림 발송</span>
            /usr/local/bin/send-alert.sh <span class="s2">"Service Restarted"</span> <span class="s2">"Service </span><span class="nv">$SERVICE</span><span class="s2"> has been restarted due to rule </span><span class="nv">$RULE_ID</span><span class="s2">"</span>
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"collect-evidence"</span><span class="p">)</span>
        <span class="c"># 증거 수집</span>
        <span class="nv">EVIDENCE_DIR</span><span class="o">=</span><span class="s2">"/var/ossec/evidence/</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span><span class="s2">-rule</span><span class="nv">$RULE_ID</span><span class="s2">"</span>
        <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$EVIDENCE_DIR</span><span class="s2">"</span>
        
        <span class="c"># 시스템 정보 수집</span>
        ps aux <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$EVIDENCE_DIR</span><span class="s2">/processes.txt"</span>
        netstat <span class="nt">-tlnp</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$EVIDENCE_DIR</span><span class="s2">/network.txt"</span>
        ss <span class="nt">-tlnp</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$EVIDENCE_DIR</span><span class="s2">/sockets.txt"</span>
        last <span class="nt">-n</span> 50 <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$EVIDENCE_DIR</span><span class="s2">/logins.txt"</span>
        
        <span class="c"># 로그 파일 복사</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$SRCIP</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">grep</span> <span class="s2">"</span><span class="nv">$SRCIP</span><span class="s2">"</span> /var/log/auth.log <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$EVIDENCE_DIR</span><span class="s2">/auth-logs.txt"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
            grep</span> <span class="s2">"</span><span class="nv">$SRCIP</span><span class="s2">"</span> /var/log/apache2/access.log <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$EVIDENCE_DIR</span><span class="s2">/web-logs.txt"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
        </span><span class="k">fi</span>
        
        <span class="c"># 메모리 덤프 (선택사항)</span>
        <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> memdump <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
            </span>memdump <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$EVIDENCE_DIR</span><span class="s2">/memory.dump"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
        </span><span class="k">fi
        
        </span>log_message <span class="s2">"Evidence collected in </span><span class="nv">$EVIDENCE_DIR</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="k">*</span><span class="p">)</span>
        log_message <span class="s2">"Unknown action: </span><span class="nv">$ACTION</span><span class="s2">"</span>
        <span class="p">;;</span>
<span class="k">esac</span>

<span class="c"># 성공 상태 반환</span>
<span class="nb">exit </span>0
</code></pre></div></div>

<h4 id="알림-시스템-구축">알림 시스템 구축</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/send-alert.sh</span>
<span class="c"># 다중 채널 알림 시스템</span>

<span class="nv">SUBJECT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="nv">MESSAGE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
<span class="nv">SEVERITY</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">3</span><span class="k">:-</span><span class="nv">medium</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># 설정 파일 로드</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> /etc/wazuh/alert-config.conf <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">source</span> /etc/wazuh/alert-config.conf
<span class="k">fi</span>

<span class="c"># 기본 설정</span>
<span class="nv">EMAIL_TO</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">EMAIL_TO</span><span class="k">:-</span><span class="nv">admin</span><span class="p">@example.com</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">SLACK_WEBHOOK</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">SLACK_WEBHOOK</span><span class="k">:-}</span><span class="s2">"</span>
<span class="nv">DISCORD_WEBHOOK</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">DISCORD_WEBHOOK</span><span class="k">:-}</span><span class="s2">"</span>
<span class="nv">SMS_API_KEY</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">SMS_API_KEY</span><span class="k">:-}</span><span class="s2">"</span>
<span class="nv">SMS_TO</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">SMS_TO</span><span class="k">:-}</span><span class="s2">"</span>

<span class="c"># 로그 함수</span>
log_alert<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2"> - [</span><span class="nv">$SEVERITY</span><span class="s2">] </span><span class="nv">$SUBJECT</span><span class="s2">: </span><span class="nv">$MESSAGE</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /var/log/wazuh-alerts.log
<span class="o">}</span>

<span class="c"># 이메일 발송</span>
send_email<span class="o">()</span> <span class="o">{</span>
    <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> mail <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$MESSAGE</span><span class="s2">"</span> | mail <span class="nt">-s</span> <span class="s2">"Wazuh Alert: </span><span class="nv">$SUBJECT</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$EMAIL_TO</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"Email sent to </span><span class="nv">$EMAIL_TO</span><span class="s2">"</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Slack 알림</span>
send_slack<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$SLACK_WEBHOOK</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="c"># 심각도에 따른 색상</span>
        <span class="k">case</span> <span class="nv">$SEVERITY</span> <span class="k">in</span>
            <span class="s2">"high"</span><span class="p">|</span><span class="s2">"critical"</span><span class="p">)</span>
                <span class="nv">COLOR</span><span class="o">=</span><span class="s2">"danger"</span>
                <span class="nv">EMOJI</span><span class="o">=</span><span class="s2">"🚨"</span>
                <span class="p">;;</span>
            <span class="s2">"medium"</span><span class="p">)</span>
                <span class="nv">COLOR</span><span class="o">=</span><span class="s2">"warning"</span>
                <span class="nv">EMOJI</span><span class="o">=</span><span class="s2">"⚠️"</span>
                <span class="p">;;</span>
            <span class="k">*</span><span class="p">)</span>
                <span class="nv">COLOR</span><span class="o">=</span><span class="s2">"good"</span>
                <span class="nv">EMOJI</span><span class="o">=</span><span class="s2">"ℹ️"</span>
                <span class="p">;;</span>
        <span class="k">esac</span>
        
        <span class="nv">PAYLOAD</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
{
    "text": "</span><span class="nv">$EMOJI</span><span class="sh"> Wazuh Security Alert",
    "attachments": [
        {
            "color": "</span><span class="nv">$COLOR</span><span class="sh">",
            "fields": [
                {
                    "title": "Alert",
                    "value": "</span><span class="nv">$SUBJECT</span><span class="sh">",
                    "short": true
                },
                {
                    "title": "Severity",
                    "value": "</span><span class="nv">$SEVERITY</span><span class="sh">",
                    "short": true
                },
                {
                    "title": "Details",
                    "value": "</span><span class="nv">$MESSAGE</span><span class="sh">",
                    "short": false
                },
                {
                    "title": "Timestamp",
                    "value": "</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="sh">",
                    "short": true
                },
                {
                    "title": "Host",
                    "value": "</span><span class="si">$(</span><span class="nb">hostname</span><span class="si">)</span><span class="sh">",
                    "short": true
                }
            ]
        }
    ]
}
</span><span class="no">EOF
</span>        <span class="si">)</span>
        
        curl <span class="nt">-X</span> POST <span class="nt">-H</span> <span class="s1">'Content-type: application/json'</span> <span class="se">\</span>
             <span class="nt">--data</span> <span class="s2">"</span><span class="nv">$PAYLOAD</span><span class="s2">"</span> <span class="se">\</span>
             <span class="s2">"</span><span class="nv">$SLACK_WEBHOOK</span><span class="s2">"</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1
        
        <span class="nb">echo</span> <span class="s2">"Slack notification sent"</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Discord 알림</span>
send_discord<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$DISCORD_WEBHOOK</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">PAYLOAD</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
{
    "username": "Wazuh Security Bot",
    "embeds": [
        {
            "title": "🛡️ Security Alert: </span><span class="nv">$SUBJECT</span><span class="sh">",
            "description": "</span><span class="nv">$MESSAGE</span><span class="sh">",
            "color": 15158332,
            "fields": [
                {
                    "name": "Severity",
                    "value": "</span><span class="nv">$SEVERITY</span><span class="sh">",
                    "inline": true
                },
                {
                    "name": "Host",
                    "value": "</span><span class="si">$(</span><span class="nb">hostname</span><span class="si">)</span><span class="sh">",
                    "inline": true
                },
                {
                    "name": "Timestamp",
                    "value": "</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="sh">",
                    "inline": false
                }
            ]
        }
    ]
}
</span><span class="no">EOF
</span>        <span class="si">)</span>
        
        curl <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
             <span class="nt">-X</span> POST <span class="se">\</span>
             <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$PAYLOAD</span><span class="s2">"</span> <span class="se">\</span>
             <span class="s2">"</span><span class="nv">$DISCORD_WEBHOOK</span><span class="s2">"</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1
        
        <span class="nb">echo</span> <span class="s2">"Discord notification sent"</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># SMS 발송 (Twilio API 예제)</span>
send_sms<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$SMS_API_KEY</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$SMS_TO</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$SEVERITY</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"critical"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">SMS_MESSAGE</span><span class="o">=</span><span class="s2">"Wazuh CRITICAL Alert: </span><span class="nv">$SUBJECT</span><span class="s2"> on </span><span class="si">$(</span><span class="nb">hostname</span><span class="si">)</span><span class="s2">"</span>
        
        curl <span class="nt">-X</span> POST https://api.twilio.com/2010-04-01/Accounts/<span class="nv">$TWILIO_SID</span>/Messages.json <span class="se">\</span>
             <span class="nt">--data-urlencode</span> <span class="s2">"To=</span><span class="nv">$SMS_TO</span><span class="s2">"</span> <span class="se">\</span>
             <span class="nt">--data-urlencode</span> <span class="s2">"From=</span><span class="nv">$TWILIO_FROM</span><span class="s2">"</span> <span class="se">\</span>
             <span class="nt">--data-urlencode</span> <span class="s2">"Body=</span><span class="nv">$SMS_MESSAGE</span><span class="s2">"</span> <span class="se">\</span>
             <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$TWILIO_SID</span><span class="s2">:</span><span class="nv">$SMS_API_KEY</span><span class="s2">"</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1
        
        <span class="nb">echo</span> <span class="s2">"SMS notification sent"</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># 메인 실행</span>
main<span class="o">()</span> <span class="o">{</span>
    log_alert
    
    <span class="c"># 심각도에 따른 알림 채널 선택</span>
    <span class="k">case</span> <span class="nv">$SEVERITY</span> <span class="k">in</span>
        <span class="s2">"critical"</span><span class="p">)</span>
            send_email
            send_slack
            send_discord
            send_sms
            <span class="p">;;</span>
        <span class="s2">"high"</span><span class="p">)</span>
            send_email
            send_slack
            send_discord
            <span class="p">;;</span>
        <span class="s2">"medium"</span><span class="p">)</span>
            send_slack
            <span class="p">;;</span>
        <span class="s2">"low"</span><span class="p">)</span>
            log_alert  <span class="c"># 로그만 기록</span>
            <span class="p">;;</span>
    <span class="k">esac</span>
<span class="o">}</span>

main
</code></pre></div></div>

<h2 id="docker-컨테이너-보안--docker-container-security">Docker 컨테이너 보안 | Docker Container Security</h2>

<h3 id="-docker-보안-강화">🐳 Docker 보안 강화</h3>

<h4 id="포괄적인-docker-보안-설정">포괄적인 Docker 보안 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/docker-security-hardening.sh</span>
<span class="c"># Docker 보안 강화 스크립트</span>

<span class="nb">set</span> <span class="nt">-e</span>

print_status<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2"> - </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># Docker 데몬 보안 설정</span>
configure_docker_daemon<span class="o">()</span> <span class="o">{</span>
    print_status <span class="s2">"Configuring Docker daemon security..."</span>
    
    <span class="c"># Docker 데몬 설정 파일 생성</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> /etc/docker
    
    <span class="nb">cat</span> <span class="o">&gt;</span> /etc/docker/daemon.json <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
{
    "icc": false,
    "userns-remap": "default",
    "live-restore": true,
    "userland-proxy": false,
    "no-new-privileges": true,
    "log-driver": "json-file",
    "log-opts": {
        "max-size": "10m",
        "max-file": "3"
    },
    "storage-driver": "overlay2",
    "storage-opts": [
        "overlay2.override_kernel_check=true"
    ],
    "default-ulimits": {
        "nofile": {
            "Hard": 64000,
            "Name": "nofile",
            "Soft": 64000
        }
    },
    "disable-legacy-registry": true,
    "experimental": false,
    "metrics-addr": "127.0.0.1:9323",
    "insecure-registries": []
}
</span><span class="no">EOF
    
</span>    <span class="c"># Docker 서비스 재시작</span>
    systemctl restart docker
    print_status <span class="s2">"Docker daemon configured successfully"</span>
<span class="o">}</span>

<span class="c"># Docker 컨테이너 기본 보안 프로파일</span>
create_security_profiles<span class="o">()</span> <span class="o">{</span>
    print_status <span class="s2">"Creating security profiles..."</span>
    
    <span class="c"># AppArmor 프로파일 생성</span>
    <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> aa-status <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span><span class="nb">cat</span> <span class="o">&gt;</span> /etc/apparmor.d/docker-default-secure <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#include &lt;tunables/global&gt;

profile docker-default-secure flags=(attach_disconnected,mediate_deleted) {
  #include &lt;abstractions/base&gt;
  
  # 네트워크 접근 제한
  network inet tcp,
  network inet udp,
  network inet6 tcp,
  network inet6 udp,
  network netlink raw,
  
  # 파일 시스템 접근 제한
  deny /etc/passwd r,
  deny /etc/shadow r,
  deny /etc/group r,
  deny /etc/gshadow r,
  deny /proc/sys/** w,
  deny /sys/** w,
  
  # 특권 상승 방지
  deny capability sys_admin,
  deny capability sys_module,
  deny capability sys_rawio,
  deny capability sys_pacct,
  deny capability sys_nice,
  deny capability sys_resource,
  deny capability sys_time,
  deny capability sys_tty_config,
  deny capability mknod,
  deny capability audit_write,
  deny capability audit_control,
  deny capability mac_override,
  deny capability mac_admin,
  deny capability net_admin,
  deny capability syslog,
  deny capability wake_alarm,
  deny capability block_suspend,
  
  # 허용된 capability들
  capability chown,
  capability dac_override,
  capability fowner,
  capability fsetid,
  capability kill,
  capability setgid,
  capability setuid,
  capability setpcap,
  capability linux_immutable,
  capability net_bind_service,
  capability net_broadcast,
  capability net_raw,
  capability ipc_lock,
  capability ipc_owner,
  capability sys_chroot,
  capability sys_ptrace,
  capability lease,
  capability audit_read,
}
</span><span class="no">EOF
        
</span>        apparmor_parser <span class="nt">-r</span> /etc/apparmor.d/docker-default-secure
    <span class="k">fi</span>
    
    <span class="c"># Seccomp 프로파일 생성</span>
    <span class="nb">cat</span> <span class="o">&gt;</span> /etc/docker/seccomp-profile.json <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
{
    "defaultAction": "SCMP_ACT_ERRNO",
    "archMap": [
        {
            "architecture": "SCMP_ARCH_X86_64",
            "subArchitectures": [
                "SCMP_ARCH_X86",
                "SCMP_ARCH_X32"
            ]
        }
    ],
    "syscalls": [
        {
            "names": [
                "accept",
                "accept4", 
                "access",
                "adjtimex",
                "alarm",
                "bind",
                "brk",
                "chdir",
                "chmod",
                "chown",
                "chroot",
                "clock_getres",
                "clock_gettime",
                "clone",
                "close",
                "connect",
                "dup",
                "dup2",
                "dup3",
                "epoll_create",
                "epoll_create1",
                "epoll_ctl",
                "epoll_wait",
                "eventfd",
                "eventfd2",
                "execve",
                "exit",
                "exit_group",
                "fcntl",
                "fstat",
                "futex",
                "getcwd",
                "getdents",
                "getdents64",
                "getegid",
                "geteuid",
                "getgid",
                "getgroups",
                "getpeername",
                "getpgrp",
                "getpid",
                "getppid",
                "getrlimit",
                "getsid",
                "getsockname",
                "getsockopt",
                "gettid",
                "gettimeofday",
                "getuid",
                "listen",
                "lseek",
                "lstat",
                "madvise",
                "mmap",
                "mprotect",
                "munmap",
                "nanosleep",
                "open",
                "openat",
                "pause",
                "pipe",
                "pipe2",
                "poll",
                "ppoll",
                "prctl",
                "read",
                "recv",
                "recvfrom",
                "recvmsg",
                "rt_sigaction",
                "rt_sigprocmask",
                "rt_sigreturn",
                "sched_getaffinity",
                "sched_yield",
                "select",
                "send",
                "sendmsg",
                "sendto",
                "setgid",
                "setgroups",
                "setrlimit",
                "setsid",
                "setsockopt",
                "setuid",
                "shutdown",
                "sigaltstack",
                "socket",
                "socketpair",
                "stat",
                "statfs",
                "sysinfo",
                "time",
                "uname",
                "unlink",
                "unlinkat",
                "wait4",
                "waitpid",
                "write"
            ],
            "action": "SCMP_ACT_ALLOW"
        }
    ]
}
</span><span class="no">EOF
    
</span>    print_status <span class="s2">"Security profiles created successfully"</span>
<span class="o">}</span>

<span class="c"># Docker 이미지 보안 스캐너 설치</span>
install_image_scanner<span class="o">()</span> <span class="o">{</span>
    print_status <span class="s2">"Installing Docker image security scanner..."</span>
    
    <span class="c"># Trivy 설치</span>
    <span class="k">if</span> <span class="o">!</span> <span class="nb">command</span> <span class="nt">-v</span> trivy <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        case</span> <span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span> <span class="k">in
            </span>x86_64<span class="p">)</span>
                <span class="nv">ARCH</span><span class="o">=</span><span class="s2">"64bit"</span>
                <span class="p">;;</span>
            aarch64<span class="p">)</span>
                <span class="nv">ARCH</span><span class="o">=</span><span class="s2">"ARM64"</span>
                <span class="p">;;</span>
            <span class="k">*</span><span class="p">)</span>
                print_status <span class="s2">"Unsupported architecture for Trivy"</span>
                <span class="k">return </span>1
                <span class="p">;;</span>
        <span class="k">esac</span>
        
        <span class="nv">VERSION</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> <span class="s2">"https://api.github.com/repos/aquasecurity/trivy/releases/latest"</span> | <span class="nb">grep</span> <span class="s1">'"tag_name":'</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/.*"([^"]+)".*/\1/'</span><span class="si">)</span>
        wget <span class="nt">-q</span> <span class="s2">"https://github.com/aquasecurity/trivy/releases/download/</span><span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span><span class="s2">/trivy_</span><span class="k">${</span><span class="nv">VERSION</span><span class="p">#v</span><span class="k">}</span><span class="s2">_Linux-</span><span class="k">${</span><span class="nv">ARCH</span><span class="k">}</span><span class="s2">.tar.gz"</span>
        <span class="nb">tar</span> <span class="nt">-xzf</span> <span class="s2">"trivy_</span><span class="k">${</span><span class="nv">VERSION</span><span class="p">#v</span><span class="k">}</span><span class="s2">_Linux-</span><span class="k">${</span><span class="nv">ARCH</span><span class="k">}</span><span class="s2">.tar.gz"</span>
        <span class="nb">mv </span>trivy /usr/local/bin/
        <span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"trivy_</span><span class="k">${</span><span class="nv">VERSION</span><span class="p">#v</span><span class="k">}</span><span class="s2">_Linux-</span><span class="k">${</span><span class="nv">ARCH</span><span class="k">}</span><span class="s2">.tar.gz"</span>
    <span class="k">fi
    
    </span>print_status <span class="s2">"Trivy installed successfully"</span>
<span class="o">}</span>

<span class="c"># Docker 컴포즈 보안 템플릿</span>
create_secure_compose_template<span class="o">()</span> <span class="o">{</span>
    print_status <span class="s2">"Creating secure Docker Compose template..."</span>
    
    <span class="nb">cat</span> <span class="o">&gt;</span> /usr/local/share/docker-compose-secure-template.yml <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
version: '3.8'

# 보안 강화된 Docker Compose 템플릿
services:
  app:
    image: your-app:latest
    
    # 보안 설정
    read_only: true                    # 루트 파일시스템 읽기 전용
    cap_drop:                         # 모든 capabilities 제거
      - ALL
    cap_add:                          # 필요한 capabilities만 추가
      - NET_BIND_SERVICE
    
    # 리소스 제한
    mem_limit: 512m
    memswap_limit: 512m
    cpu_count: 1
    pids_limit: 100
    
    # 네트워크 보안
    networks:
      - app-network
    ports:
      - "8080:8080"
    
    # 환경 변수 (secrets 사용 권장)
    environment:
      - NODE_ENV=production
    
    # 볼륨 마운트 (최소한으로)
    volumes:
      - app-data:/app/data
      - /tmp:/tmp:rw,noexec,nosuid,nodev
    
    # 보안 옵션
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default-secure
      - seccomp:/etc/docker/seccomp-profile.json
    
    # 재시작 정책
    restart: unless-stopped
    
    # 헬스체크
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # 로그 설정
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 데이터베이스 서비스 예제
  database:
    image: postgres:13-alpine
    
    # 보안 설정
    read_only: true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    
    # 리소스 제한
    mem_limit: 1g
    memswap_limit: 1g
    
    # 환경 변수
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    
    # Secrets 사용
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
    
    # 볼륨 설정
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - /tmp:/tmp:rw,noexec,nosuid,nodev
    
    # 네트워크
    networks:
      - db-network
    
    # 보안 옵션
    security_opt:
      - no-new-privileges:true
    
    # 헬스체크
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

# 네트워크 정의
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  db-network:
    driver: bridge
    internal: true                    # 외부 접근 차단

# 볼륨 정의
volumes:
  app-data:
    driver: local
  postgres-data:
    driver: local

# Secrets 정의
secrets:
  postgres_db:
    file: ./secrets/postgres_db.txt
  postgres_user:
    file: ./secrets/postgres_user.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
</span><span class="no">EOF
    
</span>    print_status <span class="s2">"Secure Docker Compose template created"</span>
<span class="o">}</span>

<span class="c"># Docker 보안 스캔 스크립트</span>
create_security_scanner<span class="o">()</span> <span class="o">{</span>
    print_status <span class="s2">"Creating Docker security scanner..."</span>
    
    <span class="nb">cat</span> <span class="o">&gt;</span> /usr/local/bin/docker-security-scan.sh <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/bash
# Docker 보안 스캔 스크립트

IMAGE=</span><span class="nv">$1</span><span class="sh">
REPORT_DIR="/var/log/docker-security-scans"
TIMESTAMP=</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span><span class="sh">

if [ -z "</span><span class="nv">$IMAGE</span><span class="sh">" ]; then
    echo "Usage: </span><span class="nv">$0</span><span class="sh"> &lt;image-name&gt;"
    exit 1
fi

mkdir -p "</span><span class="nv">$REPORT_DIR</span><span class="sh">"

echo "Starting security scan for image: </span><span class="nv">$IMAGE</span><span class="sh">"

# Trivy 취약점 스캔
echo "Running Trivy vulnerability scan..."
trivy image --format json --output "</span><span class="nv">$REPORT_DIR</span><span class="sh">/trivy-</span><span class="nv">$TIMESTAMP</span><span class="sh">.json" "</span><span class="nv">$IMAGE</span><span class="sh">"
trivy image --format table "</span><span class="nv">$IMAGE</span><span class="sh">" | tee "</span><span class="nv">$REPORT_DIR</span><span class="sh">/trivy-</span><span class="nv">$TIMESTAMP</span><span class="sh">.txt"

# Docker Bench 보안 스캔 (설치된 경우)
if command -v docker-bench-security &gt;/dev/null 2&gt;&amp;1; then
    echo "Running Docker Bench security check..."
    docker-bench-security &gt; "</span><span class="nv">$REPORT_DIR</span><span class="sh">/docker-bench-</span><span class="nv">$TIMESTAMP</span><span class="sh">.txt"
fi

# 이미지 히스토리 분석
echo "Analyzing image history..."
docker history --no-trunc "</span><span class="nv">$IMAGE</span><span class="sh">" &gt; "</span><span class="nv">$REPORT_DIR</span><span class="sh">/history-</span><span class="nv">$TIMESTAMP</span><span class="sh">.txt"

# 이미지 구성 확인
echo "Checking image configuration..."
docker inspect "</span><span class="nv">$IMAGE</span><span class="sh">" &gt; "</span><span class="nv">$REPORT_DIR</span><span class="sh">/inspect-</span><span class="nv">$TIMESTAMP</span><span class="sh">.json"

# 보안 권고사항 체크
echo "Checking security best practices..."
{
    echo "=== Security Check Results ==="
    echo "Image: </span><span class="nv">$IMAGE</span><span class="sh">"
    echo "Scan Date: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="sh">"
    echo ""
    
    # 루트 사용자 체크
    if docker inspect "</span><span class="nv">$IMAGE</span><span class="sh">" | grep -q '"User": ""'; then
        echo "❌ FAIL: Image runs as root user"
    else
        echo "✅ PASS: Image does not run as root"
    fi
    
    # 불필요한 패키지 체크
    echo ""
    echo "=== Package Analysis ==="
    docker run --rm "</span><span class="nv">$IMAGE</span><span class="sh">" sh -c 'which wget curl nc netcat' 2&gt;/dev/null | while read tool; do
        if [ -n "</span><span class="nv">$tool</span><span class="sh">" ]; then
            echo "⚠️  WARNING: Found potentially dangerous tool: </span><span class="nv">$tool</span><span class="sh">"
        fi
    done
    
} &gt; "</span><span class="nv">$REPORT_DIR</span><span class="sh">/security-check-</span><span class="nv">$TIMESTAMP</span><span class="sh">.txt"

echo "Security scan completed. Reports saved in: </span><span class="nv">$REPORT_DIR</span><span class="sh">"
</span><span class="no">EOF
    
</span>    <span class="nb">chmod</span> +x /usr/local/bin/docker-security-scan.sh
    print_status <span class="s2">"Docker security scanner created"</span>
<span class="o">}</span>

<span class="c"># 메인 실행</span>
main<span class="o">()</span> <span class="o">{</span>
    print_status <span class="s2">"Starting Docker security hardening..."</span>
    
    configure_docker_daemon
    create_security_profiles
    install_image_scanner
    create_secure_compose_template
    create_security_scanner
    
    print_status <span class="s2">"Docker security hardening completed successfully!"</span>
    
    <span class="nb">echo</span> <span class="s2">""</span>
    <span class="nb">echo</span> <span class="s2">"Next steps:"</span>
    <span class="nb">echo</span> <span class="s2">"1. Review Docker daemon configuration in /etc/docker/daemon.json"</span>
    <span class="nb">echo</span> <span class="s2">"2. Use secure Docker Compose template: /usr/local/share/docker-compose-secure-template.yml"</span>
    <span class="nb">echo</span> <span class="s2">"3. Scan images with: /usr/local/bin/docker-security-scan.sh &lt;image-name&gt;"</span>
    <span class="nb">echo</span> <span class="s2">"4. Apply security profiles to containers"</span>
<span class="o">}</span>

main <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="다음-편-예고">다음 편 예고</h2>

<p>다음 포스트에서는 <strong>Kubernetes 보안과 컴플라이언스</strong>를 상세히 다룰 예정입니다:</p>
<ul>
  <li>Kubernetes 클러스터 보안 강화</li>
  <li>Pod Security Standards 및 정책</li>
  <li>Network Policy와 Service Mesh 보안</li>
  <li>컴플라이언스 자동화 및 감사</li>
</ul>

<p>Wazuh SIEM과 Docker 보안으로 엔터프라이즈급 보안 인프라를 완성하셨나요? 🔍🐳🛡️</p>]]></content><author><name>DevOps Engineer</name></author><category term="Security" /><category term="Linux" /><category term="wazuh" /><category term="siem" /><category term="container-security" /><category term="docker" /><category term="kubernetes" /><category term="compliance" /><category term="threat-detection" /><category term="log-analysis" /><summary type="html"><![CDATA[리눅스 보안의 최종 완성 단계인 Wazuh SIEM 구축과 컨테이너 보안을 완전히 마스터해보겠습니다. 엔터프라이즈급 보안 모니터링부터 최신 컨테이너 환경 보안까지, 차세대 보안 인프라를 구축하는 모든 것을 다룹니다. Wazuh SIEM 완전 구축 | Complete Wazuh SIEM Implementation 🔍 Wazuh 아키텍처 및 설치 Wazuh 완전 설치 스크립트 #!/bin/bash # /usr/local/bin/wazuh-installer.sh # Wazuh SIEM 완전 자동 설치 스크립트 set -e # 색상 정의 RED='\033[0;31m' GREEN='\033[0;32m' YELLOW='\033[1;33m' BLUE='\033[0;34m' NC='\033[0m' print_color() { echo -e "${2}${1}${NC}" } # 시스템 정보 확인 OS_ID=$(grep ^ID= /etc/os-release | cut -d= -f2 | tr -d '"') OS_VERSION=$(grep ^VERSION_ID= /etc/os-release | cut -d= -f2 | tr -d '"') print_color "=== Wazuh SIEM Installation Started ===" "$BLUE" print_color "OS: $OS_ID $OS_VERSION" "$BLUE" # 전제 조건 확인 check_prerequisites() { print_color "Checking prerequisites..." "$YELLOW" # 최소 시스템 요구사항 확인 RAM_GB=$(free -g | awk '/^Mem:/{print $2}') if [ "$RAM_GB" -lt 2 ]; then print_color "WARNING: Minimum 2GB RAM recommended (Current: ${RAM_GB}GB)" "$RED" fi # 디스크 공간 확인 DISK_GB=$(df / | awk 'NR==2{print int($4/1048576)}') if [ "$DISK_GB" -lt 10 ]; then print_color "WARNING: Minimum 10GB disk space recommended (Available: ${DISK_GB}GB)" "$RED" fi # 네트워크 연결 확인 if ! ping -c 1 packages.wazuh.com &gt;/dev/null 2&gt;&amp;1; then print_color "ERROR: Cannot reach Wazuh repository" "$RED" exit 1 fi print_color "Prerequisites check completed" "$GREEN" } # Wazuh 저장소 추가 setup_repository() { print_color "Setting up Wazuh repository..." "$YELLOW" case $OS_ID in "centos"|"rhel"|"fedora") # CentOS/RHEL/Fedora rpm --import https://packages.wazuh.com/key/GPG-KEY-WAZUH cat &gt; /etc/yum.repos.d/wazuh.repo &lt;&lt; 'EOF' [wazuh] gpgcheck=1 gpgkey=https://packages.wazuh.com/key/GPG-KEY-WAZUH enabled=1 name=EL-$releasever - Wazuh baseurl=https://packages.wazuh.com/4.x/yum/ protect=1 EOF ;; "ubuntu"|"debian") # Ubuntu/Debian curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | gpg --no-default-keyring --keyring gnupg-ring:/usr/share/keyrings/wazuh.gpg --import &amp;&amp; chmod 644 /usr/share/keyrings/wazuh.gpg echo "deb [signed-by=/usr/share/keyrings/wazuh.gpg] https://packages.wazuh.com/4.x/apt/ stable main" | tee -a /etc/apt/sources.list.d/wazuh.list apt-get update ;; *) print_color "Unsupported OS: $OS_ID" "$RED" exit 1 ;; esac print_color "Repository setup completed" "$GREEN" } # Wazuh Manager 설치 install_wazuh_manager() { print_color "Installing Wazuh Manager..." "$YELLOW" case $OS_ID in "centos"|"rhel"|"fedora") yum install -y wazuh-manager ;; "ubuntu"|"debian") apt-get install -y wazuh-manager ;; esac # 서비스 활성화 systemctl daemon-reload systemctl enable wazuh-manager systemctl start wazuh-manager print_color "Wazuh Manager installed successfully" "$GREEN" } # Wazuh API 설치 및 설정 install_wazuh_api() { print_color "Installing and configuring Wazuh API..." "$YELLOW" case $OS_ID in "centos"|"rhel"|"fedora") yum install -y nodejs npm ;; "ubuntu"|"debian") apt-get install -y nodejs npm ;; esac # Wazuh API 설치 case $OS_ID in "centos"|"rhel"|"fedora") yum install -y wazuh-api ;; "ubuntu"|"debian") apt-get install -y wazuh-api ;; esac # API 설정 cat &gt; /var/ossec/api/configuration/config.js &lt;&lt; 'EOF' var config = {}; config.port = "55000"; config.host = "0.0.0.0"; config.https = "no"; config.basic_auth = "yes"; config.BehindProxyServer = "no"; config.cors = "yes"; module.exports = config; EOF # API 사용자 생성 cd /var/ossec/api/scripts ./configure_api.sh systemctl enable wazuh-api systemctl start wazuh-api print_color "Wazuh API configured successfully" "$GREEN" } # Elastic Stack 설치 install_elastic_stack() { print_color "Installing Elastic Stack..." "$YELLOW" # Elasticsearch 저장소 추가 case $OS_ID in "centos"|"rhel"|"fedora") rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch cat &gt; /etc/yum.repos.d/elasticsearch.repo &lt;&lt; 'EOF' [elasticsearch] name=Elasticsearch repository for 7.x packages baseurl=https://artifacts.elastic.co/packages/7.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=0 autorefresh=1 type=rpm-md EOF ;; "ubuntu"|"debian") wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee /etc/apt/sources.list.d/elastic-7.x.list apt-get update ;; esac # Java 설치 (Elasticsearch 요구사항) case $OS_ID in "centos"|"rhel"|"fedora") yum install -y java-11-openjdk ;; "ubuntu"|"debian") apt-get install -y openjdk-11-jdk ;; esac # Elasticsearch 설치 case $OS_ID in "centos"|"rhel"|"fedora") yum install --enablerepo=elasticsearch -y elasticsearch ;; "ubuntu"|"debian") apt-get install -y elasticsearch ;; esac # Elasticsearch 설정 cat &gt; /etc/elasticsearch/elasticsearch.yml &lt;&lt; 'EOF' cluster.name: wazuh-cluster node.name: wazuh-node path.data: /var/lib/elasticsearch path.logs: /var/log/elasticsearch network.host: localhost http.port: 9200 cluster.initial_master_nodes: ["wazuh-node"] EOF # JVM 힙 크기 설정 (시스템 메모리의 50%) HEAP_SIZE=$((RAM_GB / 2)) if [ $HEAP_SIZE -lt 1 ]; then HEAP_SIZE=1 fi cat &gt; /etc/elasticsearch/jvm.options.d/wazuh.options &lt;&lt; EOF -Xms${HEAP_SIZE}g -Xmx${HEAP_SIZE}g EOF systemctl daemon-reload systemctl enable elasticsearch systemctl start elasticsearch # Elasticsearch 시작 대기 sleep 30 # Kibana 설치 case $OS_ID in "centos"|"rhel"|"fedora") yum install --enablerepo=elasticsearch -y kibana ;; "ubuntu"|"debian") apt-get install -y kibana ;; esac # Kibana 설정 cat &gt; /etc/kibana/kibana.yml &lt;&lt; 'EOF' server.port: 5601 server.host: "0.0.0.0" elasticsearch.hosts: ["http://localhost:9200"] logging.dest: /var/log/kibana/kibana.log EOF systemctl enable kibana systemctl start kibana print_color "Elastic Stack installed successfully" "$GREEN" } # Wazuh Kibana 플러그인 설치 install_wazuh_kibana_plugin() { print_color "Installing Wazuh Kibana plugin..." "$YELLOW" # Kibana 정지 systemctl stop kibana # 플러그인 설치 sudo -u kibana /usr/share/kibana/bin/kibana-plugin install https://packages.wazuh.com/4.x/ui/kibana/wazuh_kibana-4.8.0_7.17.0-1.zip # Kibana 시작 systemctl start kibana print_color "Wazuh Kibana plugin installed successfully" "$GREEN" } # Filebeat 설치 및 설정 install_filebeat() { print_color "Installing and configuring Filebeat..." "$YELLOW" case $OS_ID in "centos"|"rhel"|"fedora") yum install --enablerepo=elasticsearch -y filebeat ;; "ubuntu"|"debian") apt-get install -y filebeat ;; esac # Filebeat 설정 curl -so /etc/filebeat/filebeat.yml https://raw.githubusercontent.com/wazuh/wazuh/4.8/extensions/filebeat/7.x/filebeat.yml curl -so /etc/filebeat/wazuh-template.json https://raw.githubusercontent.com/wazuh/wazuh/4.8/extensions/elasticsearch/7.x/wazuh-template.json # Wazuh 모듈 다운로드 curl -s https://packages.wazuh.com/4.x/filebeat/wazuh-filebeat-0.4.tar.gz | tar -xvz -C /usr/share/filebeat/module # Elasticsearch 템플릿 및 파이프라인 설정 filebeat setup --template systemctl daemon-reload systemctl enable filebeat systemctl start filebeat print_color "Filebeat configured successfully" "$GREEN" } # 방화벽 설정 configure_firewall() { print_color "Configuring firewall..." "$YELLOW" # 필요한 포트들 # 1514/udp: Wazuh agents # 1515/tcp: Wazuh agents registration # 55000/tcp: Wazuh API # 5601/tcp: Kibana # 9200/tcp: Elasticsearch if command -v ufw &gt;/dev/null 2&gt;&amp;1; then # Ubuntu UFW ufw allow 1514/udp ufw allow 1515/tcp ufw allow 55000/tcp ufw allow 5601/tcp ufw allow 9200/tcp elif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then # CentOS/RHEL firewalld firewall-cmd --permanent --add-port=1514/udp firewall-cmd --permanent --add-port=1515/tcp firewall-cmd --permanent --add-port=55000/tcp firewall-cmd --permanent --add-port=5601/tcp firewall-cmd --permanent --add-port=9200/tcp firewall-cmd --reload fi print_color "Firewall configured successfully" "$GREEN" } # 설치 검증 verify_installation() { print_color "Verifying installation..." "$YELLOW" # 서비스 상태 확인 SERVICES=("wazuh-manager" "wazuh-api" "elasticsearch" "kibana" "filebeat") for service in "${SERVICES[@]}"; do if systemctl is-active --quiet "$service"; then print_color "✓ $service is running" "$GREEN" else print_color "✗ $service is not running" "$RED" fi done # 포트 확인 print_color "\nPort status:" "$BLUE" ss -tlnp | grep -E ':(1514|1515|5601|9200|55000)' # Wazuh 에이전트 키 생성 예제 print_color "\nGenerating example agent key..." "$YELLOW" /var/ossec/bin/manage_agents -a -n example-agent -i 001 print_color "\n=== Installation Summary ===" "$BLUE" echo "Wazuh Manager: http://$(hostname -I | awk '{print $1}'):55000" echo "Kibana Dashboard: http://$(hostname -I | awk '{print $1}'):5601" echo "Elasticsearch: http://$(hostname -I | awk '{print $1}'):9200" echo "" echo "Default credentials:" echo "- Wazuh API: admin / admin" echo "- Change default passwords immediately!" } # 메인 설치 프로세스 main() { check_prerequisites setup_repository install_wazuh_manager install_wazuh_api install_elastic_stack install_wazuh_kibana_plugin install_filebeat configure_firewall verify_installation print_color "\n🎉 Wazuh SIEM installation completed successfully!" "$GREEN" print_color "Access Kibana at: http://$(hostname -I | awk '{print $1}'):5601" "$BLUE" } # 스크립트 실행 if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then main "$@" fi 🛡️ Wazuh 고급 설정 및 규칙 커스텀 보안 룰 작성 # /var/ossec/etc/rules/local_rules.xml # Wazuh 커스텀 보안 룰 &lt;group name="local,syslog,"&gt; &lt;!-- 커스텀 SSH 공격 탐지 --&gt; &lt;rule id="100001" level="10"&gt; &lt;if_sid&gt;5720&lt;/if_sid&gt; &lt;match&gt;^Failed|^error: PAM: Authentication failure&lt;/match&gt; &lt;description&gt;SSH authentication failure.&lt;/description&gt; &lt;group&gt;authentication_failed,pci_dss_10.2.4,pci_dss_10.2.5,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100002" level="12"&gt; &lt;if_sid&gt;100001&lt;/if_sid&gt; &lt;same_source_ip /&gt; &lt;description&gt;SSH brute force attack detected (multiple authentication failures).&lt;/description&gt; &lt;mitre&gt; &lt;id&gt;T1110&lt;/id&gt; &lt;/mitre&gt; &lt;group&gt;authentication_failures,pci_dss_10.2.4,pci_dss_10.2.5,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 웹 애플리케이션 공격 탐지 --&gt; &lt;rule id="100010" level="6"&gt; &lt;if_sid&gt;31100&lt;/if_sid&gt; &lt;url&gt;admin|wp-admin|phpmyadmin|cpanel&lt;/url&gt; &lt;description&gt;Attempt to access sensitive web directories.&lt;/description&gt; &lt;group&gt;web,accesslog,attack,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100011" level="8"&gt; &lt;if_sid&gt;31100&lt;/if_sid&gt; &lt;url&gt;\.php\?|\.asp\?|\.jsp\?&lt;/url&gt; &lt;description&gt;Potential web application vulnerability scan.&lt;/description&gt; &lt;group&gt;web,accesslog,attack,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100012" level="10"&gt; &lt;if_sid&gt;31100&lt;/if_sid&gt; &lt;url&gt;union.*select|concat\(|exec\(|system\(&lt;/url&gt; &lt;description&gt;SQL injection attempt detected.&lt;/description&gt; &lt;mitre&gt; &lt;id&gt;T1190&lt;/id&gt; &lt;/mitre&gt; &lt;group&gt;web,accesslog,attack,sql_injection,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 파일 시스템 모니터링 --&gt; &lt;rule id="100020" level="7"&gt; &lt;if_sid&gt;550&lt;/if_sid&gt; &lt;field name="file"&gt;/etc/passwd|/etc/shadow|/etc/group&lt;/field&gt; &lt;description&gt;Critical system file modified.&lt;/description&gt; &lt;group&gt;syscheck,pci_dss_11.5,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100021" level="12"&gt; &lt;if_sid&gt;554&lt;/if_sid&gt; &lt;field name="file"&gt;/bin/|/sbin/|/usr/bin/&lt;/field&gt; &lt;description&gt;System binary file modified or deleted - possible rootkit.&lt;/description&gt; &lt;mitre&gt; &lt;id&gt;T1014&lt;/id&gt; &lt;/mitre&gt; &lt;group&gt;syscheck,rootkit,pci_dss_11.5,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 네트워크 공격 탐지 --&gt; &lt;rule id="100030" level="8"&gt; &lt;if_sid&gt;4386&lt;/if_sid&gt; &lt;regex&gt;DPT=(22|23|21|25|53|80|110|143|443|993|995|3389)&lt;/regex&gt; &lt;description&gt;Port scan detected on critical services.&lt;/description&gt; &lt;group&gt;recon,pci_dss_11.4,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100031" level="10"&gt; &lt;if_sid&gt;100030&lt;/if_sid&gt; &lt;same_source_ip /&gt; &lt;description&gt;Multiple port scan attempts from same source.&lt;/description&gt; &lt;mitre&gt; &lt;id&gt;T1046&lt;/id&gt; &lt;/mitre&gt; &lt;group&gt;recon,pci_dss_11.4,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 악성코드 및 의심스러운 프로세스 --&gt; &lt;rule id="100040" level="12"&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;nc -l|ncat -l|/dev/tcp|/dev/udp&lt;/match&gt; &lt;description&gt;Potential reverse shell or backdoor detected.&lt;/description&gt; &lt;mitre&gt; &lt;id&gt;T1059&lt;/id&gt; &lt;/mitre&gt; &lt;group&gt;attack,malware,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100041" level="10"&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;wget.*\.(sh|py|pl)|curl.*\.(sh|py|pl)&lt;/match&gt; &lt;description&gt;Suspicious script download detected.&lt;/description&gt; &lt;group&gt;attack,malware,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 권한 상승 탐지 --&gt; &lt;rule id="100050" level="8"&gt; &lt;if_sid&gt;5401&lt;/if_sid&gt; &lt;user&gt;root&lt;/user&gt; &lt;description&gt;Successful sudo to root.&lt;/description&gt; &lt;group&gt;privilege_escalation,pci_dss_10.2.2,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100051" level="12"&gt; &lt;if_sid&gt;5402&lt;/if_sid&gt; &lt;same_user /&gt; &lt;description&gt;Multiple failed sudo attempts by same user.&lt;/description&gt; &lt;mitre&gt; &lt;id&gt;T1548&lt;/id&gt; &lt;/mitre&gt; &lt;group&gt;privilege_escalation,pci_dss_10.2.2,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 데이터 유출 감지 --&gt; &lt;rule id="100060" level="10"&gt; &lt;if_sid&gt;31100&lt;/if_sid&gt; &lt;status&gt;200&lt;/status&gt; &lt;size&gt;1048576&lt;/size&gt; &lt;description&gt;Large file download detected - potential data exfiltration.&lt;/description&gt; &lt;group&gt;web,data_exfiltration,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100061" level="8"&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;scp.*-r|rsync.*-r|tar.*-c&lt;/match&gt; &lt;description&gt;Bulk data transfer command detected.&lt;/description&gt; &lt;group&gt;data_exfiltration,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 컨테이너 보안 --&gt; &lt;rule id="100070" level="10"&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;docker.*--privileged|docker.*--cap-add&lt;/match&gt; &lt;description&gt;Privileged container execution detected.&lt;/description&gt; &lt;group&gt;docker,container_security,&lt;/group&gt; &lt;/rule&gt; &lt;rule id="100071" level="8"&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;kubectl.*create|kubectl.*apply&lt;/match&gt; &lt;description&gt;Kubernetes resource creation detected.&lt;/description&gt; &lt;group&gt;kubernetes,container_security,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 로그 변조 탐지 --&gt; &lt;rule id="100080" level="12"&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;rm.*log|truncate.*log|&gt;.*log&lt;/match&gt; &lt;description&gt;Log file manipulation detected.&lt;/description&gt; &lt;mitre&gt; &lt;id&gt;T1070.002&lt;/id&gt; &lt;/mitre&gt; &lt;group&gt;log_tampering,attack,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 암호화폐 채굴 탐지 --&gt; &lt;rule id="100090" level="10"&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;xmrig|cpuminer|minerd|ccminer&lt;/match&gt; &lt;description&gt;Cryptocurrency mining activity detected.&lt;/description&gt; &lt;group&gt;malware,cryptomining,&lt;/group&gt; &lt;/rule&gt; &lt;!-- 컴플라이언스 관련 이벤트 --&gt; &lt;rule id="100100" level="5"&gt; &lt;if_sid&gt;5501&lt;/if_sid&gt; &lt;user&gt;audit&lt;/user&gt; &lt;description&gt;Audit log access detected.&lt;/description&gt; &lt;group&gt;audit,compliance,pci_dss_10.2.3,&lt;/group&gt; &lt;/rule&gt; &lt;/group&gt; 고급 디코더 설정 # /var/ossec/etc/decoders/local_decoder.xml # Wazuh 커스텀 디코더 &lt;decoder name="custom-ssh"&gt; &lt;parent&gt;sshd&lt;/parent&gt; &lt;regex&gt;Failed password for (\S+) from (\d+.\d+.\d+.\d+) port (\d+)&lt;/regex&gt; &lt;order&gt;user,srcip,srcport&lt;/order&gt; &lt;/decoder&gt; &lt;decoder name="custom-apache-error"&gt; &lt;parent&gt;apache-errorlog&lt;/parent&gt; &lt;regex&gt;\[(\w+ \w+ \d+ \d+:\d+:\d+ \d+)\] \[(\w+)\] (\S+): (.+), referer: (\S+)&lt;/regex&gt; &lt;order&gt;timestamp,level,client,message,referer&lt;/order&gt; &lt;/decoder&gt; &lt;decoder name="custom-mysql"&gt; &lt;parent&gt;mysql_log&lt;/parent&gt; &lt;regex&gt;(\d+) Connect\s+Access denied for user '(\S+)'@'(\S+)'&lt;/regex&gt; &lt;order&gt;id,user,srcip&lt;/order&gt; &lt;/decoder&gt; &lt;decoder name="custom-docker"&gt; &lt;parent&gt;json&lt;/parent&gt; &lt;regex&gt;"container_name":"([^"]+)"&lt;/regex&gt; &lt;order&gt;container_name&lt;/order&gt; &lt;/decoder&gt; &lt;decoder name="custom-kubernetes"&gt; &lt;parent&gt;json&lt;/parent&gt; &lt;regex&gt;"verb":"(\S+)","user":{"username":"([^"]+)"}&lt;/regex&gt; &lt;order&gt;verb,username&lt;/order&gt; &lt;/decoder&gt; 📊 Wazuh 자동화 및 대응 자동 대응 스크립트 #!/bin/bash # /var/ossec/active-response/bin/custom-response.sh # Wazuh 자동 대응 스크립트 # 입력 파라미터 읽기 LOCAL=`echo $0 | cut -d '/' -f4` PWD=`pwd` read INPUT_JSON # JSON 파싱 함수 get_json_value() { echo "$INPUT_JSON" | python3 -c " import sys, json data = json.load(sys.stdin) print(data.get('$1', '')) " 2&gt;/dev/null || echo "" } # 로그 함수 log_message() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" &gt;&gt; /var/ossec/logs/active-responses.log } # 액션 및 매개변수 추출 ACTION=$(get_json_value "command") SRCIP=$(get_json_value "parameters.alert.data.srcip") RULE_ID=$(get_json_value "parameters.alert.rule.id") USERNAME=$(get_json_value "parameters.alert.data.user") FILENAME=$(get_json_value "parameters.alert.syscheck.path") log_message "Active response triggered: Action=$ACTION, Rule=$RULE_ID, SrcIP=$SRCIP" case $ACTION in "ban-ip") # IP 차단 if [ -n "$SRCIP" ]; then # iptables 차단 iptables -I INPUT -s "$SRCIP" -j DROP # Fail2Ban 차단 (Fail2Ban이 설치된 경우) if command -v fail2ban-client &gt;/dev/null 2&gt;&amp;1; then fail2ban-client set sshd banip "$SRCIP" fi log_message "IP $SRCIP banned successfully" # 알림 발송 /usr/local/bin/send-alert.sh "IP Banned" "IP $SRCIP has been banned due to rule $RULE_ID" fi ;; "disable-user") # 사용자 계정 비활성화 if [ -n "$USERNAME" ]; then usermod -L "$USERNAME" log_message "User $USERNAME disabled due to suspicious activity" # 활성 세션 종료 pkill -u "$USERNAME" # 알림 발송 /usr/local/bin/send-alert.sh "User Disabled" "User $USERNAME has been disabled due to rule $RULE_ID" fi ;; "quarantine-file") # 파일 격리 if [ -n "$FILENAME" ] &amp;&amp; [ -f "$FILENAME" ]; then QUARANTINE_DIR="/var/ossec/quarantine/$(date +%Y%m%d)" mkdir -p "$QUARANTINE_DIR" # 파일 이동 mv "$FILENAME" "$QUARANTINE_DIR/" log_message "File $FILENAME quarantined to $QUARANTINE_DIR" # 알림 발송 /usr/local/bin/send-alert.sh "File Quarantined" "File $FILENAME has been quarantined due to rule $RULE_ID" fi ;; "restart-service") # 서비스 재시작 SERVICE=$(get_json_value "parameters.service") if [ -n "$SERVICE" ]; then systemctl restart "$SERVICE" log_message "Service $SERVICE restarted due to rule $RULE_ID" # 알림 발송 /usr/local/bin/send-alert.sh "Service Restarted" "Service $SERVICE has been restarted due to rule $RULE_ID" fi ;; "collect-evidence") # 증거 수집 EVIDENCE_DIR="/var/ossec/evidence/$(date +%Y%m%d-%H%M%S)-rule$RULE_ID" mkdir -p "$EVIDENCE_DIR" # 시스템 정보 수집 ps aux &gt; "$EVIDENCE_DIR/processes.txt" netstat -tlnp &gt; "$EVIDENCE_DIR/network.txt" ss -tlnp &gt; "$EVIDENCE_DIR/sockets.txt" last -n 50 &gt; "$EVIDENCE_DIR/logins.txt" # 로그 파일 복사 if [ -n "$SRCIP" ]; then grep "$SRCIP" /var/log/auth.log &gt; "$EVIDENCE_DIR/auth-logs.txt" 2&gt;/dev/null || true grep "$SRCIP" /var/log/apache2/access.log &gt; "$EVIDENCE_DIR/web-logs.txt" 2&gt;/dev/null || true fi # 메모리 덤프 (선택사항) if command -v memdump &gt;/dev/null 2&gt;&amp;1; then memdump &gt; "$EVIDENCE_DIR/memory.dump" 2&gt;/dev/null || true fi log_message "Evidence collected in $EVIDENCE_DIR" ;; *) log_message "Unknown action: $ACTION" ;; esac # 성공 상태 반환 exit 0 알림 시스템 구축 #!/bin/bash # /usr/local/bin/send-alert.sh # 다중 채널 알림 시스템 SUBJECT="$1" MESSAGE="$2" SEVERITY="${3:-medium}" # 설정 파일 로드 if [ -f /etc/wazuh/alert-config.conf ]; then source /etc/wazuh/alert-config.conf fi # 기본 설정 EMAIL_TO="${EMAIL_TO:-admin@example.com}" SLACK_WEBHOOK="${SLACK_WEBHOOK:-}" DISCORD_WEBHOOK="${DISCORD_WEBHOOK:-}" SMS_API_KEY="${SMS_API_KEY:-}" SMS_TO="${SMS_TO:-}" # 로그 함수 log_alert() { echo "$(date '+%Y-%m-%d %H:%M:%S') - [$SEVERITY] $SUBJECT: $MESSAGE" &gt;&gt; /var/log/wazuh-alerts.log } # 이메일 발송 send_email() { if command -v mail &gt;/dev/null 2&gt;&amp;1; then echo "$MESSAGE" | mail -s "Wazuh Alert: $SUBJECT" "$EMAIL_TO" echo "Email sent to $EMAIL_TO" fi } # Slack 알림 send_slack() { if [ -n "$SLACK_WEBHOOK" ]; then # 심각도에 따른 색상 case $SEVERITY in "high"|"critical") COLOR="danger" EMOJI="🚨" ;; "medium") COLOR="warning" EMOJI="⚠️" ;; *) COLOR="good" EMOJI="ℹ️" ;; esac PAYLOAD=$(cat &lt;&lt;EOF { "text": "$EMOJI Wazuh Security Alert", "attachments": [ { "color": "$COLOR", "fields": [ { "title": "Alert", "value": "$SUBJECT", "short": true }, { "title": "Severity", "value": "$SEVERITY", "short": true }, { "title": "Details", "value": "$MESSAGE", "short": false }, { "title": "Timestamp", "value": "$(date)", "short": true }, { "title": "Host", "value": "$(hostname)", "short": true } ] } ] } EOF ) curl -X POST -H 'Content-type: application/json' \ --data "$PAYLOAD" \ "$SLACK_WEBHOOK" &gt;/dev/null 2&gt;&amp;1 echo "Slack notification sent" fi } # Discord 알림 send_discord() { if [ -n "$DISCORD_WEBHOOK" ]; then PAYLOAD=$(cat &lt;&lt;EOF { "username": "Wazuh Security Bot", "embeds": [ { "title": "🛡️ Security Alert: $SUBJECT", "description": "$MESSAGE", "color": 15158332, "fields": [ { "name": "Severity", "value": "$SEVERITY", "inline": true }, { "name": "Host", "value": "$(hostname)", "inline": true }, { "name": "Timestamp", "value": "$(date)", "inline": false } ] } ] } EOF ) curl -H "Content-Type: application/json" \ -X POST \ -d "$PAYLOAD" \ "$DISCORD_WEBHOOK" &gt;/dev/null 2&gt;&amp;1 echo "Discord notification sent" fi } # SMS 발송 (Twilio API 예제) send_sms() { if [ -n "$SMS_API_KEY" ] &amp;&amp; [ -n "$SMS_TO" ] &amp;&amp; [ "$SEVERITY" = "critical" ]; then SMS_MESSAGE="Wazuh CRITICAL Alert: $SUBJECT on $(hostname)" curl -X POST https://api.twilio.com/2010-04-01/Accounts/$TWILIO_SID/Messages.json \ --data-urlencode "To=$SMS_TO" \ --data-urlencode "From=$TWILIO_FROM" \ --data-urlencode "Body=$SMS_MESSAGE" \ -u "$TWILIO_SID:$SMS_API_KEY" &gt;/dev/null 2&gt;&amp;1 echo "SMS notification sent" fi } # 메인 실행 main() { log_alert # 심각도에 따른 알림 채널 선택 case $SEVERITY in "critical") send_email send_slack send_discord send_sms ;; "high") send_email send_slack send_discord ;; "medium") send_slack ;; "low") log_alert # 로그만 기록 ;; esac } main Docker 컨테이너 보안 | Docker Container Security 🐳 Docker 보안 강화 포괄적인 Docker 보안 설정 #!/bin/bash # /usr/local/bin/docker-security-hardening.sh # Docker 보안 강화 스크립트 set -e print_status() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" } # Docker 데몬 보안 설정 configure_docker_daemon() { print_status "Configuring Docker daemon security..." # Docker 데몬 설정 파일 생성 mkdir -p /etc/docker cat &gt; /etc/docker/daemon.json &lt;&lt; 'EOF' { "icc": false, "userns-remap": "default", "live-restore": true, "userland-proxy": false, "no-new-privileges": true, "log-driver": "json-file", "log-opts": { "max-size": "10m", "max-file": "3" }, "storage-driver": "overlay2", "storage-opts": [ "overlay2.override_kernel_check=true" ], "default-ulimits": { "nofile": { "Hard": 64000, "Name": "nofile", "Soft": 64000 } }, "disable-legacy-registry": true, "experimental": false, "metrics-addr": "127.0.0.1:9323", "insecure-registries": [] } EOF # Docker 서비스 재시작 systemctl restart docker print_status "Docker daemon configured successfully" } # Docker 컨테이너 기본 보안 프로파일 create_security_profiles() { print_status "Creating security profiles..." # AppArmor 프로파일 생성 if command -v aa-status &gt;/dev/null 2&gt;&amp;1; then cat &gt; /etc/apparmor.d/docker-default-secure &lt;&lt; 'EOF' #include &lt;tunables/global&gt; profile docker-default-secure flags=(attach_disconnected,mediate_deleted) { #include &lt;abstractions/base&gt; # 네트워크 접근 제한 network inet tcp, network inet udp, network inet6 tcp, network inet6 udp, network netlink raw, # 파일 시스템 접근 제한 deny /etc/passwd r, deny /etc/shadow r, deny /etc/group r, deny /etc/gshadow r, deny /proc/sys/** w, deny /sys/** w, # 특권 상승 방지 deny capability sys_admin, deny capability sys_module, deny capability sys_rawio, deny capability sys_pacct, deny capability sys_nice, deny capability sys_resource, deny capability sys_time, deny capability sys_tty_config, deny capability mknod, deny capability audit_write, deny capability audit_control, deny capability mac_override, deny capability mac_admin, deny capability net_admin, deny capability syslog, deny capability wake_alarm, deny capability block_suspend, # 허용된 capability들 capability chown, capability dac_override, capability fowner, capability fsetid, capability kill, capability setgid, capability setuid, capability setpcap, capability linux_immutable, capability net_bind_service, capability net_broadcast, capability net_raw, capability ipc_lock, capability ipc_owner, capability sys_chroot, capability sys_ptrace, capability lease, capability audit_read, } EOF apparmor_parser -r /etc/apparmor.d/docker-default-secure fi # Seccomp 프로파일 생성 cat &gt; /etc/docker/seccomp-profile.json &lt;&lt; 'EOF' { "defaultAction": "SCMP_ACT_ERRNO", "archMap": [ { "architecture": "SCMP_ARCH_X86_64", "subArchitectures": [ "SCMP_ARCH_X86", "SCMP_ARCH_X32" ] } ], "syscalls": [ { "names": [ "accept", "accept4", "access", "adjtimex", "alarm", "bind", "brk", "chdir", "chmod", "chown", "chroot", "clock_getres", "clock_gettime", "clone", "close", "connect", "dup", "dup2", "dup3", "epoll_create", "epoll_create1", "epoll_ctl", "epoll_wait", "eventfd", "eventfd2", "execve", "exit", "exit_group", "fcntl", "fstat", "futex", "getcwd", "getdents", "getdents64", "getegid", "geteuid", "getgid", "getgroups", "getpeername", "getpgrp", "getpid", "getppid", "getrlimit", "getsid", "getsockname", "getsockopt", "gettid", "gettimeofday", "getuid", "listen", "lseek", "lstat", "madvise", "mmap", "mprotect", "munmap", "nanosleep", "open", "openat", "pause", "pipe", "pipe2", "poll", "ppoll", "prctl", "read", "recv", "recvfrom", "recvmsg", "rt_sigaction", "rt_sigprocmask", "rt_sigreturn", "sched_getaffinity", "sched_yield", "select", "send", "sendmsg", "sendto", "setgid", "setgroups", "setrlimit", "setsid", "setsockopt", "setuid", "shutdown", "sigaltstack", "socket", "socketpair", "stat", "statfs", "sysinfo", "time", "uname", "unlink", "unlinkat", "wait4", "waitpid", "write" ], "action": "SCMP_ACT_ALLOW" } ] } EOF print_status "Security profiles created successfully" } # Docker 이미지 보안 스캐너 설치 install_image_scanner() { print_status "Installing Docker image security scanner..." # Trivy 설치 if ! command -v trivy &gt;/dev/null 2&gt;&amp;1; then case $(uname -m) in x86_64) ARCH="64bit" ;; aarch64) ARCH="ARM64" ;; *) print_status "Unsupported architecture for Trivy" return 1 ;; esac VERSION=$(curl -s "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/') wget -q "https://github.com/aquasecurity/trivy/releases/download/${VERSION}/trivy_${VERSION#v}_Linux-${ARCH}.tar.gz" tar -xzf "trivy_${VERSION#v}_Linux-${ARCH}.tar.gz" mv trivy /usr/local/bin/ rm -f "trivy_${VERSION#v}_Linux-${ARCH}.tar.gz" fi print_status "Trivy installed successfully" } # Docker 컴포즈 보안 템플릿 create_secure_compose_template() { print_status "Creating secure Docker Compose template..." cat &gt; /usr/local/share/docker-compose-secure-template.yml &lt;&lt; 'EOF' version: '3.8' # 보안 강화된 Docker Compose 템플릿 services: app: image: your-app:latest # 보안 설정 read_only: true # 루트 파일시스템 읽기 전용 cap_drop: # 모든 capabilities 제거 - ALL cap_add: # 필요한 capabilities만 추가 - NET_BIND_SERVICE # 리소스 제한 mem_limit: 512m memswap_limit: 512m cpu_count: 1 pids_limit: 100 # 네트워크 보안 networks: - app-network ports: - "8080:8080" # 환경 변수 (secrets 사용 권장) environment: - NODE_ENV=production # 볼륨 마운트 (최소한으로) volumes: - app-data:/app/data - /tmp:/tmp:rw,noexec,nosuid,nodev # 보안 옵션 security_opt: - no-new-privileges:true - apparmor:docker-default-secure - seccomp:/etc/docker/seccomp-profile.json # 재시작 정책 restart: unless-stopped # 헬스체크 healthcheck: test: ["CMD", "curl", "-f", "http://localhost:8080/health"] interval: 30s timeout: 10s retries: 3 start_period: 60s # 로그 설정 logging: driver: "json-file" options: max-size: "10m" max-file: "3" # 데이터베이스 서비스 예제 database: image: postgres:13-alpine # 보안 설정 read_only: true cap_drop: - ALL cap_add: - SETUID - SETGID - DAC_OVERRIDE # 리소스 제한 mem_limit: 1g memswap_limit: 1g # 환경 변수 environment: POSTGRES_DB_FILE: /run/secrets/postgres_db POSTGRES_USER_FILE: /run/secrets/postgres_user POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password # Secrets 사용 secrets: - postgres_db - postgres_user - postgres_password # 볼륨 설정 volumes: - postgres-data:/var/lib/postgresql/data - /tmp:/tmp:rw,noexec,nosuid,nodev # 네트워크 networks: - db-network # 보안 옵션 security_opt: - no-new-privileges:true # 헬스체크 healthcheck: test: ["CMD-SHELL", "pg_isready -U postgres"] interval: 30s timeout: 10s retries: 5 # 네트워크 정의 networks: app-network: driver: bridge ipam: config: - subnet: 172.20.0.0/16 db-network: driver: bridge internal: true # 외부 접근 차단 # 볼륨 정의 volumes: app-data: driver: local postgres-data: driver: local # Secrets 정의 secrets: postgres_db: file: ./secrets/postgres_db.txt postgres_user: file: ./secrets/postgres_user.txt postgres_password: file: ./secrets/postgres_password.txt EOF print_status "Secure Docker Compose template created" } # Docker 보안 스캔 스크립트 create_security_scanner() { print_status "Creating Docker security scanner..." cat &gt; /usr/local/bin/docker-security-scan.sh &lt;&lt; 'EOF' #!/bin/bash # Docker 보안 스캔 스크립트 IMAGE=$1 REPORT_DIR="/var/log/docker-security-scans" TIMESTAMP=$(date +%Y%m%d-%H%M%S) if [ -z "$IMAGE" ]; then echo "Usage: $0 &lt;image-name&gt;" exit 1 fi mkdir -p "$REPORT_DIR" echo "Starting security scan for image: $IMAGE" # Trivy 취약점 스캔 echo "Running Trivy vulnerability scan..." trivy image --format json --output "$REPORT_DIR/trivy-$TIMESTAMP.json" "$IMAGE" trivy image --format table "$IMAGE" | tee "$REPORT_DIR/trivy-$TIMESTAMP.txt" # Docker Bench 보안 스캔 (설치된 경우) if command -v docker-bench-security &gt;/dev/null 2&gt;&amp;1; then echo "Running Docker Bench security check..." docker-bench-security &gt; "$REPORT_DIR/docker-bench-$TIMESTAMP.txt" fi # 이미지 히스토리 분석 echo "Analyzing image history..." docker history --no-trunc "$IMAGE" &gt; "$REPORT_DIR/history-$TIMESTAMP.txt" # 이미지 구성 확인 echo "Checking image configuration..." docker inspect "$IMAGE" &gt; "$REPORT_DIR/inspect-$TIMESTAMP.json" # 보안 권고사항 체크 echo "Checking security best practices..." { echo "=== Security Check Results ===" echo "Image: $IMAGE" echo "Scan Date: $(date)" echo "" # 루트 사용자 체크 if docker inspect "$IMAGE" | grep -q '"User": ""'; then echo "❌ FAIL: Image runs as root user" else echo "✅ PASS: Image does not run as root" fi # 불필요한 패키지 체크 echo "" echo "=== Package Analysis ===" docker run --rm "$IMAGE" sh -c 'which wget curl nc netcat' 2&gt;/dev/null | while read tool; do if [ -n "$tool" ]; then echo "⚠️ WARNING: Found potentially dangerous tool: $tool" fi done } &gt; "$REPORT_DIR/security-check-$TIMESTAMP.txt" echo "Security scan completed. Reports saved in: $REPORT_DIR" EOF chmod +x /usr/local/bin/docker-security-scan.sh print_status "Docker security scanner created" } # 메인 실행 main() { print_status "Starting Docker security hardening..." configure_docker_daemon create_security_profiles install_image_scanner create_secure_compose_template create_security_scanner print_status "Docker security hardening completed successfully!" echo "" echo "Next steps:" echo "1. Review Docker daemon configuration in /etc/docker/daemon.json" echo "2. Use secure Docker Compose template: /usr/local/share/docker-compose-secure-template.yml" echo "3. Scan images with: /usr/local/bin/docker-security-scan.sh &lt;image-name&gt;" echo "4. Apply security profiles to containers" } main "$@" 다음 편 예고 다음 포스트에서는 Kubernetes 보안과 컴플라이언스를 상세히 다룰 예정입니다: Kubernetes 클러스터 보안 강화 Pod Security Standards 및 정책 Network Policy와 Service Mesh 보안 컴플라이언스 자동화 및 감사 Wazuh SIEM과 Docker 보안으로 엔터프라이즈급 보안 인프라를 완성하셨나요? 🔍🐳🛡️]]></summary></entry><entry><title type="html">리눅스 보안 완전 가이드 4편 - 침입 탐지와 실시간 모니터링 | Linux Security Guide Part 4 - Intrusion Detection &amp;amp; Real-time Monitoring</title><link href="https://leeyonghe.github.io/infra-blog/blog/2025/04/12/linux-security-guide-part4.html" rel="alternate" type="text/html" title="리눅스 보안 완전 가이드 4편 - 침입 탐지와 실시간 모니터링 | Linux Security Guide Part 4 - Intrusion Detection &amp;amp; Real-time Monitoring" /><published>2025-04-12T00:00:00+00:00</published><updated>2025-04-12T00:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2025/04/12/linux-security-guide-part4</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2025/04/12/linux-security-guide-part4.html"><![CDATA[<p>리눅스 시스템의 완벽한 보안을 위한 마지막 퍼즐 조각인 침입 탐지와 실시간 모니터링을 완전히 마스터해보겠습니다. AIDE부터 Wazuh SIEM까지, 모든 위협을 실시간으로 탐지하고 대응하는 최고급 보안 시스템을 구축합니다.</p>

<h2 id="aide-파일-무결성-모니터링--aide-file-integrity-monitoring">AIDE 파일 무결성 모니터링 | AIDE File Integrity Monitoring</h2>

<h3 id="-aide-완전-설정-및-운영">🔍 AIDE 완전 설정 및 운영</h3>

<h4 id="aide-설치-및-기본-설정">AIDE 설치 및 기본 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># AIDE 설치</span>
<span class="c"># CentOS/RHEL</span>
yum <span class="nb">install </span>aide
<span class="c"># Ubuntu/Debian  </span>
apt-get <span class="nb">install </span>aide aide-common

<span class="c"># 초기 데이터베이스 생성</span>
aide <span class="nt">--init</span>
<span class="nb">mv</span> /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz

<span class="c"># 기본 무결성 검사 실행</span>
aide <span class="nt">--check</span>

<span class="c"># 설정 파일 위치</span>
<span class="c"># CentOS/RHEL: /etc/aide.conf</span>
<span class="c"># Ubuntu/Debian: /etc/aide/aide.conf</span>
</code></pre></div></div>

<h4 id="고급-aide-설정-파일-작성">고급 AIDE 설정 파일 작성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/aide/aide.conf (Ubuntu) 또는 /etc/aide.conf (CentOS)</span>
<span class="c"># 종합적인 AIDE 설정</span>

<span class="c"># 데이터베이스 경로</span>
<span class="nv">database</span><span class="o">=</span>file:/var/lib/aide/aide.db.gz
<span class="nv">database_out</span><span class="o">=</span>file:/var/lib/aide/aide.db.new.gz

<span class="c"># 로그 설정</span>
<span class="nv">verbose</span><span class="o">=</span>5
<span class="nv">report_url</span><span class="o">=</span>file:/var/log/aide/aide.log
<span class="nv">report_url</span><span class="o">=</span>stdout

<span class="c"># 검사 규칙 정의</span>
<span class="c"># R = p+i+n+u+g+s+m+c+md5</span>
<span class="c"># L = p+i+n+u+g</span>
<span class="c"># E = 빈 그룹 (존재만 확인)</span>
<span class="c"># &gt; = 로그 파일 (크기 증가만 허용)</span>
<span class="c"># X = 제외</span>

<span class="c"># 기본 규칙들</span>
Binlib <span class="o">=</span> p+i+n+u+g+s+b+m+c+md5+sha1+sha256+sha512
ConfFiles <span class="o">=</span> p+i+n+u+g+s+m+c+md5+sha1+sha256
LogFiles <span class="o">=</span> p+u+g+i+n+S
DatabaseFiles <span class="o">=</span> p+i+n+u+g+s+m+c+md5+sha1+sha256
StaticFiles <span class="o">=</span> p+i+n+u+g+s+m+c+md5+sha1+sha256+acl+selinux+xattrs
DeviceFiles <span class="o">=</span> p+i+n+u+g+s+b+c+md5+sha1

<span class="c"># 고급 규칙들</span>
CriticalFiles <span class="o">=</span> p+i+n+u+g+s+m+c+md5+sha1+sha256+sha512+acl+selinux+xattrs
WebFiles <span class="o">=</span> p+i+n+u+g+s+m+c+md5+sha1+sha256
TempFiles <span class="o">=</span> n+u+g+i
UserFiles <span class="o">=</span> p+i+n+u+g+s+m+c+md5+sha1

<span class="c"># 시스템 중요 디렉토리</span>
/boot                   CriticalFiles
/bin                    Binlib
/sbin                   Binlib
/usr/bin                Binlib
/usr/sbin               Binlib
/usr/local/bin          Binlib
/usr/local/sbin         Binlib
/lib                    Binlib
/lib64                  Binlib
/usr/lib                Binlib
/usr/lib64              Binlib

<span class="c"># 설정 파일들</span>
/etc                    ConfFiles
<span class="o">!</span>/etc/mtab
<span class="o">!</span>/etc/.<span class="k">*</span>~
<span class="o">!</span>/etc/<span class="se">\.</span>.<span class="k">*</span>
<span class="o">!</span>/etc/passwd-
<span class="o">!</span>/etc/shadow-
<span class="o">!</span>/etc/group-
<span class="o">!</span>/etc/gshadow-
<span class="o">!</span>/etc/security/opasswd
<span class="o">!</span>/etc/mail/statistics
<span class="o">!</span>/etc/prelink<span class="se">\.</span>cache
<span class="o">!</span>/etc/crontab
<span class="o">!</span>/etc/cron<span class="se">\.</span>d
<span class="o">!</span>/etc/cron<span class="se">\.</span>daily
<span class="o">!</span>/etc/cron<span class="se">\.</span>hourly
<span class="o">!</span>/etc/cron<span class="se">\.</span>monthly
<span class="o">!</span>/etc/cron<span class="se">\.</span>weekly

<span class="c"># 시스템 특수 파일들</span>
/etc/passwd             CriticalFiles
/etc/shadow             CriticalFiles
/etc/group              CriticalFiles
/etc/gshadow            CriticalFiles
/etc/sudoers            CriticalFiles
/etc/ssh/sshd_config    CriticalFiles
/etc/hosts              CriticalFiles
/etc/hosts.allow        CriticalFiles
/etc/hosts.deny         CriticalFiles

<span class="c"># 웹 서버 파일들 (해당하는 경우)</span>
/var/www                WebFiles
<span class="o">!</span>/var/www/html/.<span class="k">*</span><span class="se">\.</span>log<span class="err">$</span>
<span class="o">!</span>/var/www/.<span class="k">*</span>cache.<span class="k">*</span>

<span class="c"># 로그 디렉토리 (증가만 허용)</span>
/var/log                LogFiles
<span class="o">!</span>/var/log/.<span class="k">*</span><span class="se">\.</span><span class="o">[</span>0-9]+<span class="se">\.</span>gz
<span class="o">!</span>/var/log/.<span class="k">*</span><span class="se">\.</span>old
<span class="o">!</span>/var/log/.<span class="k">*</span><span class="se">\.</span>log<span class="se">\.</span><span class="o">[</span>0-9]+
<span class="o">!</span>/var/log/lastlog
<span class="o">!</span>/var/log/wtmp
<span class="o">!</span>/var/log/btmp
<span class="o">!</span>/var/log/utmp

<span class="c"># 사용자 홈 디렉토리 (중요 파일만)</span>
/home                   UserFiles
<span class="o">!</span>/home/[^/]+/<span class="se">\.</span>bash_history
<span class="o">!</span>/home/[^/]+/<span class="se">\.</span>viminfo
<span class="o">!</span>/home/[^/]+/<span class="se">\.</span>cache
<span class="o">!</span>/home/[^/]+/<span class="se">\.</span><span class="nb">local</span>
<span class="o">!</span>/home/[^/]+/<span class="se">\.</span>mozilla
<span class="o">!</span>/home/[^/]+/<span class="se">\.</span>gnome
<span class="o">!</span>/home/[^/]+/<span class="se">\.</span>config

<span class="c"># 특별 관심 파일들</span>
/root                   CriticalFiles
<span class="o">!</span>/root/<span class="se">\.</span>bash_history
<span class="o">!</span>/root/<span class="se">\.</span>viminfo

<span class="c"># 데이터베이스 파일들</span>
/var/lib/mysql          DatabaseFiles
/var/lib/postgresql     DatabaseFiles

<span class="c"># 임시 디렉토리 (존재만 확인)</span>
/tmp                    TempFiles
/var/tmp                TempFiles

<span class="c"># 제외할 디렉토리들</span>
<span class="o">!</span>/proc
<span class="o">!</span>/sys
<span class="o">!</span>/dev
<span class="o">!</span>/run
<span class="o">!</span>/var/run
<span class="o">!</span>/var/lock
<span class="o">!</span>/var/cache
<span class="o">!</span>/var/spool
<span class="o">!</span>/media
<span class="o">!</span>/mnt
<span class="o">!</span>/tmp/.<span class="k">*</span>
<span class="o">!</span>/var/tmp/.<span class="k">*</span>
<span class="o">!</span>/lost<span class="se">\+</span>found

<span class="c"># 고급 제외 규칙들</span>
<span class="o">!</span>/<span class="se">\.</span>journal
<span class="o">!</span>/<span class="se">\.</span>updated
<span class="o">!</span>/var/lib/dhcp/dhcpd<span class="se">\.</span>leases.<span class="k">*</span>
<span class="o">!</span>/var/lib/logrotate<span class="se">\.</span>status
<span class="o">!</span>/var/lib/random-seed
<span class="o">!</span>/var/lib/systemd
<span class="o">!</span>/var/lib/dbus
</code></pre></div></div>

<h4 id="aide-자동화-및-모니터링-스크립트">AIDE 자동화 및 모니터링 스크립트</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/aide-monitor.sh</span>
<span class="c"># AIDE 자동 모니터링 및 알림 시스템</span>

<span class="nv">AIDE_CONFIG</span><span class="o">=</span><span class="s2">"/etc/aide/aide.conf"</span>
<span class="nv">AIDE_DB</span><span class="o">=</span><span class="s2">"/var/lib/aide/aide.db.gz"</span>
<span class="nv">AIDE_NEW_DB</span><span class="o">=</span><span class="s2">"/var/lib/aide/aide.db.new.gz"</span>
<span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">"/var/log/aide/aide-monitor.log"</span>
<span class="nv">ALERT_LOG</span><span class="o">=</span><span class="s2">"/var/log/aide/aide-alerts.log"</span>
<span class="nv">EMAIL_TO</span><span class="o">=</span><span class="s2">"admin@example.com"</span>
<span class="nv">LOCKFILE</span><span class="o">=</span><span class="s2">"/var/run/aide-monitor.lock"</span>

<span class="c"># 함수 정의</span>
log_message<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2"> - </span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tee</span> <span class="nt">-a</span> <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span>
<span class="o">}</span>

send_alert<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">subject</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
    <span class="nb">local </span><span class="nv">message</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
    
    <span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2"> - ALERT: </span><span class="nv">$subject</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$ALERT_LOG</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$message</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$ALERT_LOG</span><span class="s2">"</span>
    
    <span class="c"># 이메일 발송 (sendmail 또는 mail 명령 사용)</span>
    <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> mail <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$message</span><span class="s2">"</span> | mail <span class="nt">-s</span> <span class="s2">"AIDE Alert: </span><span class="nv">$subject</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$EMAIL_TO</span><span class="s2">"</span>
    <span class="k">fi</span>
    
    <span class="c"># Slack 웹훅 (설정된 경우)</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$SLACK_WEBHOOK</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>curl <span class="nt">-X</span> POST <span class="nt">-H</span> <span class="s1">'Content-type: application/json'</span> <span class="se">\</span>
             <span class="nt">--data</span> <span class="s2">"{</span><span class="se">\"</span><span class="s2">text</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">🚨 AIDE Alert: </span><span class="nv">$subject</span><span class="se">\n</span><span class="nv">$message</span><span class="se">\"</span><span class="s2">}"</span> <span class="se">\</span>
             <span class="s2">"</span><span class="nv">$SLACK_WEBHOOK</span><span class="s2">"</span>
    <span class="k">fi</span>
    
    <span class="c"># syslog에도 기록</span>
    logger <span class="nt">-p</span> local0.alert <span class="s2">"AIDE Alert: </span><span class="nv">$subject</span><span class="s2">"</span>
<span class="o">}</span>

check_prerequisites<span class="o">()</span> <span class="o">{</span>
    <span class="c"># AIDE 설치 확인</span>
    <span class="k">if</span> <span class="o">!</span> <span class="nb">command</span> <span class="nt">-v</span> aide <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"ERROR: AIDE is not installed"</span>
        <span class="nb">exit </span>1
    <span class="k">fi</span>
    
    <span class="c"># 데이터베이스 존재 확인</span>
    <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$AIDE_DB</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"ERROR: AIDE database not found at </span><span class="nv">$AIDE_DB</span><span class="s2">"</span>
        log_message <span class="s2">"Run: aide --init &amp;&amp; mv </span><span class="nv">$AIDE_NEW_DB</span><span class="s2"> </span><span class="nv">$AIDE_DB</span><span class="s2">"</span>
        <span class="nb">exit </span>1
    <span class="k">fi</span>
    
    <span class="c"># 로그 디렉토리 생성</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$ALERT_LOG</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 락 파일 확인 (중복 실행 방지)</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$LOCKFILE</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">PID</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="nv">$LOCKFILE</span><span class="s2">"</span><span class="si">)</span>
    <span class="k">if </span>ps <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$PID</span><span class="s2">"</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"Another instance is running (PID: </span><span class="nv">$PID</span><span class="s2">)"</span>
        <span class="nb">exit </span>1
    <span class="k">else
        </span><span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$LOCKFILE</span><span class="s2">"</span>
    <span class="k">fi
fi</span>

<span class="c"># 락 파일 생성</span>
<span class="nb">echo</span> <span class="nv">$$</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$LOCKFILE</span><span class="s2">"</span>
<span class="nb">trap</span> <span class="s2">"rm -f </span><span class="nv">$LOCKFILE</span><span class="s2">"</span> EXIT

<span class="c"># 액션 파라미터</span>
<span class="nv">ACTION</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">check</span><span class="k">}</span>

<span class="k">case</span> <span class="nv">$ACTION</span> <span class="k">in</span>
    <span class="s2">"init"</span><span class="p">)</span>
        log_message <span class="s2">"Initializing AIDE database..."</span>
        check_prerequisites
        
        aide <span class="nt">--init</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">mv</span> <span class="s2">"</span><span class="nv">$AIDE_NEW_DB</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$AIDE_DB</span><span class="s2">"</span>
            log_message <span class="s2">"AIDE database initialized successfully"</span>
        <span class="k">else
            </span>log_message <span class="s2">"ERROR: AIDE database initialization failed"</span>
            <span class="nb">exit </span>1
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"check"</span><span class="p">)</span>
        log_message <span class="s2">"Starting AIDE integrity check..."</span>
        check_prerequisites
        
        <span class="c"># 임시 파일에 결과 저장</span>
        <span class="nv">TEMP_RESULT</span><span class="o">=</span><span class="s2">"/tmp/aide-result-</span><span class="nv">$$</span><span class="s2">"</span>
        
        <span class="c"># AIDE 실행</span>
        aide <span class="nt">--check</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$TEMP_RESULT</span><span class="s2">"</span> 2&gt;&amp;1
        <span class="nv">AIDE_EXIT_CODE</span><span class="o">=</span><span class="nv">$?</span>
        
        <span class="k">case</span> <span class="nv">$AIDE_EXIT_CODE</span> <span class="k">in
            </span>0<span class="p">)</span>
                log_message <span class="s2">"AIDE check completed - No changes detected"</span>
                <span class="p">;;</span>
            1<span class="p">)</span>
                log_message <span class="s2">"WARNING: AIDE detected file changes"</span>
                
                <span class="c"># 변경 사항 분석</span>
                <span class="nv">CHANGES</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"(added|removed|changed)"</span> <span class="s2">"</span><span class="nv">$TEMP_RESULT</span><span class="s2">"</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>
                
                <span class="c"># 상세 변경 내역</span>
                <span class="nv">CHANGE_DETAILS</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-A</span> 5 <span class="nt">-B</span> 5 <span class="nt">-E</span> <span class="s2">"(added|removed|changed)"</span> <span class="s2">"</span><span class="nv">$TEMP_RESULT</span><span class="s2">"</span><span class="si">)</span>
                
                <span class="c"># 알림 발송</span>
                <span class="nv">ALERT_MESSAGE</span><span class="o">=</span><span class="s2">"AIDE detected </span><span class="nv">$CHANGES</span><span class="s2"> file system changes:

</span><span class="nv">$CHANGE_DETAILS</span><span class="s2">

Full report saved to: </span><span class="nv">$LOG_FILE</span><span class="s2">
Time: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">
Hostname: </span><span class="si">$(</span><span class="nb">hostname</span><span class="si">)</span><span class="s2">"</span>
                
                send_alert <span class="s2">"File System Changes Detected"</span> <span class="s2">"</span><span class="nv">$ALERT_MESSAGE</span><span class="s2">"</span>
                
                <span class="c"># 전체 결과를 로그에 저장</span>
                <span class="nb">cat</span> <span class="s2">"</span><span class="nv">$TEMP_RESULT</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span>
                <span class="p">;;</span>
            2|3|4|5|6|7|14|15|16|17<span class="p">)</span>
                log_message <span class="s2">"ERROR: AIDE check failed with exit code </span><span class="nv">$AIDE_EXIT_CODE</span><span class="s2">"</span>
                send_alert <span class="s2">"AIDE Check Failed"</span> <span class="s2">"AIDE integrity check failed with exit code: </span><span class="nv">$AIDE_EXIT_CODE</span><span class="s2">"</span>
                <span class="p">;;</span>
        <span class="k">esac</span>
        
        <span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$TEMP_RESULT</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"update"</span><span class="p">)</span>
        log_message <span class="s2">"Updating AIDE database..."</span>
        check_prerequisites
        
        <span class="c"># 백업 생성</span>
        <span class="nv">BACKUP_DB</span><span class="o">=</span><span class="s2">"/var/lib/aide/aide.db.backup.</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span><span class="s2">.gz"</span>
        <span class="nb">cp</span> <span class="s2">"</span><span class="nv">$AIDE_DB</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$BACKUP_DB</span><span class="s2">"</span>
        log_message <span class="s2">"Database backed up to </span><span class="nv">$BACKUP_DB</span><span class="s2">"</span>
        
        <span class="c"># 새 데이터베이스 생성</span>
        aide <span class="nt">--init</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">mv</span> <span class="s2">"</span><span class="nv">$AIDE_NEW_DB</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$AIDE_DB</span><span class="s2">"</span>
            log_message <span class="s2">"AIDE database updated successfully"</span>
        <span class="k">else
            </span>log_message <span class="s2">"ERROR: AIDE database update failed"</span>
            <span class="nb">exit </span>1
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"config-test"</span><span class="p">)</span>
        log_message <span class="s2">"Testing AIDE configuration..."</span>
        aide <span class="nt">--config-check</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_message <span class="s2">"AIDE configuration is valid"</span>
        <span class="k">else
            </span>log_message <span class="s2">"ERROR: AIDE configuration has errors"</span>
            <span class="nb">exit </span>1
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"stats"</span><span class="p">)</span>
        log_message <span class="s2">"AIDE Statistics:"</span>
        <span class="nb">echo</span> <span class="s2">"Database size: </span><span class="si">$(</span><span class="nb">du</span> <span class="nt">-h</span> <span class="nv">$AIDE_DB</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">echo</span> <span class="s1">'N/A'</span><span class="si">)</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"Database date: </span><span class="si">$(</span><span class="nb">stat</span> <span class="nt">-c</span> %y <span class="nv">$AIDE_DB</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">echo</span> <span class="s1">'N/A'</span><span class="si">)</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"Config file: </span><span class="nv">$AIDE_CONFIG</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"Log file: </span><span class="nv">$LOG_FILE</span><span class="s2">"</span>
        
        <span class="c"># 최근 체크 이력</span>
        <span class="nb">echo</span> <span class="s2">"Recent checks:"</span>
        <span class="nb">tail</span> <span class="nt">-n</span> 10 <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"No recent checks found"</span>
        <span class="p">;;</span>
        
    <span class="s2">"report"</span><span class="p">)</span>
        <span class="nv">DAYS</span><span class="o">=</span><span class="k">${</span><span class="nv">2</span><span class="k">:-</span><span class="nv">7</span><span class="k">}</span>
        log_message <span class="s2">"Generating AIDE report for last </span><span class="nv">$DAYS</span><span class="s2"> days..."</span>
        
        <span class="nb">echo</span> <span class="s2">"=== AIDE Activity Report (Last </span><span class="nv">$DAYS</span><span class="s2"> days) ==="</span>
        <span class="nb">echo</span> <span class="s2">"Generated: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        
        <span class="c"># 최근 체크 결과</span>
        <span class="nb">echo</span> <span class="s2">"Recent integrity checks:"</span>
        <span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"AIDE check completed|AIDE detected|ERROR:"</span> <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span> 2&gt;/dev/null | <span class="se">\</span>
        <span class="nb">awk</span> <span class="nt">-v</span> <span class="nv">days</span><span class="o">=</span><span class="s2">"</span><span class="nv">$DAYS</span><span class="s2">"</span> <span class="s1">'
        BEGIN {
            cutoff = systime() - (days * 24 * 60 * 60)
        }
        {
            # 날짜 파싱 (간단한 방법)
            print $0
        }'</span> | <span class="nb">tail</span> <span class="nt">-n</span> 20
        
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Alert summary:"</span>
        <span class="nb">grep</span> <span class="s2">"ALERT:"</span> <span class="s2">"</span><span class="nv">$ALERT_LOG</span><span class="s2">"</span> 2&gt;/dev/null | <span class="nb">tail</span> <span class="nt">-n</span> 10 <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"No alerts in period"</span>
        <span class="p">;;</span>
        
    <span class="k">*</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> {init|check|update|config-test|stats|report} [days]"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Actions:"</span>
        <span class="nb">echo</span> <span class="s2">"  init        - Initialize AIDE database"</span>
        <span class="nb">echo</span> <span class="s2">"  check       - Perform integrity check"</span>
        <span class="nb">echo</span> <span class="s2">"  update      - Update AIDE database"</span>
        <span class="nb">echo</span> <span class="s2">"  config-test - Test configuration"</span>
        <span class="nb">echo</span> <span class="s2">"  stats       - Show statistics"</span>
        <span class="nb">echo</span> <span class="s2">"  report      - Generate activity report"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Examples:"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> check              # Perform integrity check"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> report 30          # Generate 30-day report"</span>
        <span class="nb">exit </span>1
        <span class="p">;;</span>
<span class="k">esac</span>

log_message <span class="s2">"AIDE monitor completed successfully"</span>
</code></pre></div></div>

<h4 id="aide-자동화-크론잡-설정">AIDE 자동화 크론잡 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/cron.d/aide-monitoring</span>
<span class="c"># AIDE 자동 모니터링 크론 설정</span>

<span class="c"># 매일 02:00에 무결성 검사 실행</span>
0 2 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> root /usr/local/bin/aide-monitor.sh check

<span class="c"># 매주 일요일 03:00에 주간 리포트 생성</span>
0 3 <span class="k">*</span> <span class="k">*</span> 0 root /usr/local/bin/aide-monitor.sh report 7

<span class="c"># 매월 1일 04:00에 월간 리포트 생성</span>
0 4 1 <span class="k">*</span> <span class="k">*</span> root /usr/local/bin/aide-monitor.sh report 30

<span class="c"># logrotate 설정</span>
<span class="c"># /etc/logrotate.d/aide</span>
/var/log/aide/<span class="k">*</span>.log <span class="o">{</span>
    daily
    missingok
    rotate 365
    compress
    delaycompress
    notifempty
    create 644 root root
    postrotate
        <span class="c"># AIDE 로그 순환 후 처리 (필요시)</span>
    endscript
<span class="o">}</span>
</code></pre></div></div>

<h2 id="fail2ban-고급-설정--advanced-fail2ban-configuration">Fail2Ban 고급 설정 | Advanced Fail2Ban Configuration</h2>

<h3 id="-포괄적인-침입-차단-시스템">🚫 포괄적인 침입 차단 시스템</h3>

<h4 id="fail2ban-고급-메인-설정">Fail2Ban 고급 메인 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/fail2ban/jail.local</span>
<span class="c"># 종합적인 Fail2Ban 설정</span>

<span class="o">[</span>DEFAULT]
<span class="c"># 기본 설정</span>
ignorelist <span class="o">=</span> 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8
bantime <span class="o">=</span> 3600
findtime <span class="o">=</span> 600
maxretry <span class="o">=</span> 3
backend <span class="o">=</span> auto

<span class="c"># 백엔드 우선순위: systemd &gt; pyinotify &gt; gamin &gt; polling</span>
backend <span class="o">=</span> systemd

<span class="c"># 액션 설정</span>
banaction <span class="o">=</span> iptables-multiport
banaction_allports <span class="o">=</span> iptables-allports
action_ <span class="o">=</span> %<span class="o">(</span>banaction<span class="o">)</span>s[name<span class="o">=</span>%<span class="o">(</span>__name__<span class="o">)</span>s, <span class="nv">bantime</span><span class="o">=</span><span class="s2">"%(bantime)s"</span>, <span class="nv">port</span><span class="o">=</span><span class="s2">"%(port)s"</span>, <span class="nv">protocol</span><span class="o">=</span><span class="s2">"%(protocol)s"</span>, <span class="nv">chain</span><span class="o">=</span><span class="s2">"%(chain)s"</span><span class="o">]</span>

<span class="c"># 이메일 액션</span>
action_mw <span class="o">=</span> %<span class="o">(</span>banaction<span class="o">)</span>s[name<span class="o">=</span>%<span class="o">(</span>__name__<span class="o">)</span>s, <span class="nv">bantime</span><span class="o">=</span><span class="s2">"%(bantime)s"</span>, <span class="nv">port</span><span class="o">=</span><span class="s2">"%(port)s"</span>, <span class="nv">protocol</span><span class="o">=</span><span class="s2">"%(protocol)s"</span>, <span class="nv">chain</span><span class="o">=</span><span class="s2">"%(chain)s"</span><span class="o">]</span>
           %<span class="o">(</span>mta<span class="o">)</span>s-whois[name<span class="o">=</span>%<span class="o">(</span>__name__<span class="o">)</span>s, <span class="nv">sender</span><span class="o">=</span><span class="s2">"%(sender)s"</span>, <span class="nv">dest</span><span class="o">=</span><span class="s2">"%(destemail)s"</span>, <span class="nv">protocol</span><span class="o">=</span><span class="s2">"%(protocol)s"</span>, <span class="nv">chain</span><span class="o">=</span><span class="s2">"%(chain)s"</span><span class="o">]</span>

<span class="c"># 이메일 + 로그 액션  </span>
action_mwl <span class="o">=</span> %<span class="o">(</span>banaction<span class="o">)</span>s[name<span class="o">=</span>%<span class="o">(</span>__name__<span class="o">)</span>s, <span class="nv">bantime</span><span class="o">=</span><span class="s2">"%(bantime)s"</span>, <span class="nv">port</span><span class="o">=</span><span class="s2">"%(port)s"</span>, <span class="nv">protocol</span><span class="o">=</span><span class="s2">"%(protocol)s"</span>, <span class="nv">chain</span><span class="o">=</span><span class="s2">"%(chain)s"</span><span class="o">]</span>
            %<span class="o">(</span>mta<span class="o">)</span>s-whois-lines[name<span class="o">=</span>%<span class="o">(</span>__name__<span class="o">)</span>s, <span class="nv">sender</span><span class="o">=</span><span class="s2">"%(sender)s"</span>, <span class="nv">dest</span><span class="o">=</span><span class="s2">"%(destemail)s"</span>, <span class="nv">logpath</span><span class="o">=</span><span class="s2">"%(logpath)s"</span>, <span class="nv">chain</span><span class="o">=</span><span class="s2">"%(chain)s"</span><span class="o">]</span>

<span class="c"># 기본 액션</span>
action <span class="o">=</span> %<span class="o">(</span>action_mwl<span class="o">)</span>s

<span class="c"># 이메일 설정</span>
destemail <span class="o">=</span> admin@example.com
sender <span class="o">=</span> fail2ban@example.com
mta <span class="o">=</span> sendmail

<span class="c"># 로그 레벨</span>
loglevel <span class="o">=</span> INFO
logtarget <span class="o">=</span> /var/log/fail2ban.log

<span class="c"># 소켓 설정</span>
socket <span class="o">=</span> /var/run/fail2ban/fail2ban.sock
pidfile <span class="o">=</span> /var/run/fail2ban/fail2ban.pid

<span class="c"># 데이터베이스 설정</span>
dbfile <span class="o">=</span> /var/lib/fail2ban/fail2ban.sqlite3
dbpurgeage <span class="o">=</span> 86400

<span class="c">#</span>
<span class="c"># SSH 보안 강화</span>
<span class="c">#</span>
<span class="o">[</span>sshd]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> ssh,2222
filter <span class="o">=</span> sshd
logpath <span class="o">=</span> /var/log/auth.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600
findtime <span class="o">=</span> 600

<span class="o">[</span>sshd-ddos]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> ssh,2222
filter <span class="o">=</span> sshd-ddos
logpath <span class="o">=</span> /var/log/auth.log
maxretry <span class="o">=</span> 6
bantime <span class="o">=</span> 1800
findtime <span class="o">=</span> 120

<span class="c">#</span>
<span class="c"># 웹 서버 보안</span>
<span class="c">#</span>
<span class="o">[</span>apache-auth]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> apache-auth
logpath <span class="o">=</span> /var/log/apache2/error.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600

<span class="o">[</span>apache-badbots]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> apache-badbots
logpath <span class="o">=</span> /var/log/apache2/access.log
maxretry <span class="o">=</span> 2
bantime <span class="o">=</span> 7200

<span class="o">[</span>apache-noscript]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> apache-noscript
logpath <span class="o">=</span> /var/log/apache2/access.log
maxretry <span class="o">=</span> 6
bantime <span class="o">=</span> 1800

<span class="o">[</span>apache-overflows]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> apache-overflows
logpath <span class="o">=</span> /var/log/apache2/error.log
maxretry <span class="o">=</span> 2
bantime <span class="o">=</span> 7200

<span class="o">[</span>apache-nohome]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> apache-nohome
logpath <span class="o">=</span> /var/log/apache2/access.log
maxretry <span class="o">=</span> 2
bantime <span class="o">=</span> 3600

<span class="o">[</span>apache-botsearch]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> apache-botsearch
logpath <span class="o">=</span> /var/log/apache2/access.log
maxretry <span class="o">=</span> 2
bantime <span class="o">=</span> 7200

<span class="c">#</span>
<span class="c"># Nginx 보안</span>
<span class="c">#</span>
<span class="o">[</span>nginx-http-auth]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> nginx-http-auth
logpath <span class="o">=</span> /var/log/nginx/error.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600

<span class="o">[</span>nginx-limit-req]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> nginx-limit-req
logpath <span class="o">=</span> /var/log/nginx/error.log
maxretry <span class="o">=</span> 10
bantime <span class="o">=</span> 600
findtime <span class="o">=</span> 60

<span class="o">[</span>nginx-botsearch]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
filter <span class="o">=</span> nginx-botsearch
logpath <span class="o">=</span> /var/log/nginx/access.log
maxretry <span class="o">=</span> 2
bantime <span class="o">=</span> 7200

<span class="c">#</span>
<span class="c"># 메일 서버 보안</span>
<span class="c">#</span>
<span class="o">[</span>postfix]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> smtp,465,submission
filter <span class="o">=</span> postfix
logpath <span class="o">=</span> /var/log/mail.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600

<span class="o">[</span>dovecot]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> pop3,pop3s,imap,imaps,submission,465,sieve
filter <span class="o">=</span> dovecot
logpath <span class="o">=</span> /var/log/mail.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600

<span class="c">#</span>
<span class="c"># FTP 보안</span>
<span class="c">#</span>
<span class="o">[</span>vsftpd]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> ftp,ftp-data,ftps,ftps-data
filter <span class="o">=</span> vsftpd
logpath <span class="o">=</span> /var/log/vsftpd.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600

<span class="c">#</span>
<span class="c"># 데이터베이스 보안</span>
<span class="c">#</span>
<span class="o">[</span>mysqld-auth]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> 3306
filter <span class="o">=</span> mysqld-auth
logpath <span class="o">=</span> /var/log/mysql/error.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600

<span class="c">#</span>
<span class="c"># 커스텀 애플리케이션 보안</span>
<span class="c">#</span>
<span class="o">[</span>custom-app]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> 8080,8443
filter <span class="o">=</span> custom-app
logpath <span class="o">=</span> /var/log/custom-app/security.log
maxretry <span class="o">=</span> 5
bantime <span class="o">=</span> 7200
findtime <span class="o">=</span> 300

<span class="c">#</span>
<span class="c"># 시스템 로그 모니터링</span>
<span class="c">#</span>
<span class="o">[</span>pam-generic]
enabled <span class="o">=</span> <span class="nb">true
</span>filter <span class="o">=</span> pam-generic
logpath <span class="o">=</span> /var/log/auth.log
maxretry <span class="o">=</span> 6
bantime <span class="o">=</span> 1800

<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span>
enabled <span class="o">=</span> <span class="nb">true
</span>filter <span class="o">=</span> <span class="nb">sudo
</span>logpath <span class="o">=</span> /var/log/auth.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600
</code></pre></div></div>

<h4 id="고급-커스텀-필터-작성">고급 커스텀 필터 작성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/fail2ban/filter.d/custom-app.conf</span>
<span class="c"># 커스텀 애플리케이션용 필터</span>

<span class="o">[</span>Definition]
<span class="c"># 실패한 로그인 시도</span>
failregex <span class="o">=</span> ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"POST /api/login HTTP.*"</span> 401 .<span class="k">*</span><span class="err">$</span>
            ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"POST /admin/login HTTP.*"</span> 403 .<span class="k">*</span><span class="err">$</span>
            ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"Failed login attempt for user .* from &lt;HOST&gt;"</span><span class="err">$</span>
            ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"Invalid API key from &lt;HOST&gt;"</span><span class="err">$</span>
            ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"Suspicious activity detected from &lt;HOST&gt;"</span><span class="err">$</span>
            ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"Rate limit exceeded for &lt;HOST&gt;"</span><span class="err">$</span>
            ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"Brute force attempt detected from &lt;HOST&gt;"</span><span class="err">$</span>

<span class="c"># 무시할 패턴</span>
ignoreregex <span class="o">=</span> ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"GET /health HTTP.*"</span> 200 .<span class="k">*</span><span class="err">$</span>
              ^&lt;HOST&gt; .<span class="k">*</span> <span class="s2">"GET /status HTTP.*"</span> 200 .<span class="k">*</span><span class="err">$</span>

<span class="c"># /etc/fail2ban/filter.d/nginx-botsearch.conf</span>
<span class="c"># Nginx 봇 검색 패턴 필터</span>

<span class="o">[</span>Definition]
failregex <span class="o">=</span> ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span><span class="o">(</span><span class="se">\.</span>php|<span class="se">\.</span>asp|<span class="se">\.</span>exe|<span class="se">\.</span>pl|<span class="se">\.</span>cgi|<span class="se">\.</span>scgi<span class="o">)</span>
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span>admin
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span>phpMyAdmin
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span>wp-admin
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span>wp-login
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span>/etc/passwd
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span><span class="se">\.\.</span>/
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span><span class="o">(</span>proc/self/environ|etc/shadow|etc/passwd<span class="o">)</span>
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span><span class="o">(</span>cmd<span class="se">\.</span>exe|command<span class="se">\.</span>com<span class="o">)</span>
            ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span>sql.<span class="k">*</span>dump

ignoreregex <span class="o">=</span>

<span class="c"># /etc/fail2ban/filter.d/wordpress-security.conf</span>
<span class="c"># WordPress 보안 전용 필터</span>

<span class="o">[</span>Definition]
failregex <span class="o">=</span> ^&lt;HOST&gt; .<span class="k">*</span>POST.<span class="k">*</span>/wp-login<span class="se">\.</span>php.<span class="k">*</span> 200
            ^&lt;HOST&gt; .<span class="k">*</span>POST.<span class="k">*</span>/wp-admin/admin-ajax<span class="se">\.</span>php.<span class="k">*</span> 400
            ^&lt;HOST&gt; .<span class="k">*</span>GET.<span class="k">*</span>/wp-admin.<span class="k">*</span>
            ^&lt;HOST&gt; .<span class="k">*</span>GET.<span class="k">*</span>/wp-content/.<span class="k">*</span><span class="se">\.</span>php
            ^&lt;HOST&gt; .<span class="k">*</span>GET.<span class="k">*</span><span class="se">\?</span><span class="nv">author</span><span class="o">=</span><span class="se">\d</span>+
            ^&lt;HOST&gt; .<span class="k">*</span>GET.<span class="k">*</span>/xmlrpc<span class="se">\.</span>php

ignoreregex <span class="o">=</span> ^&lt;HOST&gt; .<span class="k">*</span>POST.<span class="k">*</span>/wp-login<span class="se">\.</span>php.<span class="k">*</span> <span class="s2">"WordPress/.*"</span>

<span class="c"># /etc/fail2ban/filter.d/ddos.conf</span>
<span class="c"># DDoS 공격 감지 필터</span>

<span class="o">[</span>Definition]
failregex <span class="o">=</span> ^&lt;HOST&gt; -.<span class="k">*</span>GET.<span class="k">*</span>
ignoreregex <span class="o">=</span>

<span class="c"># /etc/fail2ban/filter.d/port-scan.conf</span>
<span class="c"># 포트 스캔 감지 필터</span>

<span class="o">[</span>Definition]
failregex <span class="o">=</span> ^.<span class="k">*</span>kernel:.<span class="k">*</span><span class="nv">IN</span><span class="o">=</span>.<span class="k">*</span><span class="nv">SRC</span><span class="o">=</span>&lt;HOST&gt;.<span class="k">*</span><span class="nv">DPT</span><span class="o">=(</span>1|7|9|11|15|70|79|80|109|110|143|443|993|995<span class="o">)</span>.<span class="k">*</span>
            ^.<span class="k">*</span>kernel:.<span class="k">*</span><span class="nv">SRC</span><span class="o">=</span>&lt;HOST&gt;.<span class="k">*</span><span class="nv">DPT</span><span class="o">=(</span>23|53|111|137|139|445|513|514|515|993|995|1433|1521|3389<span class="o">)</span>.<span class="k">*</span>

ignoreregex <span class="o">=</span>
</code></pre></div></div>

<h4 id="fail2ban-고급-관리-스크립트">Fail2Ban 고급 관리 스크립트</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/fail2ban-manager.sh</span>
<span class="c"># Fail2Ban 고급 관리 도구</span>

<span class="nv">ACTION</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">JAIL</span><span class="o">=</span><span class="nv">$2</span>
<span class="nv">IP</span><span class="o">=</span><span class="nv">$3</span>

<span class="c"># 색상 정의</span>
<span class="nv">RED</span><span class="o">=</span><span class="s1">'\033[0;31m'</span>
<span class="nv">GREEN</span><span class="o">=</span><span class="s1">'\033[0;32m'</span>
<span class="nv">YELLOW</span><span class="o">=</span><span class="s1">'\033[1;33m'</span>
<span class="nv">BLUE</span><span class="o">=</span><span class="s1">'\033[0;34m'</span>
<span class="nv">NC</span><span class="o">=</span><span class="s1">'\033[0m'</span> <span class="c"># No Color</span>

print_color<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">2</span><span class="k">}${</span><span class="nv">1</span><span class="k">}${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
<span class="o">}</span>

check_fail2ban<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">!</span> systemctl is-active <span class="nt">--quiet</span> fail2ban<span class="p">;</span> <span class="k">then
        </span>print_color <span class="s2">"ERROR: Fail2Ban is not running"</span> <span class="s2">"</span><span class="nv">$RED</span><span class="s2">"</span>
        <span class="nb">exit </span>1
    <span class="k">fi</span>
<span class="o">}</span>

<span class="k">case</span> <span class="nv">$ACTION</span> <span class="k">in</span>
    <span class="s2">"status"</span><span class="p">)</span>
        check_fail2ban
        <span class="nb">echo</span> <span class="s2">"=== Fail2Ban Status ==="</span>
        fail2ban-client status
        
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">""</span>
            <span class="nb">echo</span> <span class="s2">"=== Jail: </span><span class="nv">$JAIL</span><span class="s2"> ==="</span>
            fail2ban-client status <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span>
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"ban"</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$IP</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> ban &lt;jail&gt; &lt;ip&gt;"</span>
            <span class="nb">exit </span>1
        <span class="k">fi
        
        </span>check_fail2ban
        print_color <span class="s2">"Banning IP </span><span class="nv">$IP</span><span class="s2"> in jail </span><span class="nv">$JAIL</span><span class="s2">..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
        fail2ban-client <span class="nb">set</span> <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> banip <span class="s2">"</span><span class="nv">$IP</span><span class="s2">"</span>
        print_color <span class="s2">"IP </span><span class="nv">$IP</span><span class="s2"> banned successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"unban"</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$IP</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> unban &lt;jail|all&gt; &lt;ip&gt;"</span>
            <span class="nb">exit </span>1
        <span class="k">fi
        
        </span>check_fail2ban
        <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"all"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>print_color <span class="s2">"Unbanning IP </span><span class="nv">$IP</span><span class="s2"> from all jails..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
            <span class="k">for </span>jail <span class="k">in</span> <span class="si">$(</span>fail2ban-client status | <span class="nb">grep</span> <span class="s2">"Jail list:"</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f2</span> | <span class="nb">tr</span> <span class="s1">','</span> <span class="s1">' '</span><span class="si">)</span><span class="p">;</span> <span class="k">do
                </span><span class="nv">jail</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$jail</span> | xargs<span class="si">)</span>  <span class="c"># trim whitespace</span>
                fail2ban-client <span class="nb">set</span> <span class="s2">"</span><span class="nv">$jail</span><span class="s2">"</span> unbanip <span class="s2">"</span><span class="nv">$IP</span><span class="s2">"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
            </span><span class="k">done
        else
            </span>print_color <span class="s2">"Unbanning IP </span><span class="nv">$IP</span><span class="s2"> from jail </span><span class="nv">$JAIL</span><span class="s2">..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
            fail2ban-client <span class="nb">set</span> <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> unbanip <span class="s2">"</span><span class="nv">$IP</span><span class="s2">"</span>
        <span class="k">fi
        </span>print_color <span class="s2">"IP </span><span class="nv">$IP</span><span class="s2"> unbanned successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"list-banned"</span><span class="p">)</span>
        check_fail2ban
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"=== Banned IPs in jail: </span><span class="nv">$JAIL</span><span class="s2"> ==="</span>
            fail2ban-client get <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> banip
        <span class="k">else
            </span><span class="nb">echo</span> <span class="s2">"=== All Banned IPs ==="</span>
            <span class="k">for </span>jail <span class="k">in</span> <span class="si">$(</span>fail2ban-client status | <span class="nb">grep</span> <span class="s2">"Jail list:"</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f2</span> | <span class="nb">tr</span> <span class="s1">','</span> <span class="s1">' '</span><span class="si">)</span><span class="p">;</span> <span class="k">do
                </span><span class="nv">jail</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$jail</span> | xargs<span class="si">)</span>
                <span class="nv">banned</span><span class="o">=</span><span class="si">$(</span>fail2ban-client get <span class="s2">"</span><span class="nv">$jail</span><span class="s2">"</span> banip 2&gt;/dev/null<span class="si">)</span>
                <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$banned</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$banned</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"[]"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
                    </span><span class="nb">echo</span> <span class="s2">"Jail: </span><span class="nv">$jail</span><span class="s2">"</span>
                    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$banned</span><span class="s2">"</span>
                    <span class="nb">echo</span> <span class="s2">""</span>
                <span class="k">fi
            done
        fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"stats"</span><span class="p">)</span>
        check_fail2ban
        <span class="nb">echo</span> <span class="s2">"=== Fail2Ban Statistics ==="</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        
        <span class="c"># 전체 통계</span>
        <span class="nb">echo</span> <span class="s2">"Active jails:"</span>
        fail2ban-client status | <span class="nb">grep</span> <span class="s2">"Jail list:"</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f2</span>
        
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Jail statistics:"</span>
        <span class="k">for </span>jail <span class="k">in</span> <span class="si">$(</span>fail2ban-client status | <span class="nb">grep</span> <span class="s2">"Jail list:"</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f2</span> | <span class="nb">tr</span> <span class="s1">','</span> <span class="s1">' '</span><span class="si">)</span><span class="p">;</span> <span class="k">do
            </span><span class="nv">jail</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$jail</span> | xargs<span class="si">)</span>
            <span class="nv">status</span><span class="o">=</span><span class="si">$(</span>fail2ban-client status <span class="s2">"</span><span class="nv">$jail</span><span class="s2">"</span> 2&gt;/dev/null<span class="si">)</span>
            <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
                </span><span class="nv">currently_failed</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$status</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="s2">"Currently failed:"</span> | <span class="nb">awk</span> <span class="s1">'{print $NF}'</span><span class="si">)</span>
                <span class="nv">total_failed</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$status</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="s2">"Total failed:"</span> | <span class="nb">awk</span> <span class="s1">'{print $NF}'</span><span class="si">)</span>
                <span class="nv">currently_banned</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$status</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="s2">"Currently banned:"</span> | <span class="nb">awk</span> <span class="s1">'{print $NF}'</span><span class="si">)</span>
                <span class="nv">total_banned</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$status</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="s2">"Total banned:"</span> | <span class="nb">awk</span> <span class="s1">'{print $NF}'</span><span class="si">)</span>
                
                <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$jail</span><span class="s2">: Failed=</span><span class="nv">$currently_failed</span><span class="s2">/</span><span class="nv">$total_failed</span><span class="s2">, Banned=</span><span class="nv">$currently_banned</span><span class="s2">/</span><span class="nv">$total_banned</span><span class="s2">"</span>
            <span class="k">fi
        done
        
        </span><span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Top banned IPs:"</span>
        <span class="nb">grep</span> <span class="s2">"Ban "</span> /var/log/fail2ban.log 2&gt;/dev/null | <span class="se">\</span>
        <span class="nb">awk</span> <span class="s1">'{print $(NF-1)}'</span> | <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span> | <span class="nb">head</span> <span class="nt">-10</span>
        <span class="p">;;</span>
        
    <span class="s2">"top-attackers"</span><span class="p">)</span>
        <span class="nv">DAYS</span><span class="o">=</span><span class="k">${</span><span class="nv">JAIL</span><span class="k">:-</span><span class="nv">7</span><span class="k">}</span>
        <span class="nb">echo</span> <span class="s2">"=== Top Attackers (Last </span><span class="nv">$DAYS</span><span class="s2"> days) ==="</span>
        
        <span class="c"># 지정된 날짜부터의 로그 분석</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nv">$DAYS</span> <span class="nt">-gt</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nv">DATE_FILTER</span><span class="o">=</span><span class="s2">"-since </span><span class="se">\"</span><span class="nv">$DAYS</span><span class="s2"> days ago</span><span class="se">\"</span><span class="s2">"</span>
        <span class="k">else
            </span><span class="nv">DATE_FILTER</span><span class="o">=</span><span class="s2">""</span>
        <span class="k">fi</span>
        
        <span class="c"># 로그에서 공격 IP 추출 및 분석</span>
        <span class="nb">eval </span>journalctl <span class="nt">-u</span> fail2ban <span class="nv">$DATE_FILTER</span> 2&gt;/dev/null | <span class="se">\</span>
        <span class="nb">grep</span> <span class="s2">"Ban "</span> | <span class="se">\</span>
        <span class="nb">awk</span> <span class="s1">'{print $(NF-1)}'</span> | <span class="se">\</span>
        <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span> | <span class="nb">head</span> <span class="nt">-20</span> | <span class="se">\</span>
        <span class="k">while </span><span class="nb">read </span>count ip<span class="p">;</span> <span class="k">do</span>
            <span class="c"># IP 지역 정보 조회 (geoip 사용, 설치된 경우)</span>
            <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> geoiplookup <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
                </span><span class="nv">country</span><span class="o">=</span><span class="si">$(</span>geoiplookup <span class="s2">"</span><span class="nv">$ip</span><span class="s2">"</span> 2&gt;/dev/null | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f2</span> | xargs<span class="si">)</span>
            <span class="k">else
                </span><span class="nv">country</span><span class="o">=</span><span class="s2">"Unknown"</span>
            <span class="k">fi
            </span><span class="nb">printf</span> <span class="s2">"%-6s %-15s %s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$count</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$ip</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$country</span><span class="s2">"</span>
        <span class="k">done</span>
        <span class="p">;;</span>
        
    <span class="s2">"analyze"</span><span class="p">)</span>
        <span class="nv">HOURS</span><span class="o">=</span><span class="k">${</span><span class="nv">JAIL</span><span class="k">:-</span><span class="nv">24</span><span class="k">}</span>
        <span class="nb">echo</span> <span class="s2">"=== Fail2Ban Analysis (Last </span><span class="nv">$HOURS</span><span class="s2"> hours) ==="</span>
        
        <span class="c"># 최근 활동 분석</span>
        <span class="nb">eval </span>journalctl <span class="nt">-u</span> fail2ban <span class="nt">--since</span> <span class="s2">"</span><span class="nv">$HOURS</span><span class="s2"> hours ago"</span> 2&gt;/dev/null | <span class="se">\</span>
        <span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"(Ban|Unban)"</span> | <span class="se">\</span>
        <span class="nb">awk</span> <span class="s1">'{
            if ($0 ~ /Ban /) bans++
            if ($0 ~ /Unban/) unbans++
        }
        END {
            print "Total bans: " (bans ? bans : 0)
            print "Total unbans: " (unbans ? unbans : 0)
            print "Net banned: " ((bans ? bans : 0) - (unbans ? unbans : 0))
        }'</span>
        
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Activity by jail:"</span>
        <span class="nb">eval </span>journalctl <span class="nt">-u</span> fail2ban <span class="nt">--since</span> <span class="s2">"</span><span class="nv">$HOURS</span><span class="s2"> hours ago"</span> 2&gt;/dev/null | <span class="se">\</span>
        <span class="nb">grep</span> <span class="s2">"Ban "</span> | <span class="se">\</span>
        <span class="nb">awk</span> <span class="s1">'{
            # jail 이름 추출 (로그 형식에 따라 조정 필요)
            match($0, /\[([^\]]+)\]/, arr)
            if (arr[1]) jails[arr[1]]++
        }
        END {
            for (jail in jails) {
                print "  " jail ": " jails[jail]
            }
        }'</span>
        <span class="p">;;</span>
        
    <span class="s2">"reload"</span><span class="p">)</span>
        print_color <span class="s2">"Reloading Fail2Ban configuration..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
        systemctl reload fail2ban
        print_color <span class="s2">"Fail2Ban reloaded successfully"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"test-filter"</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> test-filter &lt;filter-name&gt; [log-file]"</span>
            <span class="nb">exit </span>1
        <span class="k">fi
        
        </span><span class="nv">FILTER</span><span class="o">=</span><span class="nv">$JAIL</span>
        <span class="nv">LOGFILE</span><span class="o">=</span><span class="k">${</span><span class="nv">IP</span><span class="k">:-</span><span class="p">/var/log/auth.log</span><span class="k">}</span>
        
        <span class="nb">echo</span> <span class="s2">"=== Testing filter: </span><span class="nv">$FILTER</span><span class="s2"> ==="</span>
        <span class="nb">echo</span> <span class="s2">"Log file: </span><span class="nv">$LOGFILE</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        
        fail2ban-regex <span class="s2">"</span><span class="nv">$LOGFILE</span><span class="s2">"</span> <span class="s2">"/etc/fail2ban/filter.d/</span><span class="k">${</span><span class="nv">FILTER</span><span class="k">}</span><span class="s2">.conf"</span>
        <span class="p">;;</span>
        
    <span class="s2">"whitelist"</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$JAIL</span><span class="s2">"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$IP</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> whitelist &lt;add|remove|list&gt; &lt;ip|network&gt;"</span>
            <span class="nb">exit </span>1
        <span class="k">fi
        
        </span><span class="nv">WHITELIST_ACTION</span><span class="o">=</span><span class="nv">$JAIL</span>
        <span class="nv">TARGET_IP</span><span class="o">=</span><span class="nv">$IP</span>
        
        <span class="k">case</span> <span class="nv">$WHITELIST_ACTION</span> <span class="k">in</span>
            <span class="s2">"add"</span><span class="p">)</span>
                print_color <span class="s2">"Adding </span><span class="nv">$TARGET_IP</span><span class="s2"> to whitelist..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
                <span class="c"># jail.local의 ignoreip에 추가</span>
                <span class="k">if </span><span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"ignoreip.*</span><span class="nv">$TARGET_IP</span><span class="s2">"</span> /etc/fail2ban/jail.local<span class="p">;</span> <span class="k">then
                    </span>print_color <span class="s2">"IP </span><span class="nv">$TARGET_IP</span><span class="s2"> is already whitelisted"</span> <span class="s2">"</span><span class="nv">$BLUE</span><span class="s2">"</span>
                <span class="k">else
                    </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"/^ignoreip = / s/</span><span class="nv">$/</span><span class="s2"> </span><span class="nv">$TARGET_IP</span><span class="s2">/"</span> /etc/fail2ban/jail.local
                    systemctl reload fail2ban
                    print_color <span class="s2">"IP </span><span class="nv">$TARGET_IP</span><span class="s2"> added to whitelist"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
                <span class="k">fi</span>
                <span class="p">;;</span>
            <span class="s2">"remove"</span><span class="p">)</span>
                print_color <span class="s2">"Removing </span><span class="nv">$TARGET_IP</span><span class="s2"> from whitelist..."</span> <span class="s2">"</span><span class="nv">$YELLOW</span><span class="s2">"</span>
                <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/ </span><span class="nv">$TARGET_IP</span><span class="s2">//g"</span> /etc/fail2ban/jail.local
                systemctl reload fail2ban
                print_color <span class="s2">"IP </span><span class="nv">$TARGET_IP</span><span class="s2"> removed from whitelist"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
                <span class="p">;;</span>
            <span class="s2">"list"</span><span class="p">)</span>
                <span class="nb">echo</span> <span class="s2">"=== Current Whitelist ==="</span>
                <span class="nb">grep</span> <span class="s2">"^ignoreip"</span> /etc/fail2ban/jail.local
                <span class="p">;;</span>
        <span class="k">esac</span>
        <span class="p">;;</span>
        
    <span class="s2">"backup"</span><span class="p">)</span>
        <span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">"/etc/fail2ban/backup/</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span><span class="s2">"</span>
        <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>
        
        <span class="nb">cp</span> <span class="nt">-r</span> /etc/fail2ban/jail.local <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
        cp</span> <span class="nt">-r</span> /etc/fail2ban/filter.d/<span class="k">*</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
        cp</span> <span class="nt">-r</span> /etc/fail2ban/action.d/<span class="k">*</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
        
        </span>print_color <span class="s2">"Fail2Ban configuration backed up to: </span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$GREEN</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="k">*</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> {status|ban|unban|list-banned|stats|top-attackers|analyze|reload|test-filter|whitelist|backup} [options]"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Commands:"</span>
        <span class="nb">echo</span> <span class="s2">"  status [jail]                    - Show Fail2Ban status"</span>
        <span class="nb">echo</span> <span class="s2">"  ban &lt;jail&gt; &lt;ip&gt;                 - Ban IP in specific jail"</span>
        <span class="nb">echo</span> <span class="s2">"  unban &lt;jail|all&gt; &lt;ip&gt;           - Unban IP from jail or all jails"</span>
        <span class="nb">echo</span> <span class="s2">"  list-banned [jail]              - List banned IPs"</span>
        <span class="nb">echo</span> <span class="s2">"  stats                           - Show comprehensive statistics"</span>
        <span class="nb">echo</span> <span class="s2">"  top-attackers [days]            - Show top attacking IPs"</span>
        <span class="nb">echo</span> <span class="s2">"  analyze [hours]                 - Analyze recent activity"</span>
        <span class="nb">echo</span> <span class="s2">"  reload                          - Reload configuration"</span>
        <span class="nb">echo</span> <span class="s2">"  test-filter &lt;filter&gt; [logfile]  - Test filter regex"</span>
        <span class="nb">echo</span> <span class="s2">"  whitelist &lt;add|remove|list&gt; &lt;ip&gt; - Manage whitelist"</span>
        <span class="nb">echo</span> <span class="s2">"  backup                          - Backup configuration"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Examples:"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> status sshd"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> ban sshd 192.168.1.100"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> unban all 192.168.1.100"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> top-attackers 30"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> test-filter sshd"</span>
        <span class="nb">exit </span>1
        <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<h2 id="다음-편-예고">다음 편 예고</h2>

<p>다음 포스트에서는 <strong>Wazuh SIEM과 컨테이너 보안</strong>을 상세히 다룰 예정입니다:</p>
<ul>
  <li>Wazuh 완전 구축 및 설정</li>
  <li>실시간 위협 탐지 룰 작성</li>
  <li>Docker/Kubernetes 보안 강화</li>
  <li>컴플라이언스 및 감사 로그 관리</li>
</ul>

<p>AIDE와 Fail2Ban으로 강력한 침입 탐지 시스템을 완성하셨나요? 🔍🛡️</p>]]></content><author><name>DevOps Engineer</name></author><category term="Security" /><category term="Linux" /><category term="intrusion-detection" /><category term="aide" /><category term="fail2ban" /><category term="wazuh" /><category term="siem" /><category term="monitoring" /><category term="threat-detection" /><category term="log-analysis" /><summary type="html"><![CDATA[리눅스 시스템의 완벽한 보안을 위한 마지막 퍼즐 조각인 침입 탐지와 실시간 모니터링을 완전히 마스터해보겠습니다. AIDE부터 Wazuh SIEM까지, 모든 위협을 실시간으로 탐지하고 대응하는 최고급 보안 시스템을 구축합니다. AIDE 파일 무결성 모니터링 | AIDE File Integrity Monitoring 🔍 AIDE 완전 설정 및 운영 AIDE 설치 및 기본 설정 # AIDE 설치 # CentOS/RHEL yum install aide # Ubuntu/Debian apt-get install aide aide-common # 초기 데이터베이스 생성 aide --init mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz # 기본 무결성 검사 실행 aide --check # 설정 파일 위치 # CentOS/RHEL: /etc/aide.conf # Ubuntu/Debian: /etc/aide/aide.conf 고급 AIDE 설정 파일 작성 # /etc/aide/aide.conf (Ubuntu) 또는 /etc/aide.conf (CentOS) # 종합적인 AIDE 설정 # 데이터베이스 경로 database=file:/var/lib/aide/aide.db.gz database_out=file:/var/lib/aide/aide.db.new.gz # 로그 설정 verbose=5 report_url=file:/var/log/aide/aide.log report_url=stdout # 검사 규칙 정의 # R = p+i+n+u+g+s+m+c+md5 # L = p+i+n+u+g # E = 빈 그룹 (존재만 확인) # &gt; = 로그 파일 (크기 증가만 허용) # X = 제외 # 기본 규칙들 Binlib = p+i+n+u+g+s+b+m+c+md5+sha1+sha256+sha512 ConfFiles = p+i+n+u+g+s+m+c+md5+sha1+sha256 LogFiles = p+u+g+i+n+S DatabaseFiles = p+i+n+u+g+s+m+c+md5+sha1+sha256 StaticFiles = p+i+n+u+g+s+m+c+md5+sha1+sha256+acl+selinux+xattrs DeviceFiles = p+i+n+u+g+s+b+c+md5+sha1 # 고급 규칙들 CriticalFiles = p+i+n+u+g+s+m+c+md5+sha1+sha256+sha512+acl+selinux+xattrs WebFiles = p+i+n+u+g+s+m+c+md5+sha1+sha256 TempFiles = n+u+g+i UserFiles = p+i+n+u+g+s+m+c+md5+sha1 # 시스템 중요 디렉토리 /boot CriticalFiles /bin Binlib /sbin Binlib /usr/bin Binlib /usr/sbin Binlib /usr/local/bin Binlib /usr/local/sbin Binlib /lib Binlib /lib64 Binlib /usr/lib Binlib /usr/lib64 Binlib # 설정 파일들 /etc ConfFiles !/etc/mtab !/etc/.*~ !/etc/\..* !/etc/passwd- !/etc/shadow- !/etc/group- !/etc/gshadow- !/etc/security/opasswd !/etc/mail/statistics !/etc/prelink\.cache !/etc/crontab !/etc/cron\.d !/etc/cron\.daily !/etc/cron\.hourly !/etc/cron\.monthly !/etc/cron\.weekly # 시스템 특수 파일들 /etc/passwd CriticalFiles /etc/shadow CriticalFiles /etc/group CriticalFiles /etc/gshadow CriticalFiles /etc/sudoers CriticalFiles /etc/ssh/sshd_config CriticalFiles /etc/hosts CriticalFiles /etc/hosts.allow CriticalFiles /etc/hosts.deny CriticalFiles # 웹 서버 파일들 (해당하는 경우) /var/www WebFiles !/var/www/html/.*\.log$ !/var/www/.*cache.* # 로그 디렉토리 (증가만 허용) /var/log LogFiles !/var/log/.*\.[0-9]+\.gz !/var/log/.*\.old !/var/log/.*\.log\.[0-9]+ !/var/log/lastlog !/var/log/wtmp !/var/log/btmp !/var/log/utmp # 사용자 홈 디렉토리 (중요 파일만) /home UserFiles !/home/[^/]+/\.bash_history !/home/[^/]+/\.viminfo !/home/[^/]+/\.cache !/home/[^/]+/\.local !/home/[^/]+/\.mozilla !/home/[^/]+/\.gnome !/home/[^/]+/\.config # 특별 관심 파일들 /root CriticalFiles !/root/\.bash_history !/root/\.viminfo # 데이터베이스 파일들 /var/lib/mysql DatabaseFiles /var/lib/postgresql DatabaseFiles # 임시 디렉토리 (존재만 확인) /tmp TempFiles /var/tmp TempFiles # 제외할 디렉토리들 !/proc !/sys !/dev !/run !/var/run !/var/lock !/var/cache !/var/spool !/media !/mnt !/tmp/.* !/var/tmp/.* !/lost\+found # 고급 제외 규칙들 !/\.journal !/\.updated !/var/lib/dhcp/dhcpd\.leases.* !/var/lib/logrotate\.status !/var/lib/random-seed !/var/lib/systemd !/var/lib/dbus AIDE 자동화 및 모니터링 스크립트 #!/bin/bash # /usr/local/bin/aide-monitor.sh # AIDE 자동 모니터링 및 알림 시스템 AIDE_CONFIG="/etc/aide/aide.conf" AIDE_DB="/var/lib/aide/aide.db.gz" AIDE_NEW_DB="/var/lib/aide/aide.db.new.gz" LOG_FILE="/var/log/aide/aide-monitor.log" ALERT_LOG="/var/log/aide/aide-alerts.log" EMAIL_TO="admin@example.com" LOCKFILE="/var/run/aide-monitor.lock" # 함수 정의 log_message() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE" } send_alert() { local subject="$1" local message="$2" echo "$(date '+%Y-%m-%d %H:%M:%S') - ALERT: $subject" &gt;&gt; "$ALERT_LOG" echo "$message" &gt;&gt; "$ALERT_LOG" # 이메일 발송 (sendmail 또는 mail 명령 사용) if command -v mail &gt;/dev/null 2&gt;&amp;1; then echo "$message" | mail -s "AIDE Alert: $subject" "$EMAIL_TO" fi # Slack 웹훅 (설정된 경우) if [ -n "$SLACK_WEBHOOK" ]; then curl -X POST -H 'Content-type: application/json' \ --data "{\"text\":\"🚨 AIDE Alert: $subject\n$message\"}" \ "$SLACK_WEBHOOK" fi # syslog에도 기록 logger -p local0.alert "AIDE Alert: $subject" } check_prerequisites() { # AIDE 설치 확인 if ! command -v aide &gt;/dev/null 2&gt;&amp;1; then log_message "ERROR: AIDE is not installed" exit 1 fi # 데이터베이스 존재 확인 if [ ! -f "$AIDE_DB" ]; then log_message "ERROR: AIDE database not found at $AIDE_DB" log_message "Run: aide --init &amp;&amp; mv $AIDE_NEW_DB $AIDE_DB" exit 1 fi # 로그 디렉토리 생성 mkdir -p "$(dirname "$LOG_FILE")" mkdir -p "$(dirname "$ALERT_LOG")" } # 락 파일 확인 (중복 실행 방지) if [ -f "$LOCKFILE" ]; then PID=$(cat "$LOCKFILE") if ps -p "$PID" &gt; /dev/null 2&gt;&amp;1; then log_message "Another instance is running (PID: $PID)" exit 1 else rm -f "$LOCKFILE" fi fi # 락 파일 생성 echo $$ &gt; "$LOCKFILE" trap "rm -f $LOCKFILE" EXIT # 액션 파라미터 ACTION=${1:-check} case $ACTION in "init") log_message "Initializing AIDE database..." check_prerequisites aide --init if [ $? -eq 0 ]; then mv "$AIDE_NEW_DB" "$AIDE_DB" log_message "AIDE database initialized successfully" else log_message "ERROR: AIDE database initialization failed" exit 1 fi ;; "check") log_message "Starting AIDE integrity check..." check_prerequisites # 임시 파일에 결과 저장 TEMP_RESULT="/tmp/aide-result-$$" # AIDE 실행 aide --check &gt; "$TEMP_RESULT" 2&gt;&amp;1 AIDE_EXIT_CODE=$? case $AIDE_EXIT_CODE in 0) log_message "AIDE check completed - No changes detected" ;; 1) log_message "WARNING: AIDE detected file changes" # 변경 사항 분석 CHANGES=$(grep -E "(added|removed|changed)" "$TEMP_RESULT" | wc -l) # 상세 변경 내역 CHANGE_DETAILS=$(grep -A 5 -B 5 -E "(added|removed|changed)" "$TEMP_RESULT") # 알림 발송 ALERT_MESSAGE="AIDE detected $CHANGES file system changes: $CHANGE_DETAILS Full report saved to: $LOG_FILE Time: $(date) Hostname: $(hostname)" send_alert "File System Changes Detected" "$ALERT_MESSAGE" # 전체 결과를 로그에 저장 cat "$TEMP_RESULT" &gt;&gt; "$LOG_FILE" ;; 2|3|4|5|6|7|14|15|16|17) log_message "ERROR: AIDE check failed with exit code $AIDE_EXIT_CODE" send_alert "AIDE Check Failed" "AIDE integrity check failed with exit code: $AIDE_EXIT_CODE" ;; esac rm -f "$TEMP_RESULT" ;; "update") log_message "Updating AIDE database..." check_prerequisites # 백업 생성 BACKUP_DB="/var/lib/aide/aide.db.backup.$(date +%Y%m%d-%H%M%S).gz" cp "$AIDE_DB" "$BACKUP_DB" log_message "Database backed up to $BACKUP_DB" # 새 데이터베이스 생성 aide --init if [ $? -eq 0 ]; then mv "$AIDE_NEW_DB" "$AIDE_DB" log_message "AIDE database updated successfully" else log_message "ERROR: AIDE database update failed" exit 1 fi ;; "config-test") log_message "Testing AIDE configuration..." aide --config-check if [ $? -eq 0 ]; then log_message "AIDE configuration is valid" else log_message "ERROR: AIDE configuration has errors" exit 1 fi ;; "stats") log_message "AIDE Statistics:" echo "Database size: $(du -h $AIDE_DB 2&gt;/dev/null || echo 'N/A')" echo "Database date: $(stat -c %y $AIDE_DB 2&gt;/dev/null || echo 'N/A')" echo "Config file: $AIDE_CONFIG" echo "Log file: $LOG_FILE" # 최근 체크 이력 echo "Recent checks:" tail -n 10 "$LOG_FILE" 2&gt;/dev/null || echo "No recent checks found" ;; "report") DAYS=${2:-7} log_message "Generating AIDE report for last $DAYS days..." echo "=== AIDE Activity Report (Last $DAYS days) ===" echo "Generated: $(date)" echo "" # 최근 체크 결과 echo "Recent integrity checks:" grep -E "AIDE check completed|AIDE detected|ERROR:" "$LOG_FILE" 2&gt;/dev/null | \ awk -v days="$DAYS" ' BEGIN { cutoff = systime() - (days * 24 * 60 * 60) } { # 날짜 파싱 (간단한 방법) print $0 }' | tail -n 20 echo "" echo "Alert summary:" grep "ALERT:" "$ALERT_LOG" 2&gt;/dev/null | tail -n 10 || echo "No alerts in period" ;; *) echo "Usage: $0 {init|check|update|config-test|stats|report} [days]" echo "" echo "Actions:" echo " init - Initialize AIDE database" echo " check - Perform integrity check" echo " update - Update AIDE database" echo " config-test - Test configuration" echo " stats - Show statistics" echo " report - Generate activity report" echo "" echo "Examples:" echo " $0 check # Perform integrity check" echo " $0 report 30 # Generate 30-day report" exit 1 ;; esac log_message "AIDE monitor completed successfully" AIDE 자동화 크론잡 설정 # /etc/cron.d/aide-monitoring # AIDE 자동 모니터링 크론 설정 # 매일 02:00에 무결성 검사 실행 0 2 * * * root /usr/local/bin/aide-monitor.sh check # 매주 일요일 03:00에 주간 리포트 생성 0 3 * * 0 root /usr/local/bin/aide-monitor.sh report 7 # 매월 1일 04:00에 월간 리포트 생성 0 4 1 * * root /usr/local/bin/aide-monitor.sh report 30 # logrotate 설정 # /etc/logrotate.d/aide /var/log/aide/*.log { daily missingok rotate 365 compress delaycompress notifempty create 644 root root postrotate # AIDE 로그 순환 후 처리 (필요시) endscript } Fail2Ban 고급 설정 | Advanced Fail2Ban Configuration 🚫 포괄적인 침입 차단 시스템 Fail2Ban 고급 메인 설정 # /etc/fail2ban/jail.local # 종합적인 Fail2Ban 설정 [DEFAULT] # 기본 설정 ignorelist = 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8 bantime = 3600 findtime = 600 maxretry = 3 backend = auto # 백엔드 우선순위: systemd &gt; pyinotify &gt; gamin &gt; polling backend = systemd # 액션 설정 banaction = iptables-multiport banaction_allports = iptables-allports action_ = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"] # 이메일 액션 action_mw = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"] %(mta)s-whois[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", protocol="%(protocol)s", chain="%(chain)s"] # 이메일 + 로그 액션 action_mwl = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"] %(mta)s-whois-lines[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", logpath="%(logpath)s", chain="%(chain)s"] # 기본 액션 action = %(action_mwl)s # 이메일 설정 destemail = admin@example.com sender = fail2ban@example.com mta = sendmail # 로그 레벨 loglevel = INFO logtarget = /var/log/fail2ban.log # 소켓 설정 socket = /var/run/fail2ban/fail2ban.sock pidfile = /var/run/fail2ban/fail2ban.pid # 데이터베이스 설정 dbfile = /var/lib/fail2ban/fail2ban.sqlite3 dbpurgeage = 86400 # # SSH 보안 강화 # [sshd] enabled = true port = ssh,2222 filter = sshd logpath = /var/log/auth.log maxretry = 3 bantime = 3600 findtime = 600 [sshd-ddos] enabled = true port = ssh,2222 filter = sshd-ddos logpath = /var/log/auth.log maxretry = 6 bantime = 1800 findtime = 120 # # 웹 서버 보안 # [apache-auth] enabled = true port = http,https filter = apache-auth logpath = /var/log/apache2/error.log maxretry = 3 bantime = 3600 [apache-badbots] enabled = true port = http,https filter = apache-badbots logpath = /var/log/apache2/access.log maxretry = 2 bantime = 7200 [apache-noscript] enabled = true port = http,https filter = apache-noscript logpath = /var/log/apache2/access.log maxretry = 6 bantime = 1800 [apache-overflows] enabled = true port = http,https filter = apache-overflows logpath = /var/log/apache2/error.log maxretry = 2 bantime = 7200 [apache-nohome] enabled = true port = http,https filter = apache-nohome logpath = /var/log/apache2/access.log maxretry = 2 bantime = 3600 [apache-botsearch] enabled = true port = http,https filter = apache-botsearch logpath = /var/log/apache2/access.log maxretry = 2 bantime = 7200 # # Nginx 보안 # [nginx-http-auth] enabled = true port = http,https filter = nginx-http-auth logpath = /var/log/nginx/error.log maxretry = 3 bantime = 3600 [nginx-limit-req] enabled = true port = http,https filter = nginx-limit-req logpath = /var/log/nginx/error.log maxretry = 10 bantime = 600 findtime = 60 [nginx-botsearch] enabled = true port = http,https filter = nginx-botsearch logpath = /var/log/nginx/access.log maxretry = 2 bantime = 7200 # # 메일 서버 보안 # [postfix] enabled = true port = smtp,465,submission filter = postfix logpath = /var/log/mail.log maxretry = 3 bantime = 3600 [dovecot] enabled = true port = pop3,pop3s,imap,imaps,submission,465,sieve filter = dovecot logpath = /var/log/mail.log maxretry = 3 bantime = 3600 # # FTP 보안 # [vsftpd] enabled = true port = ftp,ftp-data,ftps,ftps-data filter = vsftpd logpath = /var/log/vsftpd.log maxretry = 3 bantime = 3600 # # 데이터베이스 보안 # [mysqld-auth] enabled = true port = 3306 filter = mysqld-auth logpath = /var/log/mysql/error.log maxretry = 3 bantime = 3600 # # 커스텀 애플리케이션 보안 # [custom-app] enabled = true port = 8080,8443 filter = custom-app logpath = /var/log/custom-app/security.log maxretry = 5 bantime = 7200 findtime = 300 # # 시스템 로그 모니터링 # [pam-generic] enabled = true filter = pam-generic logpath = /var/log/auth.log maxretry = 6 bantime = 1800 [sudo] enabled = true filter = sudo logpath = /var/log/auth.log maxretry = 3 bantime = 3600 고급 커스텀 필터 작성 # /etc/fail2ban/filter.d/custom-app.conf # 커스텀 애플리케이션용 필터 [Definition] # 실패한 로그인 시도 failregex = ^&lt;HOST&gt; .* "POST /api/login HTTP.*" 401 .*$ ^&lt;HOST&gt; .* "POST /admin/login HTTP.*" 403 .*$ ^&lt;HOST&gt; .* "Failed login attempt for user .* from &lt;HOST&gt;"$ ^&lt;HOST&gt; .* "Invalid API key from &lt;HOST&gt;"$ ^&lt;HOST&gt; .* "Suspicious activity detected from &lt;HOST&gt;"$ ^&lt;HOST&gt; .* "Rate limit exceeded for &lt;HOST&gt;"$ ^&lt;HOST&gt; .* "Brute force attempt detected from &lt;HOST&gt;"$ # 무시할 패턴 ignoreregex = ^&lt;HOST&gt; .* "GET /health HTTP.*" 200 .*$ ^&lt;HOST&gt; .* "GET /status HTTP.*" 200 .*$ # /etc/fail2ban/filter.d/nginx-botsearch.conf # Nginx 봇 검색 패턴 필터 [Definition] failregex = ^&lt;HOST&gt; -.*GET.*(\.php|\.asp|\.exe|\.pl|\.cgi|\.scgi) ^&lt;HOST&gt; -.*GET.*admin ^&lt;HOST&gt; -.*GET.*phpMyAdmin ^&lt;HOST&gt; -.*GET.*wp-admin ^&lt;HOST&gt; -.*GET.*wp-login ^&lt;HOST&gt; -.*GET.*/etc/passwd ^&lt;HOST&gt; -.*GET.*\.\./ ^&lt;HOST&gt; -.*GET.*(proc/self/environ|etc/shadow|etc/passwd) ^&lt;HOST&gt; -.*GET.*(cmd\.exe|command\.com) ^&lt;HOST&gt; -.*GET.*sql.*dump ignoreregex = # /etc/fail2ban/filter.d/wordpress-security.conf # WordPress 보안 전용 필터 [Definition] failregex = ^&lt;HOST&gt; .*POST.*/wp-login\.php.* 200 ^&lt;HOST&gt; .*POST.*/wp-admin/admin-ajax\.php.* 400 ^&lt;HOST&gt; .*GET.*/wp-admin.* ^&lt;HOST&gt; .*GET.*/wp-content/.*\.php ^&lt;HOST&gt; .*GET.*\?author=\d+ ^&lt;HOST&gt; .*GET.*/xmlrpc\.php ignoreregex = ^&lt;HOST&gt; .*POST.*/wp-login\.php.* "WordPress/.*" # /etc/fail2ban/filter.d/ddos.conf # DDoS 공격 감지 필터 [Definition] failregex = ^&lt;HOST&gt; -.*GET.* ignoreregex = # /etc/fail2ban/filter.d/port-scan.conf # 포트 스캔 감지 필터 [Definition] failregex = ^.*kernel:.*IN=.*SRC=&lt;HOST&gt;.*DPT=(1|7|9|11|15|70|79|80|109|110|143|443|993|995).* ^.*kernel:.*SRC=&lt;HOST&gt;.*DPT=(23|53|111|137|139|445|513|514|515|993|995|1433|1521|3389).* ignoreregex = Fail2Ban 고급 관리 스크립트 #!/bin/bash # /usr/local/bin/fail2ban-manager.sh # Fail2Ban 고급 관리 도구 ACTION=$1 JAIL=$2 IP=$3 # 색상 정의 RED='\033[0;31m' GREEN='\033[0;32m' YELLOW='\033[1;33m' BLUE='\033[0;34m' NC='\033[0m' # No Color print_color() { echo -e "${2}${1}${NC}" } check_fail2ban() { if ! systemctl is-active --quiet fail2ban; then print_color "ERROR: Fail2Ban is not running" "$RED" exit 1 fi } case $ACTION in "status") check_fail2ban echo "=== Fail2Ban Status ===" fail2ban-client status if [ -n "$JAIL" ]; then echo "" echo "=== Jail: $JAIL ===" fail2ban-client status "$JAIL" fi ;; "ban") if [ -z "$JAIL" ] || [ -z "$IP" ]; then echo "Usage: $0 ban &lt;jail&gt; &lt;ip&gt;" exit 1 fi check_fail2ban print_color "Banning IP $IP in jail $JAIL..." "$YELLOW" fail2ban-client set "$JAIL" banip "$IP" print_color "IP $IP banned successfully" "$GREEN" ;; "unban") if [ -z "$IP" ]; then echo "Usage: $0 unban &lt;jail|all&gt; &lt;ip&gt;" exit 1 fi check_fail2ban if [ "$JAIL" = "all" ]; then print_color "Unbanning IP $IP from all jails..." "$YELLOW" for jail in $(fail2ban-client status | grep "Jail list:" | cut -d: -f2 | tr ',' ' '); do jail=$(echo $jail | xargs) # trim whitespace fail2ban-client set "$jail" unbanip "$IP" 2&gt;/dev/null || true done else print_color "Unbanning IP $IP from jail $JAIL..." "$YELLOW" fail2ban-client set "$JAIL" unbanip "$IP" fi print_color "IP $IP unbanned successfully" "$GREEN" ;; "list-banned") check_fail2ban if [ -n "$JAIL" ]; then echo "=== Banned IPs in jail: $JAIL ===" fail2ban-client get "$JAIL" banip else echo "=== All Banned IPs ===" for jail in $(fail2ban-client status | grep "Jail list:" | cut -d: -f2 | tr ',' ' '); do jail=$(echo $jail | xargs) banned=$(fail2ban-client get "$jail" banip 2&gt;/dev/null) if [ -n "$banned" ] &amp;&amp; [ "$banned" != "[]" ]; then echo "Jail: $jail" echo "$banned" echo "" fi done fi ;; "stats") check_fail2ban echo "=== Fail2Ban Statistics ===" echo "" # 전체 통계 echo "Active jails:" fail2ban-client status | grep "Jail list:" | cut -d: -f2 echo "" echo "Jail statistics:" for jail in $(fail2ban-client status | grep "Jail list:" | cut -d: -f2 | tr ',' ' '); do jail=$(echo $jail | xargs) status=$(fail2ban-client status "$jail" 2&gt;/dev/null) if [ $? -eq 0 ]; then currently_failed=$(echo "$status" | grep "Currently failed:" | awk '{print $NF}') total_failed=$(echo "$status" | grep "Total failed:" | awk '{print $NF}') currently_banned=$(echo "$status" | grep "Currently banned:" | awk '{print $NF}') total_banned=$(echo "$status" | grep "Total banned:" | awk '{print $NF}') echo " $jail: Failed=$currently_failed/$total_failed, Banned=$currently_banned/$total_banned" fi done echo "" echo "Top banned IPs:" grep "Ban " /var/log/fail2ban.log 2&gt;/dev/null | \ awk '{print $(NF-1)}' | sort | uniq -c | sort -nr | head -10 ;; "top-attackers") DAYS=${JAIL:-7} echo "=== Top Attackers (Last $DAYS days) ===" # 지정된 날짜부터의 로그 분석 if [ $DAYS -gt 0 ]; then DATE_FILTER="-since \"$DAYS days ago\"" else DATE_FILTER="" fi # 로그에서 공격 IP 추출 및 분석 eval journalctl -u fail2ban $DATE_FILTER 2&gt;/dev/null | \ grep "Ban " | \ awk '{print $(NF-1)}' | \ sort | uniq -c | sort -nr | head -20 | \ while read count ip; do # IP 지역 정보 조회 (geoip 사용, 설치된 경우) if command -v geoiplookup &gt;/dev/null 2&gt;&amp;1; then country=$(geoiplookup "$ip" 2&gt;/dev/null | cut -d: -f2 | xargs) else country="Unknown" fi printf "%-6s %-15s %s\n" "$count" "$ip" "$country" done ;; "analyze") HOURS=${JAIL:-24} echo "=== Fail2Ban Analysis (Last $HOURS hours) ===" # 최근 활동 분석 eval journalctl -u fail2ban --since "$HOURS hours ago" 2&gt;/dev/null | \ grep -E "(Ban|Unban)" | \ awk '{ if ($0 ~ /Ban /) bans++ if ($0 ~ /Unban/) unbans++ } END { print "Total bans: " (bans ? bans : 0) print "Total unbans: " (unbans ? unbans : 0) print "Net banned: " ((bans ? bans : 0) - (unbans ? unbans : 0)) }' echo "" echo "Activity by jail:" eval journalctl -u fail2ban --since "$HOURS hours ago" 2&gt;/dev/null | \ grep "Ban " | \ awk '{ # jail 이름 추출 (로그 형식에 따라 조정 필요) match($0, /\[([^\]]+)\]/, arr) if (arr[1]) jails[arr[1]]++ } END { for (jail in jails) { print " " jail ": " jails[jail] } }' ;; "reload") print_color "Reloading Fail2Ban configuration..." "$YELLOW" systemctl reload fail2ban print_color "Fail2Ban reloaded successfully" "$GREEN" ;; "test-filter") if [ -z "$JAIL" ]; then echo "Usage: $0 test-filter &lt;filter-name&gt; [log-file]" exit 1 fi FILTER=$JAIL LOGFILE=${IP:-/var/log/auth.log} echo "=== Testing filter: $FILTER ===" echo "Log file: $LOGFILE" echo "" fail2ban-regex "$LOGFILE" "/etc/fail2ban/filter.d/${FILTER}.conf" ;; "whitelist") if [ -z "$JAIL" ] || [ -z "$IP" ]; then echo "Usage: $0 whitelist &lt;add|remove|list&gt; &lt;ip|network&gt;" exit 1 fi WHITELIST_ACTION=$JAIL TARGET_IP=$IP case $WHITELIST_ACTION in "add") print_color "Adding $TARGET_IP to whitelist..." "$YELLOW" # jail.local의 ignoreip에 추가 if grep -q "ignoreip.*$TARGET_IP" /etc/fail2ban/jail.local; then print_color "IP $TARGET_IP is already whitelisted" "$BLUE" else sed -i "/^ignoreip = / s/$/ $TARGET_IP/" /etc/fail2ban/jail.local systemctl reload fail2ban print_color "IP $TARGET_IP added to whitelist" "$GREEN" fi ;; "remove") print_color "Removing $TARGET_IP from whitelist..." "$YELLOW" sed -i "s/ $TARGET_IP//g" /etc/fail2ban/jail.local systemctl reload fail2ban print_color "IP $TARGET_IP removed from whitelist" "$GREEN" ;; "list") echo "=== Current Whitelist ===" grep "^ignoreip" /etc/fail2ban/jail.local ;; esac ;; "backup") BACKUP_DIR="/etc/fail2ban/backup/$(date +%Y%m%d-%H%M%S)" mkdir -p "$BACKUP_DIR" cp -r /etc/fail2ban/jail.local "$BACKUP_DIR/" 2&gt;/dev/null || true cp -r /etc/fail2ban/filter.d/* "$BACKUP_DIR/" 2&gt;/dev/null || true cp -r /etc/fail2ban/action.d/* "$BACKUP_DIR/" 2&gt;/dev/null || true print_color "Fail2Ban configuration backed up to: $BACKUP_DIR" "$GREEN" ;; *) echo "Usage: $0 {status|ban|unban|list-banned|stats|top-attackers|analyze|reload|test-filter|whitelist|backup} [options]" echo "" echo "Commands:" echo " status [jail] - Show Fail2Ban status" echo " ban &lt;jail&gt; &lt;ip&gt; - Ban IP in specific jail" echo " unban &lt;jail|all&gt; &lt;ip&gt; - Unban IP from jail or all jails" echo " list-banned [jail] - List banned IPs" echo " stats - Show comprehensive statistics" echo " top-attackers [days] - Show top attacking IPs" echo " analyze [hours] - Analyze recent activity" echo " reload - Reload configuration" echo " test-filter &lt;filter&gt; [logfile] - Test filter regex" echo " whitelist &lt;add|remove|list&gt; &lt;ip&gt; - Manage whitelist" echo " backup - Backup configuration" echo "" echo "Examples:" echo " $0 status sshd" echo " $0 ban sshd 192.168.1.100" echo " $0 unban all 192.168.1.100" echo " $0 top-attackers 30" echo " $0 test-filter sshd" exit 1 ;; esac 다음 편 예고 다음 포스트에서는 Wazuh SIEM과 컨테이너 보안을 상세히 다룰 예정입니다: Wazuh 완전 구축 및 설정 실시간 위협 탐지 룰 작성 Docker/Kubernetes 보안 강화 컴플라이언스 및 감사 로그 관리 AIDE와 Fail2Ban으로 강력한 침입 탐지 시스템을 완성하셨나요? 🔍🛡️]]></summary></entry><entry><title type="html">네트워킹 완전 가이드 5편 - 네트워크 보안과 트러블슈팅 | Complete Network Guide Part 5 - Network Security &amp;amp; Troubleshooting</title><link href="https://leeyonghe.github.io/infra-blog/blog/2025/03/07/networking-guide-part5.html" rel="alternate" type="text/html" title="네트워킹 완전 가이드 5편 - 네트워크 보안과 트러블슈팅 | Complete Network Guide Part 5 - Network Security &amp;amp; Troubleshooting" /><published>2025-03-07T03:00:00+00:00</published><updated>2025-03-07T03:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2025/03/07/networking-guide-part5</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2025/03/07/networking-guide-part5.html"><![CDATA[<p>네트워크 보안의 최신 기술과 고급 트러블슈팅 기법을 실무 중심으로 완전히 마스터해보겠습니다.</p>

<h2 id="차세대-방화벽-ngfw--next-generation-firewall">차세대 방화벽 (NGFW) | Next-Generation Firewall</h2>

<h3 id="-ngfw-기능과-특징">🔥 NGFW 기능과 특징</h3>

<h4 id="전통-방화벽-vs-ngfw-비교">전통 방화벽 vs NGFW 비교</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traditional Firewall:
- L3/L4 패킷 필터링 <span class="o">(</span>IP, Port<span class="o">)</span>
- Stateful 연결 추적
- NAT/PAT 기능

Next-Generation Firewall <span class="o">(</span>NGFW<span class="o">)</span>:
- Application Awareness <span class="o">(</span>L7<span class="o">)</span>
- Intrusion Prevention <span class="o">(</span>IPS<span class="o">)</span>
- SSL/TLS Decryption
- User Identity Integration
- Advanced Threat Protection
- Sandboxing
</code></pre></div></div>

<h4 id="palo-alto-ngfw-설정-실습">Palo Alto NGFW 설정 실습</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 보안 정책 설정</span>
<span class="c"># 애플리케이션 기반 정책</span>
configure
<span class="nb">set </span>rulebase security rules <span class="s2">"Allow-Office365"</span> from any
<span class="nb">set </span>rulebase security rules <span class="s2">"Allow-Office365"</span> to any
<span class="nb">set </span>rulebase security rules <span class="s2">"Allow-Office365"</span> <span class="nb">source </span>any
<span class="nb">set </span>rulebase security rules <span class="s2">"Allow-Office365"</span> destination any
<span class="nb">set </span>rulebase security rules <span class="s2">"Allow-Office365"</span> application <span class="o">[</span> ms-office365 outlook-web-access <span class="o">]</span>
<span class="nb">set </span>rulebase security rules <span class="s2">"Allow-Office365"</span> service application-default
<span class="nb">set </span>rulebase security rules <span class="s2">"Allow-Office365"</span> action allow

<span class="c"># 사용자 기반 정책</span>
<span class="nb">set </span>rulebase security rules <span class="s2">"Block-Social-Media"</span> from trust
<span class="nb">set </span>rulebase security rules <span class="s2">"Block-Social-Media"</span> to untrust
<span class="nb">set </span>rulebase security rules <span class="s2">"Block-Social-Media"</span> source-user <span class="o">[</span> <span class="s2">"DOMAIN</span><span class="se">\s</span><span class="s2">ales-team"</span> <span class="o">]</span>
<span class="nb">set </span>rulebase security rules <span class="s2">"Block-Social-Media"</span> application <span class="o">[</span> facebook twitter instagram <span class="o">]</span>
<span class="nb">set </span>rulebase security rules <span class="s2">"Block-Social-Media"</span> action deny

<span class="c"># SSL Decryption 정책</span>
<span class="nb">set </span>shared ssl-decrypt ssl-decrypt-policy <span class="s2">"Decrypt-Inbound"</span> rules <span class="s2">"web-traffic"</span>
<span class="nb">set </span>shared ssl-decrypt ssl-decrypt-policy <span class="s2">"Decrypt-Inbound"</span> rules <span class="s2">"web-traffic"</span> category <span class="o">[</span> <span class="s2">"business-and-economy"</span> <span class="s2">"computer-and-internet-info"</span> <span class="o">]</span>
<span class="nb">set </span>shared ssl-decrypt ssl-decrypt-policy <span class="s2">"Decrypt-Inbound"</span> rules <span class="s2">"web-traffic"</span> action decrypt
</code></pre></div></div>

<h4 id="pfsense-오픈소스-방화벽-설정">pfSense 오픈소스 방화벽 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># pfSense 패키지 설치</span>
pkg <span class="nb">install </span>pfSense-pkg-suricata
pkg <span class="nb">install </span>pfSense-pkg-pfBlockerNG

<span class="c"># Suricata IPS 설정</span>
<span class="c"># /usr/local/etc/suricata/suricata.yaml</span>
HOME_NET: <span class="s2">"[192.168.1.0/24,10.0.0.0/8]"</span>
EXTERNAL_NET: <span class="s2">"!</span><span class="nv">$HOME_NET</span><span class="s2">"</span>

rule-files:
  - emerging-threats.rules
  - botcc.rules
  - emerging-malware.rules

<span class="c"># 사용자 정의 룰</span>
<span class="c"># /usr/local/etc/suricata/rules/local.rules</span>
alert tcp <span class="nv">$HOME_NET</span> any -&gt; <span class="nv">$EXTERNAL_NET</span> 80 <span class="o">(</span>msg:<span class="s2">"HTTP outbound connection"</span><span class="p">;</span> sid:1000001<span class="p">;</span> rev:1<span class="p">;</span><span class="o">)</span>
alert tcp any any -&gt; <span class="nv">$HOME_NET</span> 22 <span class="o">(</span>msg:<span class="s2">"SSH connection attempt"</span><span class="p">;</span> threshold: <span class="nb">type </span>both, track by_src, count 5, seconds 60<span class="p">;</span> sid:1000002<span class="p">;</span> rev:1<span class="p">;</span><span class="o">)</span>

<span class="c"># pfBlockerNG GeoIP 차단</span>
<span class="c"># 러시아, 중국, 북한 IP 대역 차단</span>
Asia_Russia: Deny_Inbound, Deny_Outbound
Asia_China: Deny_Inbound, Permit_Outbound
Asia_North_Korea: Deny_Both
</code></pre></div></div>

<h3 id="️-idsips-시스템">🛡️ IDS/IPS 시스템</h3>

<h4 id="suricata-idsips-배포">Suricata IDS/IPS 배포</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Suricata 설치 (Ubuntu)</span>
<span class="nb">sudo </span>add-apt-repository ppa:oisf/suricata-stable
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>suricata

<span class="c"># 네트워크 인터페이스 설정</span>
<span class="c"># /etc/suricata/suricata.yaml</span>
af-packet:
  - interface: eth0
    cluster-id: 99
    cluster-type: cluster_flow
    defrag: <span class="nb">yes
    </span>use-mmap: <span class="nb">yes
    </span>mmap-locked: <span class="nb">yes</span>

<span class="c"># 룰셋 업데이트</span>
<span class="nb">sudo </span>suricata-update
<span class="nb">sudo </span>suricata-update list-sources
<span class="nb">sudo </span>suricata-update enable-source et/pro  <span class="c"># Emerging Threats Pro</span>
<span class="nb">sudo </span>suricata-update enable-source ptresearch/attackdetection

<span class="c"># 커스텀 룰 작성</span>
<span class="c"># /etc/suricata/rules/local.rules</span>
<span class="c"># DDoS 공격 탐지</span>
alert tcp any any -&gt; <span class="nv">$HOME_NET</span> any <span class="o">(</span>msg:<span class="s2">"Possible DDoS attack"</span><span class="p">;</span> flags:S<span class="p">;</span> threshold: <span class="nb">type </span>both, track by_src, count 100, seconds 10<span class="p">;</span> sid:1000003<span class="p">;</span> rev:1<span class="p">;</span><span class="o">)</span>

<span class="c"># SQL 인젝션 탐지  </span>
alert http any any -&gt; <span class="nv">$HOME_NET</span> any <span class="o">(</span>msg:<span class="s2">"SQL Injection Attack"</span><span class="p">;</span> content:<span class="s2">"union select"</span><span class="p">;</span> nocase<span class="p">;</span> http_uri<span class="p">;</span> sid:1000004<span class="p">;</span> rev:1<span class="p">;</span><span class="o">)</span>

<span class="c"># 크리덴셜 스터핑 탐지</span>
alert http any any -&gt; <span class="nv">$HOME_NET</span> any <span class="o">(</span>msg:<span class="s2">"Credential Stuffing Attack"</span><span class="p">;</span> content:<span class="s2">"POST"</span><span class="p">;</span> http_method<span class="p">;</span> threshold: <span class="nb">type </span>both, track by_src, count 50, seconds 60<span class="p">;</span> sid:1000005<span class="p">;</span> rev:1<span class="p">;</span><span class="o">)</span>
</code></pre></div></div>

<h4 id="zeek-bro-네트워크-분석">Zeek (Bro) 네트워크 분석</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Zeek 설치</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>zeek

<span class="c"># 네트워크 인터페이스 설정</span>
<span class="c"># /opt/zeek/etc/node.cfg</span>
<span class="o">[</span>zeek]
<span class="nb">type</span><span class="o">=</span>standalone
<span class="nv">host</span><span class="o">=</span>localhost
<span class="nv">interface</span><span class="o">=</span>eth0

<span class="c"># 커스텀 스크립트 작성</span>
<span class="c"># /opt/zeek/share/zeek/site/local.zeek</span>
@load base/protocols/http
@load base/protocols/dns
@load base/protocols/ssl

<span class="c"># HTTP 트래픽 모니터링</span>
event http_request<span class="o">(</span>c: connection, method: string, original_URI: string, unescaped_URI: string, version: string<span class="o">)</span>
<span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span> /<span class="se">\.</span><span class="o">(</span>exe|zip|rar|7z<span class="o">)</span><span class="nv">$/</span> <span class="k">in </span>unescaped_URI <span class="o">)</span>
        print <span class="nb">fmt</span><span class="o">(</span><span class="s2">"%s 다운로드: %s -&gt; %s%s"</span>, 
                 strftime<span class="o">(</span><span class="s2">"%Y-%m-%d %H:%M:%S"</span>, network_time<span class="o">())</span>, 
                 c<span class="nv">$id$orig_h</span>, c<span class="nv">$id$resp_h</span>, unescaped_URI<span class="o">)</span><span class="p">;</span>
<span class="o">}</span>

<span class="c"># DNS 모니터링</span>
event dns_request<span class="o">(</span>c: connection, msg: dns_msg, query: string, qtype: count, qclass: count<span class="o">)</span>
<span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span> /[0-9]<span class="o">{</span>1,3<span class="o">}</span><span class="se">\.</span><span class="o">[</span>0-9]<span class="o">{</span>1,3<span class="o">}</span><span class="se">\.</span><span class="o">[</span>0-9]<span class="o">{</span>1,3<span class="o">}</span><span class="se">\.</span><span class="o">[</span>0-9]<span class="o">{</span>1,3<span class="o">}</span><span class="se">\.</span><span class="k">in</span><span class="nt">-addr</span><span class="se">\.</span>arpa/ <span class="o">!</span><span class="k">in </span>query <span class="o">)</span>
    <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> /<span class="se">\.</span>tk<span class="nv">$|</span><span class="se">\.</span>ml<span class="nv">$|</span><span class="se">\.</span>ga<span class="nv">$|</span><span class="se">\.</span>cf<span class="nv">$/</span> <span class="k">in </span>query <span class="o">)</span>
            print <span class="nb">fmt</span><span class="o">(</span><span class="s2">"의심스러운 도메인 질의: %s -&gt; %s"</span>, c<span class="nv">$id$orig_h</span>, query<span class="o">)</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c"># 서비스 시작</span>
<span class="nb">sudo </span>zeekctl deploy
<span class="nb">sudo </span>zeekctl status
</code></pre></div></div>

<h2 id="제로-트러스트-네트워크--zero-trust-network">제로 트러스트 네트워크 | Zero Trust Network</h2>

<h3 id="-제로-트러스트-아키텍처">🔒 제로 트러스트 아키텍처</h3>

<h4 id="제로-트러스트-원칙">제로 트러스트 원칙</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Never Trust, Always Verify:
- 기본적으로 모든 트래픽 차단
- 명시적 검증과 인가
- 최소 권한 원칙

Verify Explicitly:
- 사용자 신원 확인
- 디바이스 상태 검증
- 네트워크 위치 무관

Least Privileged Access:
- Just-in-Time <span class="o">(</span>JIT<span class="o">)</span> 액세스
- Just-Enough-Access <span class="o">(</span>JEA<span class="o">)</span>
- 위험 기반 적응형 정책

Assume Breach:
- 세그멘테이션과 격리
- 횡적 이동 차단
- 지속적 모니터링
</code></pre></div></div>

<h4 id="마이크로-세그멘테이션-구현">마이크로 세그멘테이션 구현</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Cisco ACI 마이크로 세그멘테이션</span>
<span class="c"># 애플리케이션 프로파일 생성</span>
apic1# configure
apic1<span class="o">(</span>config<span class="o">)</span><span class="c"># tenant production</span>
apic1<span class="o">(</span>config-tenant<span class="o">)</span><span class="c"># application app-web</span>
apic1<span class="o">(</span>config-tenant-app<span class="o">)</span><span class="c"># epg web-tier</span>
apic1<span class="o">(</span>config-tenant-app-epg<span class="o">)</span><span class="c"># bridge-domain web-bd</span>
apic1<span class="o">(</span>config-tenant-app-epg<span class="o">)</span><span class="c"># exit</span>

<span class="c"># 계약 (Contract) 정의</span>
apic1<span class="o">(</span>config-tenant-app<span class="o">)</span><span class="c"># contract web-to-db</span>
apic1<span class="o">(</span>config-tenant-app-contract<span class="o">)</span><span class="c"># subject db-access</span>
apic1<span class="o">(</span>config-tenant-app-contract-subject<span class="o">)</span><span class="c"># filter mysql-filter</span>
apic1<span class="o">(</span>config-tenant-app-contract-subject-filter<span class="o">)</span><span class="c"># entry mysql</span>
apic1<span class="o">(</span>config-tenant-app-contract-subject-filter-entry<span class="o">)</span><span class="c"># ether-type ip</span>
apic1<span class="o">(</span>config-tenant-app-contract-subject-filter-entry<span class="o">)</span><span class="c"># ip-protocol tcp</span>
apic1<span class="o">(</span>config-tenant-app-contract-subject-filter-entry<span class="o">)</span><span class="c"># destination-port-range from 3306 to 3306</span>

<span class="c"># VMware NSX 마이크로 세그멘테이션</span>
<span class="c"># 분산 방화벽 정책</span>
nsxcli&gt; configure firewall
nsxcli<span class="o">(</span>firewall<span class="o">)&gt;</span> add rule web-tier-protection
nsxcli<span class="o">(</span>firewall-rule<span class="o">)&gt;</span> <span class="nb">set source </span>security-group web-servers
nsxcli<span class="o">(</span>firewall-rule<span class="o">)&gt;</span> <span class="nb">set </span>destination security-group db-servers
nsxcli<span class="o">(</span>firewall-rule<span class="o">)&gt;</span> <span class="nb">set </span>service MYSQL
nsxcli<span class="o">(</span>firewall-rule<span class="o">)&gt;</span> <span class="nb">set </span>action allow
nsxcli<span class="o">(</span>firewall-rule<span class="o">)&gt;</span> <span class="nb">set </span>applied-to security-group web-servers
nsxcli<span class="o">(</span>firewall-rule<span class="o">)&gt;</span> commit
</code></pre></div></div>

<h4 id="kubernetes-네트워크-정책">Kubernetes 네트워크 정책</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 네임스페이스 격리 정책</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">NetworkPolicy</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default-deny-all</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">podSelector</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">policyTypes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Ingress</span>
  <span class="pi">-</span> <span class="s">Egress</span>

<span class="nn">---</span>
<span class="c1"># 웹 애플리케이션 정책</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">NetworkPolicy</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">web-app-policy</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">podSelector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">web-frontend</span>
  <span class="na">policyTypes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Ingress</span>
  <span class="pi">-</span> <span class="s">Egress</span>
  <span class="na">ingress</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">from</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">namespaceSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">ingress-nginx</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
  <span class="na">egress</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">to</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">podSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">app</span><span class="pi">:</span> <span class="s">api-backend</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">3000</span>
  <span class="pi">-</span> <span class="na">to</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">namespaceSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">kube-system</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">UDP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">53</span>  <span class="c1"># DNS</span>

<span class="nn">---</span>
<span class="c1"># 데이터베이스 정책</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">NetworkPolicy</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">database-policy</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">podSelector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">mysql-db</span>
  <span class="na">policyTypes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Ingress</span>
  <span class="na">ingress</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">from</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">podSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">app</span><span class="pi">:</span> <span class="s">api-backend</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">3306</span>
</code></pre></div></div>

<h2 id="네트워크-포렌식--network-forensics">네트워크 포렌식 | Network Forensics</h2>

<h3 id="-패킷-분석과-증거-수집">🔍 패킷 분석과 증거 수집</h3>

<h4 id="wireshark-고급-분석-기법">Wireshark 고급 분석 기법</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 의심스러운 트래픽 필터링</span>
<span class="c"># 대량 데이터 전송 탐지</span>
tcp.len <span class="o">&gt;</span> 1400 and ip.src <span class="o">==</span> 192.168.1.100

<span class="c"># DNS 터널링 탐지</span>
dns.qry.name contains <span class="s2">"."</span>
dns.qry.name matches <span class="s2">"^[a-f0-9]{20,}</span><span class="se">\\</span><span class="s2">."</span>

<span class="c"># HTTP POST 데이터 exfiltration</span>
http.request.method <span class="o">==</span> <span class="s2">"POST"</span> and http.content_length <span class="o">&gt;</span> 10000

<span class="c"># 비정상적인 포트 사용</span>
tcp.port <span class="o">==</span> 443 and not ssl.handshake.type
tcp.port <span class="o">==</span> 80 and ssl.handshake.type

<span class="c"># 커맨드 앤 컨트롤 통신 패턴</span>
<span class="o">(</span>tcp.flags.push <span class="o">==</span> 1<span class="o">)</span> and <span class="o">(</span>tcp.len &lt; 100<span class="o">)</span> and <span class="o">(</span>tcp.len <span class="o">&gt;</span> 10<span class="o">)</span>

<span class="c"># 통계 분석을 위한 tshark 사용</span>
<span class="c"># 상위 통신 호스트</span>
tshark <span class="nt">-r</span> capture.pcap <span class="nt">-q</span> <span class="nt">-z</span> conv,ip | <span class="nb">sort</span> <span class="nt">-k7</span> <span class="nt">-nr</span> | <span class="nb">head</span> <span class="nt">-20</span>

<span class="c"># 프로토콜 분포</span>
tshark <span class="nt">-r</span> capture.pcap <span class="nt">-q</span> <span class="nt">-z</span> prot,colinfo

<span class="c"># 시간별 트래픽 분석</span>
tshark <span class="nt">-r</span> capture.pcap <span class="nt">-T</span> fields <span class="nt">-e</span> frame.time <span class="nt">-e</span> ip.src <span class="nt">-e</span> ip.dst <span class="nt">-e</span> tcp.srcport <span class="nt">-e</span> tcp.dstport | 
<span class="nb">awk</span> <span class="s1">'{print $1 " " $2 ":" $4 " -&gt; " $3 ":" $5}'</span> | <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span>
</code></pre></div></div>

<h4 id="네트워크-플로우-분석-nfcapd">네트워크 플로우 분석 (nfcapd)</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># nfcapd 설정 및 시작</span>
nfcapd <span class="nt">-w</span> <span class="nt">-D</span> <span class="nt">-p</span> 9995 <span class="nt">-l</span> /var/cache/nfcapd

<span class="c"># 라우터에서 NetFlow 활성화 (Cisco)</span>
interface FastEthernet0/1
 ip flow ingress
 ip flow egress

ip flow-export <span class="nb">source </span>FastEthernet0/1
ip flow-export version 9
ip flow-export destination 192.168.1.100 9995

<span class="c"># 플로우 데이터 분석</span>
<span class="c"># 상위 통신량 호스트</span>
nfdump <span class="nt">-r</span> /var/cache/nfcapd/nfcapd.<span class="k">*</span> <span class="nt">-s</span> srcip/bytes <span class="nt">-n</span> 20

<span class="c"># 특정 시간대 분석</span>
nfdump <span class="nt">-r</span> /var/cache/nfcapd/nfcapd.<span class="k">*</span> <span class="nt">-t</span> 2024-03-30.10:00:00-2024-03-30.11:00:00 <span class="nt">-s</span> dstip/packets

<span class="c"># 의심스러운 포트 사용 </span>
nfdump <span class="nt">-r</span> /var/cache/nfcapd/nfcapd.<span class="k">*</span> <span class="s1">'port &gt; 10000 and port &lt; 65000'</span> <span class="nt">-s</span> srcip/flows

<span class="c"># 대용량 전송 탐지</span>
nfdump <span class="nt">-r</span> /var/cache/nfcapd/nfcapd.<span class="k">*</span> <span class="s1">'bytes &gt; 100000000'</span> <span class="nt">-o</span> extended
</code></pre></div></div>

<h3 id="️-위협-헌팅-threat-hunting">🕵️ 위협 헌팅 (Threat Hunting)</h3>

<h4 id="elk-스택-기반-위협-헌팅">ELK 스택 기반 위협 헌팅</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Logstash 설정 - 네트워크 로그 파싱</span>
<span class="c1"># /etc/logstash/conf.d/network-logs.conf</span>
<span class="s">input {</span>
  <span class="s">beats {</span>
    <span class="s">port =&gt; </span><span class="m">5044</span>
  <span class="err">}</span>
  <span class="s">syslog {</span>
    <span class="s">port =&gt; </span><span class="m">514</span>
    <span class="s">type =&gt; "firewall"</span>
  <span class="s">}</span>
<span class="err">}</span>

<span class="s">filter {</span>
  <span class="s">if [type] == "firewall" {</span>
    <span class="s">grok {</span>
      <span class="s">match =&gt; {</span> 
        <span class="s">"message" =&gt; "%{TIMESTAMP_ISO8601:timestamp} %{WORD:device} %{WORD:action} %{IP:src_ip}:%{INT:src_port} -&gt; %{IP:dst_ip}:%{INT:dst_port} %{WORD:protocol}"</span>
      <span class="s">}</span>
    <span class="s">}</span>
    
    <span class="s">geoip {</span>
      <span class="s">source =&gt; "src_ip"</span>
      <span class="s">target =&gt; "src_geoip"</span>
    <span class="s">}</span>
    
    <span class="s">if [src_geoip][country_name] in ["Russia", "China", "North Korea"] {</span>
      <span class="s">mutate {</span>
        <span class="s">add_tag =&gt; [ "suspicious_geo" ]</span>
      <span class="s">}</span>
    <span class="s">}</span>
  <span class="s">}</span>
<span class="err">}</span>

<span class="s">output {</span>
  <span class="s">elasticsearch {</span>
    <span class="s">hosts =&gt; ["localhost:9200"]</span>
    <span class="s">index =&gt; "network-logs-%{+YYYY.MM.dd}"</span>
  <span class="s">}</span>
<span class="err">}</span>
</code></pre></div></div>

<h4 id="kibana-위협-헌팅-쿼리">Kibana 위협 헌팅 쿼리</h4>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"query"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"bool"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"must"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"range"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"@timestamp"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="nl">"gte"</span><span class="p">:</span><span class="w"> </span><span class="s2">"now-1h"</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"terms"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"suspicious_geo"</span><span class="p">]</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"should"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"range"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"bytes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="nl">"gte"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000000</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"script"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"script"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"doc['dst_port'].value &gt; 10000 &amp;&amp; doc['dst_port'].value &lt; 65000"</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"aggs"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"suspicious_ips"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"terms"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src_ip"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"size"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"aggs"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"unique_ports"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"cardinality"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dst_port"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"total_bytes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"sum"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bytes"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="yara-룰-기반-네트워크-탐지">YARA 룰 기반 네트워크 탐지</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># YARA 룰 예시 - 악성코드 통신 패턴</span>
rule APT_Communication_Pattern
<span class="o">{</span>
    meta:
        description <span class="o">=</span> <span class="s2">"APT 그룹 통신 패턴 탐지"</span>
        author <span class="o">=</span> <span class="s2">"Security Team"</span>
        <span class="nb">date</span> <span class="o">=</span> <span class="s2">"2024-03-30"</span>
        
    strings:
        <span class="nv">$user_agent</span> <span class="o">=</span> <span class="s2">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"</span>
        <span class="nv">$uri_pattern</span> <span class="o">=</span> /<span class="se">\/</span><span class="o">[</span>a-f0-9]<span class="o">{</span>8<span class="o">}</span><span class="se">\/</span><span class="o">[</span>a-f0-9]<span class="o">{</span>8<span class="o">}</span>/
        <span class="nv">$post_data</span> <span class="o">=</span> <span class="o">{</span> 48 54 54 50 2F 31 2E 31 20 32 30 30 20 4F 4B <span class="o">}</span>  // <span class="s2">"HTTP/1.1 200 OK"</span>
        
    condition:
        <span class="nv">$user_agent</span> and <span class="nv">$uri_pattern</span> and <span class="nv">$post_data</span>
<span class="o">}</span>

rule DNS_Tunneling
<span class="o">{</span>
    meta:
        description <span class="o">=</span> <span class="s2">"DNS 터널링 패턴 탐지"</span>
        
    strings:
        <span class="nv">$long_subdomain</span> <span class="o">=</span> /[a-zA-Z0-9]<span class="o">{</span>50,<span class="o">}</span><span class="se">\.</span>.<span class="k">*</span><span class="se">\.</span><span class="o">(</span>com|net|org<span class="o">)</span>/
        <span class="nv">$base64_pattern</span> <span class="o">=</span> /[A-Za-z0-9+<span class="se">\/</span><span class="o">]{</span>20,<span class="o">}={</span>0,2<span class="o">}</span>/
        
    condition:
        <span class="nv">$long_subdomain</span> or <span class="nv">$base64_pattern</span>
<span class="o">}</span>

<span class="c"># 네트워크 트래픽에 YARA 적용</span>
suricata <span class="nt">-c</span> /etc/suricata/suricata.yaml <span class="nt">-i</span> eth0 <span class="nt">--runmode</span> single
</code></pre></div></div>

<h2 id="고급-트러블슈팅--advanced-troubleshooting">고급 트러블슈팅 | Advanced Troubleshooting</h2>

<h3 id="-네트워크-성능-문제-해결">🔧 네트워크 성능 문제 해결</h3>

<h4 id="대역폭과-지연시간-분석">대역폭과 지연시간 분석</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># iperf3를 이용한 성능 측정</span>
<span class="c"># 서버 측</span>
iperf3 <span class="nt">-s</span> <span class="nt">-p</span> 5201

<span class="c"># 클라이언트 측 - TCP 테스트</span>
iperf3 <span class="nt">-c</span> 192.168.1.100 <span class="nt">-t</span> 30 <span class="nt">-i</span> 1 <span class="nt">-P</span> 4
<span class="c"># -t: 테스트 시간, -i: 인터벌, -P: 병렬 연결</span>

<span class="c"># UDP 테스트 (패킷 손실 확인)</span>
iperf3 <span class="nt">-c</span> 192.168.1.100 <span class="nt">-u</span> <span class="nt">-b</span> 100M <span class="nt">-t</span> 30

<span class="c"># 양방향 테스트</span>
iperf3 <span class="nt">-c</span> 192.168.1.100 <span class="nt">--bidir</span> <span class="nt">-t</span> 30

<span class="c"># MTU 크기 최적화 테스트</span>
ping <span class="nt">-M</span> <span class="k">do</span> <span class="nt">-s</span> 1472 192.168.1.100  <span class="c"># Linux</span>
ping <span class="nt">-f</span> <span class="nt">-l</span> 1472 192.168.1.100     <span class="c"># Windows</span>

<span class="c"># 점진적 MTU 테스트 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="k">for </span>size <span class="k">in</span> <span class="o">{</span>1200..1500..50<span class="o">}</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"Testing MTU size: </span><span class="nv">$size</span><span class="s2">"</span>
    ping <span class="nt">-M</span> <span class="k">do</span> <span class="nt">-s</span> <span class="nv">$size</span> <span class="nt">-c</span> 1 192.168.1.100 <span class="o">&gt;</span> /dev/null 2&gt;&amp;1
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"✅ MTU </span><span class="nv">$size</span><span class="s2">: Success"</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"❌ MTU </span><span class="nv">$size</span><span class="s2">: Failed"</span>
    <span class="k">fi
done</span>
</code></pre></div></div>

<h4 id="네트워크-지연시간-상세-분석">네트워크 지연시간 상세 분석</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># hping3를 이용한 다양한 테스트</span>
<span class="c"># TCP SYN 플러드 테스트</span>
hping3 <span class="nt">-S</span> <span class="nt">-p</span> 80 <span class="nt">-i</span> u1000 192.168.1.100

<span class="c"># UDP 포트 스캔</span>
hping3 <span class="nt">--udp</span> <span class="nt">-p</span> 53 <span class="nt">-c</span> 3 192.168.1.100

<span class="c"># ICMP 타임스탬프 요청</span>
hping3 <span class="nt">--icmp-ts</span> 192.168.1.100

<span class="c"># traceroute 고급 옵션</span>
<span class="c"># TCP traceroute</span>
traceroute <span class="nt">-T</span> <span class="nt">-p</span> 443 google.com

<span class="c"># UDP traceroute  </span>
traceroute <span class="nt">-U</span> <span class="nt">-p</span> 53 8.8.8.8

<span class="c"># Paris traceroute (로드 밸런싱 고려)</span>
paris-traceroute google.com

<span class="c"># mtr - 실시간 traceroute</span>
mtr <span class="nt">--report</span> <span class="nt">--report-cycles</span> 100 <span class="nt">--no-dns</span> google.com
</code></pre></div></div>

<h3 id="-네트워크-모니터링과-분석">📊 네트워크 모니터링과 분석</h3>

<h4 id="snmp-기반-모니터링">SNMP 기반 모니터링</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pysnmp.hlapi</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">class</span> <span class="nc">NetworkMonitor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">community</span><span class="o">=</span><span class="sh">'</span><span class="s">public</span><span class="sh">'</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">host</span>
        <span class="n">self</span><span class="p">.</span><span class="n">community</span> <span class="o">=</span> <span class="n">community</span>
        
    <span class="k">def</span> <span class="nf">get_interface_stats</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">interface_index</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">인터페이스 통계 수집</span><span class="sh">"""</span>
        <span class="n">oids</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">ifInOctets</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">1.3.6.1.2.1.2.2.1.10.</span><span class="si">{</span><span class="n">interface_index</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">ifOutOctets</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">1.3.6.1.2.1.2.2.1.16.</span><span class="si">{</span><span class="n">interface_index</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">ifSpeed</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">1.3.6.1.2.1.2.2.1.5.</span><span class="si">{</span><span class="n">interface_index</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">ifOperStatus</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">1.3.6.1.2.1.2.2.1.8.</span><span class="si">{</span><span class="n">interface_index</span><span class="si">}</span><span class="sh">'</span>
        <span class="p">}</span>
        
        <span class="n">results</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">oids</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="nf">for </span><span class="p">(</span><span class="n">errorIndication</span><span class="p">,</span> <span class="n">errorStatus</span><span class="p">,</span> <span class="n">errorIndex</span><span class="p">,</span> <span class="n">varBinds</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">nextCmd</span><span class="p">(</span>
                <span class="nc">SnmpEngine</span><span class="p">(),</span>
                <span class="nc">CommunityData</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">community</span><span class="p">),</span>
                <span class="nc">UdpTransportTarget</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">host</span><span class="p">,</span> <span class="mi">161</span><span class="p">)),</span>
                <span class="nc">ContextData</span><span class="p">(),</span>
                <span class="nc">ObjectType</span><span class="p">(</span><span class="nc">ObjectIdentity</span><span class="p">(</span><span class="n">oid</span><span class="p">)),</span>
                <span class="n">lexicographicMode</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
                
                <span class="k">if</span> <span class="n">errorIndication</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="n">errorIndication</span><span class="p">)</span>
                    <span class="k">break</span>
                <span class="k">elif</span> <span class="n">errorStatus</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">%s at %s</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">errorStatus</span><span class="p">.</span><span class="nf">prettyPrint</span><span class="p">(),</span>
                                        <span class="n">errorIndex</span> <span class="ow">and</span> <span class="n">varBinds</span><span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">errorIndex</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">?</span><span class="sh">'</span><span class="p">))</span>
                    <span class="k">break</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">varBind</span> <span class="ow">in</span> <span class="n">varBinds</span><span class="p">:</span>
                        <span class="n">results</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">varBind</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                    <span class="k">break</span>
                    
        <span class="k">return</span> <span class="n">results</span>
    
    <span class="k">def</span> <span class="nf">calculate_bandwidth_utilization</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">interval</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">samples</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">대역폭 사용률 계산</span><span class="sh">"""</span>
        <span class="n">prev_stats</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_interface_stats</span><span class="p">()</span>
        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">interval</span><span class="p">)</span>
        
        <span class="n">utilizations</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">timestamps</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">samples</span><span class="p">):</span>
            <span class="n">current_stats</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_interface_stats</span><span class="p">()</span>
            
            <span class="c1"># 바이트 증가량 계산
</span>            <span class="n">in_bytes</span> <span class="o">=</span> <span class="n">current_stats</span><span class="p">[</span><span class="sh">'</span><span class="s">ifInOctets</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">prev_stats</span><span class="p">[</span><span class="sh">'</span><span class="s">ifInOctets</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">out_bytes</span> <span class="o">=</span> <span class="n">current_stats</span><span class="p">[</span><span class="sh">'</span><span class="s">ifOutOctets</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">prev_stats</span><span class="p">[</span><span class="sh">'</span><span class="s">ifOutOctets</span><span class="sh">'</span><span class="p">]</span>
            
            <span class="c1"># 비트로 변환하고 초당 계산
</span>            <span class="n">in_bps</span> <span class="o">=</span> <span class="p">(</span><span class="n">in_bytes</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)</span> <span class="o">/</span> <span class="n">interval</span>
            <span class="n">out_bps</span> <span class="o">=</span> <span class="p">(</span><span class="n">out_bytes</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)</span> <span class="o">/</span> <span class="n">interval</span>
            
            <span class="c1"># 사용률 계산 (%)
</span>            <span class="n">interface_speed</span> <span class="o">=</span> <span class="n">current_stats</span><span class="p">[</span><span class="sh">'</span><span class="s">ifSpeed</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">in_utilization</span> <span class="o">=</span> <span class="p">(</span><span class="n">in_bps</span> <span class="o">/</span> <span class="n">interface_speed</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
            <span class="n">out_utilization</span> <span class="o">=</span> <span class="p">(</span><span class="n">out_bps</span> <span class="o">/</span> <span class="n">interface_speed</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
            
            <span class="n">utilizations</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span>
                <span class="sh">'</span><span class="s">in_utilization</span><span class="sh">'</span><span class="p">:</span> <span class="n">in_utilization</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">out_utilization</span><span class="sh">'</span><span class="p">:</span> <span class="n">out_utilization</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">in_bps</span><span class="sh">'</span><span class="p">:</span> <span class="n">in_bps</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">out_bps</span><span class="sh">'</span><span class="p">:</span> <span class="n">out_bps</span>
            <span class="p">})</span>
            
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">시간: </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%H</span><span class="si">:</span><span class="o">%</span><span class="n">M</span><span class="si">:</span><span class="o">%</span><span class="n">S</span><span class="sh">'</span><span class="s">)</span><span class="si">}</span><span class="s">, </span><span class="sh">"</span>
                  <span class="sa">f</span><span class="sh">"</span><span class="s">In: </span><span class="si">{</span><span class="n">in_utilization</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">% (</span><span class="si">{</span><span class="n">in_bps</span><span class="o">/</span><span class="mi">1000000</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">Mbps), </span><span class="sh">"</span>
                  <span class="sa">f</span><span class="sh">"</span><span class="s">Out: </span><span class="si">{</span><span class="n">out_utilization</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">% (</span><span class="si">{</span><span class="n">out_bps</span><span class="o">/</span><span class="mi">1000000</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">Mbps)</span><span class="sh">"</span><span class="p">)</span>
            
            <span class="n">prev_stats</span> <span class="o">=</span> <span class="n">current_stats</span>
            <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">interval</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">utilizations</span>

<span class="c1"># 사용 예시
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">monitor</span> <span class="o">=</span> <span class="nc">NetworkMonitor</span><span class="p">(</span><span class="sh">'</span><span class="s">192.168.1.1</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="nf">calculate_bandwidth_utilization</span><span class="p">()</span>
    
    <span class="c1"># 그래프 생성
</span>    <span class="n">timestamps</span> <span class="o">=</span> <span class="p">[</span><span class="n">d</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">]</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>
    <span class="n">in_util</span> <span class="o">=</span> <span class="p">[</span><span class="n">d</span><span class="p">[</span><span class="sh">'</span><span class="s">in_utilization</span><span class="sh">'</span><span class="p">]</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>
    <span class="n">out_util</span> <span class="o">=</span> <span class="p">[</span><span class="n">d</span><span class="p">[</span><span class="sh">'</span><span class="s">out_utilization</span><span class="sh">'</span><span class="p">]</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps</span><span class="p">,</span> <span class="n">in_util</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Inbound</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps</span><span class="p">,</span> <span class="n">out_util</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Outbound</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Bandwidth Utilization (%)</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Network Interface Utilization</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="-네트워크-장애-대응-프로세스">🚨 네트워크 장애 대응 프로세스</h3>

<h4 id="자동화된-장애-대응-스크립트">자동화된 장애 대응 스크립트</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># 네트워크 장애 자동 진단 및 대응 스크립트</span>

<span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">"/var/log/network_troubleshoot.log"</span>
<span class="nv">ALERT_THRESHOLD</span><span class="o">=</span>5  <span class="c"># 5% 패킷 손실 임계값</span>

log_message<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2">] </span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$LOG_FILE</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 1단계: 기본 연결성 확인</span>
check_connectivity<span class="o">()</span> <span class="o">{</span>
    log_message <span class="s2">"=== 1단계: 기본 연결성 확인 ==="</span>
    
    <span class="c"># 게이트웨이 핑 테스트</span>
    <span class="nv">gateway</span><span class="o">=</span><span class="si">$(</span>ip route | <span class="nb">grep </span>default | <span class="nb">awk</span> <span class="s1">'{print $3}'</span> | <span class="nb">head</span> <span class="nt">-1</span><span class="si">)</span>
    log_message <span class="s2">"기본 게이트웨이: </span><span class="nv">$gateway</span><span class="s2">"</span>
    
    <span class="nv">packet_loss</span><span class="o">=</span><span class="si">$(</span>ping <span class="nt">-c</span> 5 <span class="nv">$gateway</span> | <span class="nb">grep</span> <span class="s2">"packet loss"</span> | <span class="nb">awk</span> <span class="s1">'{print $6}'</span> | <span class="nb">sed</span> <span class="s1">'s/%//'</span><span class="si">)</span>
    
    <span class="k">if</span> <span class="o">((</span> <span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$packet_loss</span><span class="s2"> &gt; </span><span class="nv">$ALERT_THRESHOLD</span><span class="s2">"</span> | bc <span class="nt">-l</span><span class="si">)</span> <span class="o">))</span><span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"❌ 게이트웨이 연결 문제 감지: </span><span class="k">${</span><span class="nv">packet_loss</span><span class="k">}</span><span class="s2">% 패킷 손실"</span>
        <span class="k">return </span>1
    <span class="k">else
        </span>log_message <span class="s2">"✅ 게이트웨이 연결 정상: </span><span class="k">${</span><span class="nv">packet_loss</span><span class="k">}</span><span class="s2">% 패킷 손실"</span>
        <span class="k">return </span>0
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># 2단계: DNS 해상도 확인  </span>
check_dns<span class="o">()</span> <span class="o">{</span>
    log_message <span class="s2">"=== 2단계: DNS 해상도 확인 ==="</span>
    
    <span class="nv">dns_servers</span><span class="o">=(</span><span class="s2">"8.8.8.8"</span> <span class="s2">"1.1.1.1"</span> <span class="s2">"168.126.63.1"</span><span class="o">)</span>
    <span class="nv">test_domains</span><span class="o">=(</span><span class="s2">"google.com"</span> <span class="s2">"naver.com"</span> <span class="s2">"github.com"</span><span class="o">)</span>
    
    <span class="k">for </span>server <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">dns_servers</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
        for </span>domain <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">test_domains</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
            </span><span class="nv">response_time</span><span class="o">=</span><span class="si">$(</span>dig @<span class="nv">$server</span> <span class="nv">$domain</span> +short +time<span class="o">=</span>3 2&gt;&amp;1<span class="si">)</span>
            <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$response_time</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
                </span>log_message <span class="s2">"✅ DNS 서버 </span><span class="nv">$server</span><span class="s2">: </span><span class="nv">$domain</span><span class="s2"> 해상도 성공"</span>
            <span class="k">else
                </span>log_message <span class="s2">"❌ DNS 서버 </span><span class="nv">$server</span><span class="s2">: </span><span class="nv">$domain</span><span class="s2"> 해상도 실패"</span>
            <span class="k">fi
        done
    done</span>
<span class="o">}</span>

<span class="c"># 3단계: 인터페이스 상태 확인</span>
check_interfaces<span class="o">()</span> <span class="o">{</span>
    log_message <span class="s2">"=== 3단계: 네트워크 인터페이스 확인 ==="</span>
    
    ip <span class="nb">link </span>show | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"^[0-9]+:"</span> | <span class="k">while </span><span class="nb">read </span>line<span class="p">;</span> <span class="k">do
        </span><span class="nv">interface</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$line</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f2</span> | <span class="nb">sed</span> <span class="s1">'s/ //'</span><span class="si">)</span>
        <span class="nv">status</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$line</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"state [A-Z]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">' '</span> <span class="nt">-f2</span><span class="si">)</span>
        
        <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$status</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"UP"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log_message <span class="s2">"✅ 인터페이스 </span><span class="nv">$interface</span><span class="s2">: </span><span class="nv">$status</span><span class="s2">"</span>
        <span class="k">else
            </span>log_message <span class="s2">"❌ 인터페이스 </span><span class="nv">$interface</span><span class="s2">: </span><span class="nv">$status</span><span class="s2">"</span>
            
            <span class="c"># 인터페이스 재시작 시도</span>
            log_message <span class="s2">"인터페이스 </span><span class="nv">$interface</span><span class="s2"> 재시작 시도중..."</span>
            <span class="nb">sudo </span>ip <span class="nb">link set</span> <span class="nv">$interface</span> down
            <span class="nb">sleep </span>2
            <span class="nb">sudo </span>ip <span class="nb">link set</span> <span class="nv">$interface</span> up
            <span class="nb">sleep </span>5
            
            <span class="c"># 재확인</span>
            <span class="nv">new_status</span><span class="o">=</span><span class="si">$(</span>ip <span class="nb">link </span>show <span class="nv">$interface</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"state [A-Z]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">' '</span> <span class="nt">-f2</span><span class="si">)</span>
            log_message <span class="s2">"재시작 후 상태: </span><span class="nv">$new_status</span><span class="s2">"</span>
        <span class="k">fi
    done</span>
<span class="o">}</span>

<span class="c"># 4단계: 라우팅 테이블 확인</span>
check_routing<span class="o">()</span> <span class="o">{</span>
    log_message <span class="s2">"=== 4단계: 라우팅 테이블 확인 ==="</span>
    
    <span class="c"># 기본 게이트웨이 확인</span>
    <span class="nv">default_routes</span><span class="o">=</span><span class="si">$(</span>ip route | <span class="nb">grep </span>default | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$default_routes</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"❌ 기본 게이트웨이가 설정되지 않음"</span>
        
        <span class="c"># DHCP 갱신 시도</span>
        log_message <span class="s2">"DHCP 갱신 시도중..."</span>
        <span class="nb">sudo </span>dhclient <span class="nt">-r</span>
        <span class="nb">sudo </span>dhclient
    <span class="k">elif</span> <span class="o">[</span> <span class="nv">$default_routes</span> <span class="nt">-gt</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"⚠️  여러 개의 기본 게이트웨이 감지"</span>
        ip route | <span class="nb">grep </span>default
    <span class="k">else
        </span>log_message <span class="s2">"✅ 기본 게이트웨이 정상"</span>
    <span class="k">fi</span>
    
    <span class="c"># 라우팅 테이블 출력</span>
    log_message <span class="s2">"현재 라우팅 테이블:"</span>
    ip route <span class="o">&gt;&gt;</span> <span class="nv">$LOG_FILE</span>
<span class="o">}</span>

<span class="c"># 5단계: 포트 스캔 (서비스 가용성 확인)</span>
check_services<span class="o">()</span> <span class="o">{</span>
    log_message <span class="s2">"=== 5단계: 핵심 서비스 확인 ==="</span>
    
    <span class="nv">services</span><span class="o">=(</span>
        <span class="s2">"8.8.8.8:53:DNS"</span>
        <span class="s2">"google.com:80:HTTP"</span>
        <span class="s2">"google.com:443:HTTPS"</span>
        <span class="s2">"github.com:22:SSH"</span>
    <span class="o">)</span>
    
    <span class="k">for </span>service <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">services</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
        </span><span class="nv">IFS</span><span class="o">=</span><span class="s1">':'</span> <span class="nb">read</span> <span class="nt">-r</span> host port name <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span>
        
        <span class="k">if </span><span class="nb">timeout </span>5 bash <span class="nt">-c</span> <span class="s2">"echo &gt;/dev/tcp/</span><span class="nv">$host</span><span class="s2">/</span><span class="nv">$port</span><span class="s2">"</span> 2&gt;/dev/null<span class="p">;</span> <span class="k">then
            </span>log_message <span class="s2">"✅ </span><span class="nv">$name</span><span class="s2"> (</span><span class="nv">$host</span><span class="s2">:</span><span class="nv">$port</span><span class="s2">): 접근 가능"</span>
        <span class="k">else
            </span>log_message <span class="s2">"❌ </span><span class="nv">$name</span><span class="s2"> (</span><span class="nv">$host</span><span class="s2">:</span><span class="nv">$port</span><span class="s2">): 접근 불가"</span>
        <span class="k">fi
    done</span>
<span class="o">}</span>

<span class="c"># 6단계: 자동 복구 시도</span>
auto_recovery<span class="o">()</span> <span class="o">{</span>
    log_message <span class="s2">"=== 6단계: 자동 복구 시도 ==="</span>
    
    <span class="c"># 네트워크 관리자 재시작</span>
    <span class="k">if </span>systemctl is-active NetworkManager <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"NetworkManager 재시작 중..."</span>
        <span class="nb">sudo </span>systemctl restart NetworkManager
        <span class="nb">sleep </span>10
    <span class="k">fi</span>
    
    <span class="c"># 방화벽 규칙 초기화 (임시)</span>
    log_message <span class="s2">"방화벽 규칙 임시 허용..."</span>
    <span class="nb">sudo </span>iptables <span class="nt">-P</span> INPUT ACCEPT
    <span class="nb">sudo </span>iptables <span class="nt">-P</span> FORWARD ACCEPT
    <span class="nb">sudo </span>iptables <span class="nt">-P</span> OUTPUT ACCEPT
    
    <span class="c"># DNS 캐시 플러시</span>
    log_message <span class="s2">"DNS 캐시 플러시..."</span>
    <span class="nb">sudo </span>systemctl restart systemd-resolved
    
    log_message <span class="s2">"자동 복구 완료. 5분 후 재테스트 예정..."</span>
<span class="o">}</span>

<span class="c"># 메인 실행 함수</span>
main<span class="o">()</span> <span class="o">{</span>
    log_message <span class="s2">"==================== 네트워크 진단 시작 ===================="</span>
    
    <span class="nv">failure_count</span><span class="o">=</span>0
    
    check_connectivity <span class="o">||</span> <span class="o">((</span>failure_count++<span class="o">))</span>
    check_dns <span class="o">||</span> <span class="o">((</span>failure_count++<span class="o">))</span>  
    check_interfaces <span class="o">||</span> <span class="o">((</span>failure_count++<span class="o">))</span>
    check_routing <span class="o">||</span> <span class="o">((</span>failure_count++<span class="o">))</span>
    check_services <span class="o">||</span> <span class="o">((</span>failure_count++<span class="o">))</span>
    
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$failure_count</span> <span class="nt">-gt</span> 2 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"⚠️  심각한 네트워크 문제 감지 (</span><span class="nv">$failure_count</span><span class="s2"> 개 실패)"</span>
        auto_recovery
        
        <span class="c"># 5분 후 재테스트</span>
        <span class="nb">sleep </span>300
        log_message <span class="s2">"==================== 복구 후 재진단 ===================="</span>
        main
    <span class="k">else
        </span>log_message <span class="s2">"✅ 네트워크 상태 정상 (실패: </span><span class="nv">$failure_count</span><span class="s2"> 개)"</span>
    <span class="k">fi
    
    </span>log_message <span class="s2">"==================== 진단 완료 ===================="</span>
<span class="o">}</span>

<span class="c"># 스크립트 실행</span>
main
</code></pre></div></div>

<h2 id="최신-보안-위협과-대응">최신 보안 위협과 대응</h2>

<h3 id="-aiml-기반-위협-탐지">🎯 AI/ML 기반 위협 탐지</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">IsolationForest</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">class</span> <span class="nc">NetworkAnomalyDetector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nc">IsolationForest</span><span class="p">(</span><span class="n">contamination</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">scaler</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">prepare_features</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">network_data</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">네트워크 데이터에서 피처 추출</span><span class="sh">"""</span>
        <span class="n">features</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">()</span>
        
        <span class="c1"># 시간대별 트래픽 패턴
</span>        <span class="n">features</span><span class="p">[</span><span class="sh">'</span><span class="s">hour</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">network_data</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">]).</span><span class="n">dt</span><span class="p">.</span><span class="n">hour</span>
        <span class="n">features</span><span class="p">[</span><span class="sh">'</span><span class="s">day_of_week</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">network_data</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">]).</span><span class="n">dt</span><span class="p">.</span><span class="n">dayofweek</span>
        
        <span class="c1"># 트래픽 볼륨
</span>        <span class="n">features</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">network_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">network_data</span><span class="p">[</span><span class="sh">'</span><span class="s">duration</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">features</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">network_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">network_data</span><span class="p">[</span><span class="sh">'</span><span class="s">duration</span><span class="sh">'</span><span class="p">]</span>
        
        <span class="c1"># 연결 패턴
</span>        <span class="n">features</span><span class="p">[</span><span class="sh">'</span><span class="s">unique_src_ports</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">network_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">src_port</span><span class="sh">'</span><span class="p">].</span><span class="nf">nunique</span><span class="p">()</span>
        <span class="n">features</span><span class="p">[</span><span class="sh">'</span><span class="s">unique_dst_ports</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">network_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">dst_port</span><span class="sh">'</span><span class="p">].</span><span class="nf">nunique</span><span class="p">()</span> 
        <span class="n">features</span><span class="p">[</span><span class="sh">'</span><span class="s">connection_count</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">network_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">).</span><span class="nf">size</span><span class="p">()</span>
        
        <span class="c1"># 프로토콜 분포
</span>        <span class="n">protocol_counts</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">get_dummies</span><span class="p">(</span><span class="n">network_data</span><span class="p">[</span><span class="sh">'</span><span class="s">protocol</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">features</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">([</span><span class="n">features</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span> 
                            <span class="n">protocol_counts</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">features</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">training_data</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">정상 트래픽으로 모델 학습</span><span class="sh">"""</span>
        <span class="n">features</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">prepare_features</span><span class="p">(</span><span class="n">training_data</span><span class="p">)</span>
        <span class="n">scaled_features</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">scaled_features</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">detect_anomalies</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">test_data</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">이상 트래픽 탐지</span><span class="sh">"""</span>
        <span class="n">features</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">prepare_features</span><span class="p">(</span><span class="n">test_data</span><span class="p">)</span>
        <span class="n">scaled_features</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
        
        <span class="c1"># 이상 점수 계산 (-1: 이상, 1: 정상)
</span>        <span class="n">predictions</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">scaled_features</span><span class="p">)</span>
        <span class="n">anomaly_scores</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">scaled_features</span><span class="p">)</span>
        
        <span class="c1"># 결과 데이터프레임 생성
</span>        <span class="n">results</span> <span class="o">=</span> <span class="n">test_data</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
        <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">is_anomaly</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">predictions</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">anomaly_scores</span>
        
        <span class="k">return</span> <span class="n">results</span>
    
    <span class="k">def</span> <span class="nf">visualize_anomalies</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">results</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">이상 탐지 결과 시각화</span><span class="sh">"""</span>
        <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        
        <span class="c1"># 시간별 이상 트래픽
</span>        <span class="n">hourly_anomalies</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span>
            <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">]).</span><span class="n">dt</span><span class="p">.</span><span class="n">hour</span>
        <span class="p">)[</span><span class="sh">'</span><span class="s">is_anomaly</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
        
        <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">bar</span><span class="p">(</span><span class="n">hourly_anomalies</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">hourly_anomalies</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">시간대별 이상 트래픽</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">시간</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">이상 트래픽 수</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="c1"># IP별 이상 점수 분포
</span>        <span class="n">ip_scores</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">().</span><span class="nf">sort_values</span><span class="p">()</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">barh</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ip_scores</span><span class="p">.</span><span class="nf">tail</span><span class="p">(</span><span class="mi">10</span><span class="p">))),</span> <span class="n">ip_scores</span><span class="p">.</span><span class="nf">tail</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">values</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_yticks</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ip_scores</span><span class="p">.</span><span class="nf">tail</span><span class="p">(</span><span class="mi">10</span><span class="p">))))</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_yticklabels</span><span class="p">(</span><span class="n">ip_scores</span><span class="p">.</span><span class="nf">tail</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">index</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">상위 10개 의심 IP</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="c1"># 포트 스캔 패턴
</span>        <span class="n">port_scan_ips</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">unique_dst_ports</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">][</span><span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">()</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">port_scan_ips</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">bar</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">port_scan_ips</span><span class="p">.</span><span class="nf">head</span><span class="p">(</span><span class="mi">10</span><span class="p">))),</span> <span class="n">port_scan_ips</span><span class="p">.</span><span class="nf">head</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">values</span><span class="p">)</span>
            <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xticks</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">port_scan_ips</span><span class="p">.</span><span class="nf">head</span><span class="p">(</span><span class="mi">10</span><span class="p">))))</span>
            <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">port_scan_ips</span><span class="p">.</span><span class="nf">head</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">index</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
            <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">포트 스캔 의심 IP</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="c1"># 데이터 전송량 분포
</span>        <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">],</span> <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">],</span> 
                         <span class="n">c</span><span class="o">=</span><span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">is_anomaly</span><span class="sh">'</span><span class="p">],</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.6</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">전송 바이트</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">이상 점수</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">데이터 전송량 vs 이상 점수</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="c1"># 사용 예시
</span><span class="n">detector</span> <span class="o">=</span> <span class="nc">NetworkAnomalyDetector</span><span class="p">()</span>

<span class="c1"># 모의 네트워크 데이터 생성
</span><span class="n">training_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span>
    <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="nf">date_range</span><span class="p">(</span><span class="sh">'</span><span class="s">2024-03-01</span><span class="sh">'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="sh">'</span><span class="s">1min</span><span class="sh">'</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">([</span><span class="sh">'</span><span class="s">192.168.1.100</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">192.168.1.101</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">192.168.1.102</span><span class="sh">'</span><span class="p">],</span> <span class="mi">10000</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">dst_ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">([</span><span class="sh">'</span><span class="s">8.8.8.8</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">1.1.1.1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">208.67.222.222</span><span class="sh">'</span><span class="p">],</span> <span class="mi">10000</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">src_port</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">65535</span><span class="p">,</span> <span class="mi">10000</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">dst_port</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">([</span><span class="mi">80</span><span class="p">,</span> <span class="mi">443</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">22</span><span class="p">],</span> <span class="mi">10000</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">protocol</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">([</span><span class="sh">'</span><span class="s">TCP</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">UDP</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ICMP</span><span class="sh">'</span><span class="p">],</span> <span class="mi">10000</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">lognormal</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">10000</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">poisson</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">10000</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">duration</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">exponential</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
<span class="p">})</span>

<span class="n">detector</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">training_data</span><span class="p">)</span>

<span class="c1"># 테스트 데이터에 일부 이상 트래픽 포함
</span><span class="n">test_data</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">.</span><span class="nf">sample</span><span class="p">(</span><span class="mi">1000</span><span class="p">).</span><span class="nf">copy</span><span class="p">()</span>
<span class="c1"># 포트 스캔 시뮬레이션
</span><span class="n">test_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span> <span class="sh">'</span><span class="s">dst_port</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">51</span><span class="p">)</span>
<span class="n">test_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span> <span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">10.0.0.100</span><span class="sh">'</span>  <span class="c1"># 외부 IP
</span>
<span class="n">results</span> <span class="o">=</span> <span class="n">detector</span><span class="p">.</span><span class="nf">detect_anomalies</span><span class="p">(</span><span class="n">test_data</span><span class="p">)</span>
<span class="n">detector</span><span class="p">.</span><span class="nf">visualize_anomalies</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="마무리">마무리</h2>

<p>이 시리즈를 통해 네트워킹의 모든 측면을 다뤘습니다:</p>

<ol>
  <li><strong>Part 1</strong>: OSI 7계층과 TCP/IP 프로토콜 기초</li>
  <li><strong>Part 2</strong>: IP 주소 체계와 서브네팅</li>
  <li><strong>Part 3</strong>: 라우팅과 스위칭 고급 기술</li>
  <li><strong>Part 4</strong>: 무선 네트워킹과 최신 기술 동향</li>
  <li><strong>Part 5</strong>: 네트워크 보안과 고급 트러블슈팅</li>
</ol>

<p>실무에서 이 지식들을 적극 활용하여 안전하고 효율적인 네트워크 인프라를 구축하시기 바랍니다! 🌐🔒</p>

<h2 id="추천-학습-자료">추천 학습 자료</h2>

<ul>
  <li><strong>서적</strong>: “Computer Networking: A Top-Down Approach” - Kurose &amp; Ross</li>
  <li><strong>실습</strong>: Packet Tracer, GNS3, EVE-NG</li>
  <li><strong>인증</strong>: CCNA, CCNP, CCIE (Cisco), JNCIA, JNCIP (Juniper)</li>
  <li><strong>오픈소스</strong>: Wireshark, pfSense, OpenWrt, Suricata</li>
</ul>

<p>네트워크 마스터의 길, 함께 걸어가요! 🚀</p>]]></content><author><name>DevOps Engineer</name></author><category term="Networking" /><category term="Security" /><category term="network-security" /><category term="firewall" /><category term="ids" /><category term="ips" /><category term="zero-trust" /><category term="troubleshooting" /><category term="forensics" /><summary type="html"><![CDATA[네트워크 보안의 최신 기술과 고급 트러블슈팅 기법을 실무 중심으로 완전히 마스터해보겠습니다. 차세대 방화벽 (NGFW) | Next-Generation Firewall 🔥 NGFW 기능과 특징 전통 방화벽 vs NGFW 비교 Traditional Firewall: - L3/L4 패킷 필터링 (IP, Port) - Stateful 연결 추적 - NAT/PAT 기능 Next-Generation Firewall (NGFW): - Application Awareness (L7) - Intrusion Prevention (IPS) - SSL/TLS Decryption - User Identity Integration - Advanced Threat Protection - Sandboxing Palo Alto NGFW 설정 실습 # 보안 정책 설정 # 애플리케이션 기반 정책 configure set rulebase security rules "Allow-Office365" from any set rulebase security rules "Allow-Office365" to any set rulebase security rules "Allow-Office365" source any set rulebase security rules "Allow-Office365" destination any set rulebase security rules "Allow-Office365" application [ ms-office365 outlook-web-access ] set rulebase security rules "Allow-Office365" service application-default set rulebase security rules "Allow-Office365" action allow # 사용자 기반 정책 set rulebase security rules "Block-Social-Media" from trust set rulebase security rules "Block-Social-Media" to untrust set rulebase security rules "Block-Social-Media" source-user [ "DOMAIN\sales-team" ] set rulebase security rules "Block-Social-Media" application [ facebook twitter instagram ] set rulebase security rules "Block-Social-Media" action deny # SSL Decryption 정책 set shared ssl-decrypt ssl-decrypt-policy "Decrypt-Inbound" rules "web-traffic" set shared ssl-decrypt ssl-decrypt-policy "Decrypt-Inbound" rules "web-traffic" category [ "business-and-economy" "computer-and-internet-info" ] set shared ssl-decrypt ssl-decrypt-policy "Decrypt-Inbound" rules "web-traffic" action decrypt pfSense 오픈소스 방화벽 설정 # pfSense 패키지 설치 pkg install pfSense-pkg-suricata pkg install pfSense-pkg-pfBlockerNG # Suricata IPS 설정 # /usr/local/etc/suricata/suricata.yaml HOME_NET: "[192.168.1.0/24,10.0.0.0/8]" EXTERNAL_NET: "!$HOME_NET" rule-files: - emerging-threats.rules - botcc.rules - emerging-malware.rules # 사용자 정의 룰 # /usr/local/etc/suricata/rules/local.rules alert tcp $HOME_NET any -&gt; $EXTERNAL_NET 80 (msg:"HTTP outbound connection"; sid:1000001; rev:1;) alert tcp any any -&gt; $HOME_NET 22 (msg:"SSH connection attempt"; threshold: type both, track by_src, count 5, seconds 60; sid:1000002; rev:1;) # pfBlockerNG GeoIP 차단 # 러시아, 중국, 북한 IP 대역 차단 Asia_Russia: Deny_Inbound, Deny_Outbound Asia_China: Deny_Inbound, Permit_Outbound Asia_North_Korea: Deny_Both 🛡️ IDS/IPS 시스템 Suricata IDS/IPS 배포 # Suricata 설치 (Ubuntu) sudo add-apt-repository ppa:oisf/suricata-stable sudo apt update sudo apt install suricata # 네트워크 인터페이스 설정 # /etc/suricata/suricata.yaml af-packet: - interface: eth0 cluster-id: 99 cluster-type: cluster_flow defrag: yes use-mmap: yes mmap-locked: yes # 룰셋 업데이트 sudo suricata-update sudo suricata-update list-sources sudo suricata-update enable-source et/pro # Emerging Threats Pro sudo suricata-update enable-source ptresearch/attackdetection # 커스텀 룰 작성 # /etc/suricata/rules/local.rules # DDoS 공격 탐지 alert tcp any any -&gt; $HOME_NET any (msg:"Possible DDoS attack"; flags:S; threshold: type both, track by_src, count 100, seconds 10; sid:1000003; rev:1;) # SQL 인젝션 탐지 alert http any any -&gt; $HOME_NET any (msg:"SQL Injection Attack"; content:"union select"; nocase; http_uri; sid:1000004; rev:1;) # 크리덴셜 스터핑 탐지 alert http any any -&gt; $HOME_NET any (msg:"Credential Stuffing Attack"; content:"POST"; http_method; threshold: type both, track by_src, count 50, seconds 60; sid:1000005; rev:1;) Zeek (Bro) 네트워크 분석 # Zeek 설치 sudo apt install zeek # 네트워크 인터페이스 설정 # /opt/zeek/etc/node.cfg [zeek] type=standalone host=localhost interface=eth0 # 커스텀 스크립트 작성 # /opt/zeek/share/zeek/site/local.zeek @load base/protocols/http @load base/protocols/dns @load base/protocols/ssl # HTTP 트래픽 모니터링 event http_request(c: connection, method: string, original_URI: string, unescaped_URI: string, version: string) { if ( /\.(exe|zip|rar|7z)$/ in unescaped_URI ) print fmt("%s 다운로드: %s -&gt; %s%s", strftime("%Y-%m-%d %H:%M:%S", network_time()), c$id$orig_h, c$id$resp_h, unescaped_URI); } # DNS 모니터링 event dns_request(c: connection, msg: dns_msg, query: string, qtype: count, qclass: count) { if ( /[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.in-addr\.arpa/ !in query ) { if ( /\.tk$|\.ml$|\.ga$|\.cf$/ in query ) print fmt("의심스러운 도메인 질의: %s -&gt; %s", c$id$orig_h, query); } } # 서비스 시작 sudo zeekctl deploy sudo zeekctl status 제로 트러스트 네트워크 | Zero Trust Network 🔒 제로 트러스트 아키텍처 제로 트러스트 원칙 Never Trust, Always Verify: - 기본적으로 모든 트래픽 차단 - 명시적 검증과 인가 - 최소 권한 원칙 Verify Explicitly: - 사용자 신원 확인 - 디바이스 상태 검증 - 네트워크 위치 무관 Least Privileged Access: - Just-in-Time (JIT) 액세스 - Just-Enough-Access (JEA) - 위험 기반 적응형 정책 Assume Breach: - 세그멘테이션과 격리 - 횡적 이동 차단 - 지속적 모니터링 마이크로 세그멘테이션 구현 # Cisco ACI 마이크로 세그멘테이션 # 애플리케이션 프로파일 생성 apic1# configure apic1(config)# tenant production apic1(config-tenant)# application app-web apic1(config-tenant-app)# epg web-tier apic1(config-tenant-app-epg)# bridge-domain web-bd apic1(config-tenant-app-epg)# exit # 계약 (Contract) 정의 apic1(config-tenant-app)# contract web-to-db apic1(config-tenant-app-contract)# subject db-access apic1(config-tenant-app-contract-subject)# filter mysql-filter apic1(config-tenant-app-contract-subject-filter)# entry mysql apic1(config-tenant-app-contract-subject-filter-entry)# ether-type ip apic1(config-tenant-app-contract-subject-filter-entry)# ip-protocol tcp apic1(config-tenant-app-contract-subject-filter-entry)# destination-port-range from 3306 to 3306 # VMware NSX 마이크로 세그멘테이션 # 분산 방화벽 정책 nsxcli&gt; configure firewall nsxcli(firewall)&gt; add rule web-tier-protection nsxcli(firewall-rule)&gt; set source security-group web-servers nsxcli(firewall-rule)&gt; set destination security-group db-servers nsxcli(firewall-rule)&gt; set service MYSQL nsxcli(firewall-rule)&gt; set action allow nsxcli(firewall-rule)&gt; set applied-to security-group web-servers nsxcli(firewall-rule)&gt; commit Kubernetes 네트워크 정책 # 네임스페이스 격리 정책 apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: default-deny-all namespace: production spec: podSelector: {} policyTypes: - Ingress - Egress --- # 웹 애플리케이션 정책 apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: web-app-policy namespace: production spec: podSelector: matchLabels: app: web-frontend policyTypes: - Ingress - Egress ingress: - from: - namespaceSelector: matchLabels: name: ingress-nginx ports: - protocol: TCP port: 8080 egress: - to: - podSelector: matchLabels: app: api-backend ports: - protocol: TCP port: 3000 - to: - namespaceSelector: matchLabels: name: kube-system ports: - protocol: UDP port: 53 # DNS --- # 데이터베이스 정책 apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: database-policy namespace: production spec: podSelector: matchLabels: app: mysql-db policyTypes: - Ingress ingress: - from: - podSelector: matchLabels: app: api-backend ports: - protocol: TCP port: 3306 네트워크 포렌식 | Network Forensics 🔍 패킷 분석과 증거 수집 Wireshark 고급 분석 기법 # 의심스러운 트래픽 필터링 # 대량 데이터 전송 탐지 tcp.len &gt; 1400 and ip.src == 192.168.1.100 # DNS 터널링 탐지 dns.qry.name contains "." dns.qry.name matches "^[a-f0-9]{20,}\\." # HTTP POST 데이터 exfiltration http.request.method == "POST" and http.content_length &gt; 10000 # 비정상적인 포트 사용 tcp.port == 443 and not ssl.handshake.type tcp.port == 80 and ssl.handshake.type # 커맨드 앤 컨트롤 통신 패턴 (tcp.flags.push == 1) and (tcp.len &lt; 100) and (tcp.len &gt; 10) # 통계 분석을 위한 tshark 사용 # 상위 통신 호스트 tshark -r capture.pcap -q -z conv,ip | sort -k7 -nr | head -20 # 프로토콜 분포 tshark -r capture.pcap -q -z prot,colinfo # 시간별 트래픽 분석 tshark -r capture.pcap -T fields -e frame.time -e ip.src -e ip.dst -e tcp.srcport -e tcp.dstport | awk '{print $1 " " $2 ":" $4 " -&gt; " $3 ":" $5}' | sort | uniq -c | sort -nr 네트워크 플로우 분석 (nfcapd) # nfcapd 설정 및 시작 nfcapd -w -D -p 9995 -l /var/cache/nfcapd # 라우터에서 NetFlow 활성화 (Cisco) interface FastEthernet0/1 ip flow ingress ip flow egress ip flow-export source FastEthernet0/1 ip flow-export version 9 ip flow-export destination 192.168.1.100 9995 # 플로우 데이터 분석 # 상위 통신량 호스트 nfdump -r /var/cache/nfcapd/nfcapd.* -s srcip/bytes -n 20 # 특정 시간대 분석 nfdump -r /var/cache/nfcapd/nfcapd.* -t 2024-03-30.10:00:00-2024-03-30.11:00:00 -s dstip/packets # 의심스러운 포트 사용 nfdump -r /var/cache/nfcapd/nfcapd.* 'port &gt; 10000 and port &lt; 65000' -s srcip/flows # 대용량 전송 탐지 nfdump -r /var/cache/nfcapd/nfcapd.* 'bytes &gt; 100000000' -o extended 🕵️ 위협 헌팅 (Threat Hunting) ELK 스택 기반 위협 헌팅 # Logstash 설정 - 네트워크 로그 파싱 # /etc/logstash/conf.d/network-logs.conf input { beats { port =&gt; 5044 } syslog { port =&gt; 514 type =&gt; "firewall" } } filter { if [type] == "firewall" { grok { match =&gt; { "message" =&gt; "%{TIMESTAMP_ISO8601:timestamp} %{WORD:device} %{WORD:action} %{IP:src_ip}:%{INT:src_port} -&gt; %{IP:dst_ip}:%{INT:dst_port} %{WORD:protocol}" } } geoip { source =&gt; "src_ip" target =&gt; "src_geoip" } if [src_geoip][country_name] in ["Russia", "China", "North Korea"] { mutate { add_tag =&gt; [ "suspicious_geo" ] } } } } output { elasticsearch { hosts =&gt; ["localhost:9200"] index =&gt; "network-logs-%{+YYYY.MM.dd}" } } Kibana 위협 헌팅 쿼리 { "query": { "bool": { "must": [ { "range": { "@timestamp": { "gte": "now-1h" } } }, { "terms": { "tags": ["suspicious_geo"] } } ], "should": [ { "range": { "bytes": { "gte": 1000000 } } }, { "script": { "script": { "source": "doc['dst_port'].value &gt; 10000 &amp;&amp; doc['dst_port'].value &lt; 65000" } } } ] } }, "aggs": { "suspicious_ips": { "terms": { "field": "src_ip", "size": 100 }, "aggs": { "unique_ports": { "cardinality": { "field": "dst_port" } }, "total_bytes": { "sum": { "field": "bytes" } } } } } } YARA 룰 기반 네트워크 탐지 # YARA 룰 예시 - 악성코드 통신 패턴 rule APT_Communication_Pattern { meta: description = "APT 그룹 통신 패턴 탐지" author = "Security Team" date = "2024-03-30" strings: $user_agent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)" $uri_pattern = /\/[a-f0-9]{8}\/[a-f0-9]{8}/ $post_data = { 48 54 54 50 2F 31 2E 31 20 32 30 30 20 4F 4B } // "HTTP/1.1 200 OK" condition: $user_agent and $uri_pattern and $post_data } rule DNS_Tunneling { meta: description = "DNS 터널링 패턴 탐지" strings: $long_subdomain = /[a-zA-Z0-9]{50,}\..*\.(com|net|org)/ $base64_pattern = /[A-Za-z0-9+\/]{20,}={0,2}/ condition: $long_subdomain or $base64_pattern } # 네트워크 트래픽에 YARA 적용 suricata -c /etc/suricata/suricata.yaml -i eth0 --runmode single 고급 트러블슈팅 | Advanced Troubleshooting 🔧 네트워크 성능 문제 해결 대역폭과 지연시간 분석 # iperf3를 이용한 성능 측정 # 서버 측 iperf3 -s -p 5201 # 클라이언트 측 - TCP 테스트 iperf3 -c 192.168.1.100 -t 30 -i 1 -P 4 # -t: 테스트 시간, -i: 인터벌, -P: 병렬 연결 # UDP 테스트 (패킷 손실 확인) iperf3 -c 192.168.1.100 -u -b 100M -t 30 # 양방향 테스트 iperf3 -c 192.168.1.100 --bidir -t 30 # MTU 크기 최적화 테스트 ping -M do -s 1472 192.168.1.100 # Linux ping -f -l 1472 192.168.1.100 # Windows # 점진적 MTU 테스트 스크립트 #!/bin/bash for size in {1200..1500..50}; do echo "Testing MTU size: $size" ping -M do -s $size -c 1 192.168.1.100 &gt; /dev/null 2&gt;&amp;1 if [ $? -eq 0 ]; then echo "✅ MTU $size: Success" else echo "❌ MTU $size: Failed" fi done 네트워크 지연시간 상세 분석 # hping3를 이용한 다양한 테스트 # TCP SYN 플러드 테스트 hping3 -S -p 80 -i u1000 192.168.1.100 # UDP 포트 스캔 hping3 --udp -p 53 -c 3 192.168.1.100 # ICMP 타임스탬프 요청 hping3 --icmp-ts 192.168.1.100 # traceroute 고급 옵션 # TCP traceroute traceroute -T -p 443 google.com # UDP traceroute traceroute -U -p 53 8.8.8.8 # Paris traceroute (로드 밸런싱 고려) paris-traceroute google.com # mtr - 실시간 traceroute mtr --report --report-cycles 100 --no-dns google.com 📊 네트워크 모니터링과 분석 SNMP 기반 모니터링 from pysnmp.hlapi import * import time import matplotlib.pyplot as plt class NetworkMonitor: def __init__(self, host, community='public'): self.host = host self.community = community def get_interface_stats(self, interface_index=2): """인터페이스 통계 수집""" oids = { 'ifInOctets': f'1.3.6.1.2.1.2.2.1.10.{interface_index}', 'ifOutOctets': f'1.3.6.1.2.1.2.2.1.16.{interface_index}', 'ifSpeed': f'1.3.6.1.2.1.2.2.1.5.{interface_index}', 'ifOperStatus': f'1.3.6.1.2.1.2.2.1.8.{interface_index}' } results = {} for name, oid in oids.items(): for (errorIndication, errorStatus, errorIndex, varBinds) in nextCmd( SnmpEngine(), CommunityData(self.community), UdpTransportTarget((self.host, 161)), ContextData(), ObjectType(ObjectIdentity(oid)), lexicographicMode=False): if errorIndication: print(errorIndication) break elif errorStatus: print('%s at %s' % (errorStatus.prettyPrint(), errorIndex and varBinds[int(errorIndex) - 1][0] or '?')) break else: for varBind in varBinds: results[name] = int(varBind[1]) break return results def calculate_bandwidth_utilization(self, interval=5, samples=60): """대역폭 사용률 계산""" prev_stats = self.get_interface_stats() time.sleep(interval) utilizations = [] timestamps = [] for i in range(samples): current_stats = self.get_interface_stats() # 바이트 증가량 계산 in_bytes = current_stats['ifInOctets'] - prev_stats['ifInOctets'] out_bytes = current_stats['ifOutOctets'] - prev_stats['ifOutOctets'] # 비트로 변환하고 초당 계산 in_bps = (in_bytes * 8) / interval out_bps = (out_bytes * 8) / interval # 사용률 계산 (%) interface_speed = current_stats['ifSpeed'] in_utilization = (in_bps / interface_speed) * 100 out_utilization = (out_bps / interface_speed) * 100 utilizations.append({ 'timestamp': time.time(), 'in_utilization': in_utilization, 'out_utilization': out_utilization, 'in_bps': in_bps, 'out_bps': out_bps }) print(f"시간: {time.strftime('%H:%M:%S')}, " f"In: {in_utilization:.2f}% ({in_bps/1000000:.2f}Mbps), " f"Out: {out_utilization:.2f}% ({out_bps/1000000:.2f}Mbps)") prev_stats = current_stats time.sleep(interval) return utilizations # 사용 예시 if __name__ == "__main__": monitor = NetworkMonitor('192.168.1.1') data = monitor.calculate_bandwidth_utilization() # 그래프 생성 timestamps = [d['timestamp'] for d in data] in_util = [d['in_utilization'] for d in data] out_util = [d['out_utilization'] for d in data] plt.figure(figsize=(12, 6)) plt.plot(timestamps, in_util, label='Inbound', color='blue') plt.plot(timestamps, out_util, label='Outbound', color='red') plt.xlabel('Time') plt.ylabel('Bandwidth Utilization (%)') plt.title('Network Interface Utilization') plt.legend() plt.grid(True) plt.show() 🚨 네트워크 장애 대응 프로세스 자동화된 장애 대응 스크립트 #!/bin/bash # 네트워크 장애 자동 진단 및 대응 스크립트 LOG_FILE="/var/log/network_troubleshoot.log" ALERT_THRESHOLD=5 # 5% 패킷 손실 임계값 log_message() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" &gt;&gt; $LOG_FILE echo "$1" } # 1단계: 기본 연결성 확인 check_connectivity() { log_message "=== 1단계: 기본 연결성 확인 ===" # 게이트웨이 핑 테스트 gateway=$(ip route | grep default | awk '{print $3}' | head -1) log_message "기본 게이트웨이: $gateway" packet_loss=$(ping -c 5 $gateway | grep "packet loss" | awk '{print $6}' | sed 's/%//') if (( $(echo "$packet_loss &gt; $ALERT_THRESHOLD" | bc -l) )); then log_message "❌ 게이트웨이 연결 문제 감지: ${packet_loss}% 패킷 손실" return 1 else log_message "✅ 게이트웨이 연결 정상: ${packet_loss}% 패킷 손실" return 0 fi } # 2단계: DNS 해상도 확인 check_dns() { log_message "=== 2단계: DNS 해상도 확인 ===" dns_servers=("8.8.8.8" "1.1.1.1" "168.126.63.1") test_domains=("google.com" "naver.com" "github.com") for server in "${dns_servers[@]}"; do for domain in "${test_domains[@]}"; do response_time=$(dig @$server $domain +short +time=3 2&gt;&amp;1) if [ $? -eq 0 ] &amp;&amp; [ -n "$response_time" ]; then log_message "✅ DNS 서버 $server: $domain 해상도 성공" else log_message "❌ DNS 서버 $server: $domain 해상도 실패" fi done done } # 3단계: 인터페이스 상태 확인 check_interfaces() { log_message "=== 3단계: 네트워크 인터페이스 확인 ===" ip link show | grep -E "^[0-9]+:" | while read line; do interface=$(echo $line | cut -d: -f2 | sed 's/ //') status=$(echo $line | grep -o "state [A-Z]*" | cut -d' ' -f2) if [ "$status" = "UP" ]; then log_message "✅ 인터페이스 $interface: $status" else log_message "❌ 인터페이스 $interface: $status" # 인터페이스 재시작 시도 log_message "인터페이스 $interface 재시작 시도중..." sudo ip link set $interface down sleep 2 sudo ip link set $interface up sleep 5 # 재확인 new_status=$(ip link show $interface | grep -o "state [A-Z]*" | cut -d' ' -f2) log_message "재시작 후 상태: $new_status" fi done } # 4단계: 라우팅 테이블 확인 check_routing() { log_message "=== 4단계: 라우팅 테이블 확인 ===" # 기본 게이트웨이 확인 default_routes=$(ip route | grep default | wc -l) if [ $default_routes -eq 0 ]; then log_message "❌ 기본 게이트웨이가 설정되지 않음" # DHCP 갱신 시도 log_message "DHCP 갱신 시도중..." sudo dhclient -r sudo dhclient elif [ $default_routes -gt 1 ]; then log_message "⚠️ 여러 개의 기본 게이트웨이 감지" ip route | grep default else log_message "✅ 기본 게이트웨이 정상" fi # 라우팅 테이블 출력 log_message "현재 라우팅 테이블:" ip route &gt;&gt; $LOG_FILE } # 5단계: 포트 스캔 (서비스 가용성 확인) check_services() { log_message "=== 5단계: 핵심 서비스 확인 ===" services=( "8.8.8.8:53:DNS" "google.com:80:HTTP" "google.com:443:HTTPS" "github.com:22:SSH" ) for service in "${services[@]}"; do IFS=':' read -r host port name &lt;&lt;&lt; "$service" if timeout 5 bash -c "echo &gt;/dev/tcp/$host/$port" 2&gt;/dev/null; then log_message "✅ $name ($host:$port): 접근 가능" else log_message "❌ $name ($host:$port): 접근 불가" fi done } # 6단계: 자동 복구 시도 auto_recovery() { log_message "=== 6단계: 자동 복구 시도 ===" # 네트워크 관리자 재시작 if systemctl is-active NetworkManager &gt;/dev/null 2&gt;&amp;1; then log_message "NetworkManager 재시작 중..." sudo systemctl restart NetworkManager sleep 10 fi # 방화벽 규칙 초기화 (임시) log_message "방화벽 규칙 임시 허용..." sudo iptables -P INPUT ACCEPT sudo iptables -P FORWARD ACCEPT sudo iptables -P OUTPUT ACCEPT # DNS 캐시 플러시 log_message "DNS 캐시 플러시..." sudo systemctl restart systemd-resolved log_message "자동 복구 완료. 5분 후 재테스트 예정..." } # 메인 실행 함수 main() { log_message "==================== 네트워크 진단 시작 ====================" failure_count=0 check_connectivity || ((failure_count++)) check_dns || ((failure_count++)) check_interfaces || ((failure_count++)) check_routing || ((failure_count++)) check_services || ((failure_count++)) if [ $failure_count -gt 2 ]; then log_message "⚠️ 심각한 네트워크 문제 감지 ($failure_count 개 실패)" auto_recovery # 5분 후 재테스트 sleep 300 log_message "==================== 복구 후 재진단 ====================" main else log_message "✅ 네트워크 상태 정상 (실패: $failure_count 개)" fi log_message "==================== 진단 완료 ====================" } # 스크립트 실행 main 최신 보안 위협과 대응 🎯 AI/ML 기반 위협 탐지 import pandas as pd import numpy as np from sklearn.ensemble import IsolationForest from sklearn.preprocessing import StandardScaler import matplotlib.pyplot as plt class NetworkAnomalyDetector: def __init__(self): self.model = IsolationForest(contamination=0.1, random_state=42) self.scaler = StandardScaler() def prepare_features(self, network_data): """네트워크 데이터에서 피처 추출""" features = pd.DataFrame() # 시간대별 트래픽 패턴 features['hour'] = pd.to_datetime(network_data['timestamp']).dt.hour features['day_of_week'] = pd.to_datetime(network_data['timestamp']).dt.dayofweek # 트래픽 볼륨 features['bytes_per_second'] = network_data['bytes'] / network_data['duration'] features['packets_per_second'] = network_data['packets'] / network_data['duration'] # 연결 패턴 features['unique_src_ports'] = network_data.groupby('src_ip')['src_port'].nunique() features['unique_dst_ports'] = network_data.groupby('src_ip')['dst_port'].nunique() features['connection_count'] = network_data.groupby('src_ip').size() # 프로토콜 분포 protocol_counts = pd.get_dummies(network_data['protocol']) features = pd.concat([features.reset_index(drop=True), protocol_counts.reset_index(drop=True)], axis=1) return features.fillna(0) def train(self, training_data): """정상 트래픽으로 모델 학습""" features = self.prepare_features(training_data) scaled_features = self.scaler.fit_transform(features) self.model.fit(scaled_features) def detect_anomalies(self, test_data): """이상 트래픽 탐지""" features = self.prepare_features(test_data) scaled_features = self.scaler.transform(features) # 이상 점수 계산 (-1: 이상, 1: 정상) predictions = self.model.predict(scaled_features) anomaly_scores = self.model.score_samples(scaled_features) # 결과 데이터프레임 생성 results = test_data.copy() results['is_anomaly'] = predictions == -1 results['anomaly_score'] = anomaly_scores return results def visualize_anomalies(self, results): """이상 탐지 결과 시각화""" fig, axes = plt.subplots(2, 2, figsize=(15, 10)) # 시간별 이상 트래픽 hourly_anomalies = results.groupby( pd.to_datetime(results['timestamp']).dt.hour )['is_anomaly'].sum() axes[0,0].bar(hourly_anomalies.index, hourly_anomalies.values) axes[0,0].set_title('시간대별 이상 트래픽') axes[0,0].set_xlabel('시간') axes[0,0].set_ylabel('이상 트래픽 수') # IP별 이상 점수 분포 ip_scores = results.groupby('src_ip')['anomaly_score'].mean().sort_values() axes[0,1].barh(range(len(ip_scores.tail(10))), ip_scores.tail(10).values) axes[0,1].set_yticks(range(len(ip_scores.tail(10)))) axes[0,1].set_yticklabels(ip_scores.tail(10).index) axes[0,1].set_title('상위 10개 의심 IP') # 포트 스캔 패턴 port_scan_ips = results[results['unique_dst_ports'] &gt; 100]['src_ip'].value_counts() if len(port_scan_ips) &gt; 0: axes[1,0].bar(range(len(port_scan_ips.head(10))), port_scan_ips.head(10).values) axes[1,0].set_xticks(range(len(port_scan_ips.head(10)))) axes[1,0].set_xticklabels(port_scan_ips.head(10).index, rotation=45) axes[1,0].set_title('포트 스캔 의심 IP') # 데이터 전송량 분포 axes[1,1].scatter(results['bytes'], results['anomaly_score'], c=results['is_anomaly'], alpha=0.6) axes[1,1].set_xlabel('전송 바이트') axes[1,1].set_ylabel('이상 점수') axes[1,1].set_title('데이터 전송량 vs 이상 점수') plt.tight_layout() plt.show() # 사용 예시 detector = NetworkAnomalyDetector() # 모의 네트워크 데이터 생성 training_data = pd.DataFrame({ 'timestamp': pd.date_range('2024-03-01', periods=10000, freq='1min'), 'src_ip': np.random.choice(['192.168.1.100', '192.168.1.101', '192.168.1.102'], 10000), 'dst_ip': np.random.choice(['8.8.8.8', '1.1.1.1', '208.67.222.222'], 10000), 'src_port': np.random.randint(1024, 65535, 10000), 'dst_port': np.random.choice([80, 443, 53, 22], 10000), 'protocol': np.random.choice(['TCP', 'UDP', 'ICMP'], 10000), 'bytes': np.random.lognormal(8, 2, 10000), 'packets': np.random.poisson(50, 10000), 'duration': np.random.exponential(30, 10000) }) detector.train(training_data) # 테스트 데이터에 일부 이상 트래픽 포함 test_data = training_data.sample(1000).copy() # 포트 스캔 시뮬레이션 test_data.loc[0:50, 'dst_port'] = range(1, 51) test_data.loc[0:50, 'src_ip'] = '10.0.0.100' # 외부 IP results = detector.detect_anomalies(test_data) detector.visualize_anomalies(results) 마무리 이 시리즈를 통해 네트워킹의 모든 측면을 다뤘습니다: Part 1: OSI 7계층과 TCP/IP 프로토콜 기초 Part 2: IP 주소 체계와 서브네팅 Part 3: 라우팅과 스위칭 고급 기술 Part 4: 무선 네트워킹과 최신 기술 동향 Part 5: 네트워크 보안과 고급 트러블슈팅 실무에서 이 지식들을 적극 활용하여 안전하고 효율적인 네트워크 인프라를 구축하시기 바랍니다! 🌐🔒 추천 학습 자료 서적: “Computer Networking: A Top-Down Approach” - Kurose &amp; Ross 실습: Packet Tracer, GNS3, EVE-NG 인증: CCNA, CCNP, CCIE (Cisco), JNCIA, JNCIP (Juniper) 오픈소스: Wireshark, pfSense, OpenWrt, Suricata 네트워크 마스터의 길, 함께 걸어가요! 🚀]]></summary></entry><entry><title type="html">리눅스 보안 완전 가이드 3편 - SELinux/AppArmor와 시스템 하드닝 | Linux Security Guide Part 3 - SELinux/AppArmor &amp;amp; System Hardening</title><link href="https://leeyonghe.github.io/infra-blog/blog/2025/02/19/linux-security-guide-part3.html" rel="alternate" type="text/html" title="리눅스 보안 완전 가이드 3편 - SELinux/AppArmor와 시스템 하드닝 | Linux Security Guide Part 3 - SELinux/AppArmor &amp;amp; System Hardening" /><published>2025-02-19T00:00:00+00:00</published><updated>2025-02-19T00:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2025/02/19/linux-security-guide-part3</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2025/02/19/linux-security-guide-part3.html"><![CDATA[<p>리눅스 시스템의 핵심 보안 레이어인 SELinux/AppArmor와 시스템 하드닝 기법을 완전히 마스터해보겠습니다. 강제 접근 제어부터 커널 보안 매개변수까지 최고 수준의 시스템 보안을 구축하는 방법을 다룹니다.</p>

<h2 id="selinux-완전-마스터--selinux-complete-mastery">SELinux 완전 마스터 | SELinux Complete Mastery</h2>

<h3 id="-selinux-기초부터-고급까지">🔐 SELinux 기초부터 고급까지</h3>

<h4 id="selinux-개념-및-초기-설정">SELinux 개념 및 초기 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SELinux 상태 및 정보 확인</span>
sestatus                    <span class="c"># 전체 상태 확인</span>
getenforce                  <span class="c"># 현재 모드 확인</span>
seinfo                      <span class="c"># 정책 통계</span>
semanage <span class="nt">-l</span>                 <span class="c"># 관리 가능한 객체 목록</span>

<span class="c"># SELinux 모드 설정</span>
<span class="c"># /etc/selinux/config</span>
<span class="nv">SELINUX</span><span class="o">=</span>enforcing           <span class="c"># enforcing, permissive, disabled</span>
<span class="nv">SELINUXTYPE</span><span class="o">=</span>targeted        <span class="c"># targeted, minimum, mls</span>

<span class="c"># 임시 모드 변경 (재부팅 시 원복)</span>
setenforce 1                <span class="c"># enforcing 모드</span>
setenforce 0                <span class="c"># permissive 모드</span>

<span class="c"># SELinux 라벨링 시스템 이해</span>
<span class="c"># 모든 객체는 security context를 가짐: user:role:type:level</span>
<span class="nb">ls</span> <span class="nt">-Z</span> /var/www/html/        <span class="c"># 파일 컨텍스트 확인</span>
ps auxZ                     <span class="c"># 프로세스 컨텍스트 확인</span>
<span class="nb">id</span> <span class="nt">-Z</span>                       <span class="c"># 현재 사용자 컨텍스트</span>

<span class="c"># 컨텍스트 구성 요소</span>
<span class="c"># user: SELinux 사용자 (unconfined_u, system_u, user_u 등)</span>
<span class="c"># role: 역할 (unconfined_r, system_r, object_r 등)  </span>
<span class="c"># type: 타입/도메인 (httpd_t, httpd_exec_t, user_home_t 등)</span>
<span class="c"># level: MLS/MCS 레벨 (s0, s0:c0,c1 등)</span>
</code></pre></div></div>

<h4 id="파일-컨텍스트-관리">파일 컨텍스트 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 파일 컨텍스트 확인 및 복원</span>
<span class="nb">ls</span> <span class="nt">-lZ</span> /var/www/html/
restorecon <span class="nt">-Rv</span> /var/www/html/      <span class="c"># 기본 컨텍스트로 복원</span>
restorecon <span class="nt">-RvF</span> /var/www/html/     <span class="c"># 강제 복원</span>

<span class="c"># 파일 컨텍스트 수동 설정</span>
<span class="nb">chcon</span> <span class="nt">-t</span> httpd_exec_t /usr/local/apache2/bin/httpd
<span class="nb">chcon</span> <span class="nt">-u</span> system_u /var/www/html/index.html
<span class="nb">chcon</span> <span class="nt">--reference</span><span class="o">=</span>/var/www/html/index.html /var/www/html/newfile.html

<span class="c"># 영구적인 컨텍스트 설정 (정책에 추가)</span>
semanage fcontext <span class="nt">-a</span> <span class="nt">-t</span> httpd_exec_t <span class="s2">"/usr/local/apache2/bin/httpd"</span>
semanage fcontext <span class="nt">-a</span> <span class="nt">-t</span> httpd_config_t <span class="s2">"/etc/myapp/.*</span><span class="se">\.</span><span class="s2">conf"</span>
semanage fcontext <span class="nt">-a</span> <span class="nt">-t</span> user_home_t <span class="s2">"/home/[^/]+/mydata(/.*)?"</span>

<span class="c"># 컨텍스트 정책 확인</span>
semanage fcontext <span class="nt">-l</span> | <span class="nb">grep </span>httpd
matchpathcon /var/www/html/index.html    <span class="c"># 예상 컨텍스트 확인</span>

<span class="c"># 컨텍스트 변경 내역 추적</span>
ausearch <span class="nt">-m</span> AVC <span class="nt">-ts</span> today              <span class="c"># AVC 거부 로그</span>
sealert <span class="nt">-a</span> /var/log/audit/audit.log    <span class="c"># 정책 제안</span>

<span class="c"># 고급 컨텍스트 관리 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/selinux-context-manager.sh</span>

<span class="nv">ACTION</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">TARGET</span><span class="o">=</span><span class="nv">$2</span>
<span class="nv">CONTEXT</span><span class="o">=</span><span class="nv">$3</span>

<span class="k">case</span> <span class="nv">$ACTION</span> <span class="k">in</span>
    <span class="s2">"scan"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"=== SELinux Context Scan ==="</span>
        find <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span> <span class="nt">-print0</span> | xargs <span class="nt">-0</span> <span class="nb">ls</span> <span class="nt">-lZ</span> | <span class="se">\</span>
        <span class="nb">awk</span> <span class="s1">'{print $4, $9}'</span> | <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span>
        <span class="p">;;</span>
        
    <span class="s2">"restore"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Restoring contexts for </span><span class="nv">$TARGET</span><span class="s2">..."</span>
        restorecon <span class="nt">-RvF</span> <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"set-bulk"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Setting bulk context </span><span class="nv">$CONTEXT</span><span class="s2"> for </span><span class="nv">$TARGET</span><span class="s2">..."</span>
        find <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span> <span class="nt">-type</span> f <span class="nt">-exec</span> <span class="nb">chcon</span> <span class="nt">-t</span> <span class="s2">"</span><span class="nv">$CONTEXT</span><span class="s2">"</span> <span class="o">{}</span> <span class="se">\;</span>
        <span class="p">;;</span>
        
    <span class="s2">"analyze"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"=== Context Analysis for </span><span class="nv">$TARGET</span><span class="s2"> ==="</span>
        <span class="c"># 비정상적인 컨텍스트 찾기</span>
        find <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span> <span class="nt">-type</span> f <span class="nt">-exec</span> <span class="nb">ls</span> <span class="nt">-lZ</span> <span class="o">{}</span> <span class="se">\;</span> | <span class="se">\</span>
        <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"system_u:object_r"</span> | <span class="se">\</span>
        <span class="nb">awk</span> <span class="s1">'{print "Unusual context:", $4, $9}'</span>
        <span class="p">;;</span>
        
    <span class="k">*</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> {scan|restore|set-bulk|analyze} &lt;path&gt; [context]"</span>
        <span class="nb">exit </span>1
        <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<h4 id="selinux-불린-값-관리">SELinux 불린 값 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 불린 값 확인</span>
getsebool <span class="nt">-a</span>                          <span class="c"># 모든 불린 값</span>
getsebool <span class="nt">-a</span> | <span class="nb">grep </span>httpd            <span class="c"># httpd 관련 불린</span>
getsebool httpd_can_network_connect   <span class="c"># 특정 불린</span>

<span class="c"># 불린 값 설정</span>
setsebool httpd_can_network_connect on           <span class="c"># 임시 설정</span>
setsebool <span class="nt">-P</span> httpd_can_network_connect on        <span class="c"># 영구 설정</span>

<span class="c"># 주요 웹 서버 불린 값들</span>
setsebool <span class="nt">-P</span> httpd_can_network_connect on        <span class="c"># 네트워크 연결 허용</span>
setsebool <span class="nt">-P</span> httpd_can_sendmail on               <span class="c"># 메일 발송 허용</span>
setsebool <span class="nt">-P</span> httpd_enable_cgi on                 <span class="c"># CGI 실행 허용</span>
setsebool <span class="nt">-P</span> httpd_read_user_content on          <span class="c"># 사용자 콘텐츠 읽기</span>
setsebool <span class="nt">-P</span> httpd_enable_homedirs on            <span class="c"># 홈 디렉토리 접근</span>
setsebool <span class="nt">-P</span> httpd_execmem on                    <span class="c"># 메모리 실행 허용</span>
setsebool <span class="nt">-P</span> httpd_use_nfs on                    <span class="c"># NFS 사용 허용</span>

<span class="c"># 데이터베이스 관련 불린</span>
setsebool <span class="nt">-P</span> allow_user_mysql_connect on         <span class="c"># MySQL 연결 허용</span>
setsebool <span class="nt">-P</span> mysql_connect_any on                <span class="c"># MySQL 임의 연결</span>

<span class="c"># SSH 관련 불린</span>
setsebool <span class="nt">-P</span> ssh_chroot_rw_homedirs on           <span class="c"># chroot에서 홈디렉토리 쓰기</span>

<span class="c"># 불린 값 모니터링 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/selinux-bool-monitor.sh</span>

<span class="c"># 현재 불린 설정 백업</span>
getsebool <span class="nt">-a</span> <span class="o">&gt;</span> /var/log/selinux-bools-<span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span>.log

<span class="c"># 변경된 불린 값 감지</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> /var/log/selinux-bools-last.log <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"=== Boolean Changes Detected ==="</span>
    diff /var/log/selinux-bools-last.log /var/log/selinux-bools-<span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span>.log
<span class="k">fi

</span><span class="nb">cp</span> /var/log/selinux-bools-<span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span>.log /var/log/selinux-bools-last.log

<span class="c"># 보안에 민감한 불린 값들 체크</span>
<span class="nv">CRITICAL_BOOLS</span><span class="o">=(</span>
    <span class="s2">"httpd_execmem"</span>
    <span class="s2">"httpd_enable_cgi"</span>
    <span class="s2">"allow_execheap"</span>
    <span class="s2">"allow_execstack"</span>
    <span class="s2">"selinuxuser_execstack"</span>
<span class="o">)</span>

<span class="nb">echo</span> <span class="s2">"=== Critical Boolean Status ==="</span>
<span class="k">for </span>bool <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CRITICAL_BOOLS</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">status</span><span class="o">=</span><span class="si">$(</span>getsebool <span class="s2">"</span><span class="nv">$bool</span><span class="s2">"</span> 2&gt;/dev/null<span class="si">)</span>
    <span class="k">if </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$status</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">" on"</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"WARNING: </span><span class="nv">$bool</span><span class="s2"> is enabled"</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"OK: </span><span class="nv">$bool</span><span class="s2"> is disabled"</span>
    <span class="k">fi
done</span>
</code></pre></div></div>

<h4 id="포트-라벨-관리">포트 라벨 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 포트 라벨 확인</span>
semanage port <span class="nt">-l</span>                    <span class="c"># 모든 포트 라벨</span>
semanage port <span class="nt">-l</span> | <span class="nb">grep </span>http        <span class="c"># HTTP 관련 포트</span>
ss <span class="nt">-tlnZ</span>                           <span class="c"># 네트워크 서비스와 컨텍스트</span>

<span class="c"># 새로운 포트에 라벨 할당</span>
semanage port <span class="nt">-a</span> <span class="nt">-t</span> http_port_t <span class="nt">-p</span> tcp 8080      <span class="c"># HTTP 포트 추가</span>
semanage port <span class="nt">-a</span> <span class="nt">-t</span> ssh_port_t <span class="nt">-p</span> tcp 2222       <span class="c"># SSH 포트 추가</span>
semanage port <span class="nt">-a</span> <span class="nt">-t</span> mysqld_port_t <span class="nt">-p</span> tcp 3307    <span class="c"># MySQL 포트 추가</span>

<span class="c"># 포트 라벨 수정</span>
semanage port <span class="nt">-m</span> <span class="nt">-t</span> http_port_t <span class="nt">-p</span> tcp 8080

<span class="c"># 포트 라벨 제거</span>
semanage port <span class="nt">-d</span> <span class="nt">-t</span> http_port_t <span class="nt">-p</span> tcp 8080

<span class="c"># 커스텀 포트 타입 생성 (고급)</span>
<span class="c"># myapp.te 파일 생성</span>
<span class="nb">cat</span> <span class="o">&gt;</span> myapp.te <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
policy_module(myapp, 1.0)

type myapp_port_t;
corenet_port(myapp_port_t)

allow httpd_t myapp_port_t:tcp_socket name_bind;
</span><span class="no">EOF

</span><span class="c"># 정책 컴파일 및 설치</span>
make <span class="nt">-f</span> /usr/share/selinux/devel/Makefile myapp.pp
semodule <span class="nt">-i</span> myapp.pp
semanage port <span class="nt">-a</span> <span class="nt">-t</span> myapp_port_t <span class="nt">-p</span> tcp 9999
</code></pre></div></div>

<h3 id="️-selinux-커스텀-정책-작성">🛡️ SELinux 커스텀 정책 작성</h3>

<h4 id="정책-모듈-개발">정책 모듈 개발</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 정책 개발 환경 준비</span>
yum <span class="nb">install </span>selinux-policy-devel    <span class="c"># CentOS/RHEL</span>
apt-get <span class="nb">install </span>selinux-policy-dev  <span class="c"># Ubuntu/Debian</span>

<span class="c"># AVC 거부 분석 및 정책 생성</span>
<span class="c"># 1. 서비스 실행하여 AVC 거부 로그 수집</span>
systemctl start myapp
<span class="nb">tail</span> <span class="nt">-f</span> /var/log/audit/audit.log | <span class="nb">grep </span>AVC

<span class="c"># 2. audit2allow로 정책 제안 생성</span>
<span class="nb">grep </span>myapp /var/log/audit/audit.log | audit2allow <span class="nt">-m</span> myapp_policy
<span class="nb">grep </span>myapp /var/log/audit/audit.log | audit2allow <span class="nt">-M</span> myapp_policy

<span class="c"># 3. 수동으로 정책 모듈 작성</span>
<span class="nb">cat</span> <span class="o">&gt;</span> myapp_custom.te <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
policy_module(myapp_custom, 1.0)

########################################
#
# Declarations
#

type myapp_t;
type myapp_exec_t;
init_daemon_domain(myapp_t, myapp_exec_t)

type myapp_config_t;
files_config_file(myapp_config_t)

type myapp_var_lib_t;
files_type(myapp_var_lib_t)

type myapp_log_t;
logging_log_file(myapp_log_t)

type myapp_port_t;
corenet_port(myapp_port_t)

########################################
#
# myapp local policy
#

# 기본 도메인 권한
allow myapp_t self:process { fork signal_perms };
allow myapp_t self:fifo_file rw_fifo_file_perms;
allow myapp_t self:unix_stream_socket create_stream_socket_perms;

# 네트워크 권한
allow myapp_t self:tcp_socket create_stream_socket_perms;
allow myapp_t myapp_port_t:tcp_socket name_bind;
corenet_tcp_sendrecv_generic_if(myapp_t)
corenet_tcp_sendrecv_generic_node(myapp_t)

# 파일 시스템 권한
allow myapp_t myapp_config_t:file read_file_perms;
allow myapp_t myapp_var_lib_t:dir create_dir_perms;
allow myapp_t myapp_var_lib_t:file create_file_perms;
allow myapp_t myapp_log_t:file create_file_perms;

# 시스템 서비스 상호작용
can_exec(myapp_t, myapp_exec_t)
files_read_etc_files(myapp_t)
libs_use_ld_so(myapp_t)
libs_use_shared_libs(myapp_t)

# 로깅
logging_send_syslog_msg(myapp_t)
</span><span class="no">EOF

</span><span class="c"># 4. 파일 컨텍스트 정의</span>
<span class="nb">cat</span> <span class="o">&gt;</span> myapp_custom.fc <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
/usr/local/bin/myapp        --      gen_context(system_u:object_r:myapp_exec_t,s0)
/etc/myapp(/.*)?                    gen_context(system_u:object_r:myapp_config_t,s0)
/var/lib/myapp(/.*)?                gen_context(system_u:object_r:myapp_var_lib_t,s0)
/var/log/myapp(/.*)?                gen_context(system_u:object_r:myapp_log_t,s0)
</span><span class="no">EOF

</span><span class="c"># 5. 인터페이스 파일 (다른 모듈에서 사용할 인터페이스)</span>
<span class="nb">cat</span> <span class="o">&gt;</span> myapp_custom.if <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
## &lt;summary&gt;MyApp custom policy&lt;/summary&gt;

########################################
## &lt;summary&gt;
##  Execute myapp in the myapp domain.
## &lt;/summary&gt;
## &lt;param name="domain"&gt;
##  &lt;summary&gt;
##  Domain allowed to transition.
##  &lt;/summary&gt;
## &lt;/param&gt;
#
interface(`myapp_domtrans',`
    gen_require(`
        type myapp_t, myapp_exec_t;
    ')

    corecmd_search_bin(</span><span class="nv">$1</span><span class="sh">)
    domtrans_pattern(</span><span class="nv">$1</span><span class="sh">, myapp_exec_t, myapp_t)
')

########################################
## &lt;summary&gt;
##  Read myapp configuration files.
## &lt;/summary&gt;
## &lt;param name="domain"&gt;
##  &lt;summary&gt;
##  Domain allowed access.
##  &lt;/summary&gt;
## &lt;/param&gt;
#
interface(`myapp_read_config',`
    gen_require(`
        type myapp_config_t;
    ')

    files_search_etc(</span><span class="nv">$1</span><span class="sh">)
    read_files_pattern(</span><span class="nv">$1</span><span class="sh">, myapp_config_t, myapp_config_t)
')
</span><span class="no">EOF

</span><span class="c"># 6. 정책 컴파일 및 설치</span>
make <span class="nt">-f</span> /usr/share/selinux/devel/Makefile myapp_custom.pp
semodule <span class="nt">-i</span> myapp_custom.pp

<span class="c"># 7. 파일 컨텍스트 적용</span>
semanage fcontext <span class="nt">-a</span> <span class="nt">-f</span> <span class="s2">""</span> <span class="nt">-t</span> myapp_exec_t <span class="s2">"/usr/local/bin/myapp"</span>
semanage fcontext <span class="nt">-a</span> <span class="nt">-f</span> <span class="s2">""</span> <span class="nt">-t</span> myapp_config_t <span class="s2">"/etc/myapp(/.*)?"</span>
restorecon <span class="nt">-Rv</span> /usr/local/bin/myapp /etc/myapp

<span class="c"># 8. 포트 라벨 설정</span>
semanage port <span class="nt">-a</span> <span class="nt">-t</span> myapp_port_t <span class="nt">-p</span> tcp 9090
</code></pre></div></div>

<h4 id="정책-디버깅-및-최적화">정책 디버깅 및 최적화</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/selinux-debug.sh</span>
<span class="c"># SELinux 정책 디버깅 도구</span>

<span class="nv">MODE</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">MODULE</span><span class="o">=</span><span class="nv">$2</span>

<span class="k">case</span> <span class="nv">$MODE</span> <span class="k">in</span>
    <span class="s2">"avc-analysis"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"=== AVC Denial Analysis ==="</span>
        ausearch <span class="nt">-m</span> AVC <span class="nt">-ts</span> today | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$MODULE</span><span class="s2">"</span> | <span class="se">\</span>
        <span class="k">while </span><span class="nb">read </span>line<span class="p">;</span> <span class="k">do
            </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | audit2allow <span class="nt">-R</span>
            <span class="nb">echo</span> <span class="s2">"---"</span>
        <span class="k">done</span>
        <span class="p">;;</span>
        
    <span class="s2">"permissive-test"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Setting </span><span class="nv">$MODULE</span><span class="s2"> to permissive mode for testing..."</span>
        semanage permissive <span class="nt">-a</span> <span class="k">${</span><span class="nv">MODULE</span><span class="k">}</span>_t
        <span class="nb">echo</span> <span class="s2">"Test your application, then check denials:"</span>
        <span class="nb">echo</span> <span class="s2">"ausearch -m AVC -ts now"</span>
        <span class="nb">echo</span> <span class="s2">"When done, remove permissive mode:"</span>
        <span class="nb">echo</span> <span class="s2">"semanage permissive -d </span><span class="k">${</span><span class="nv">MODULE</span><span class="k">}</span><span class="s2">_t"</span>
        <span class="p">;;</span>
        
    <span class="s2">"policy-stats"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"=== Policy Statistics ==="</span>
        seinfo <span class="nt">-t</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$MODULE</span><span class="s2">"</span>
        seinfo <span class="nt">-r</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$MODULE</span><span class="s2">"</span>
        seinfo <span class="nt">-u</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$MODULE</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"generate-policy"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Generating policy for </span><span class="nv">$MODULE</span><span class="s2">..."</span>
        ausearch <span class="nt">-m</span> AVC <span class="nt">-ts</span> today | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$MODULE</span><span class="s2">"</span> | <span class="se">\</span>
        audit2allow <span class="nt">-M</span> <span class="k">${</span><span class="nv">MODULE</span><span class="k">}</span>_additional
        
        <span class="nb">echo</span> <span class="s2">"Generated policy module: </span><span class="k">${</span><span class="nv">MODULE</span><span class="k">}</span><span class="s2">_additional.pp"</span>
        <span class="nb">echo</span> <span class="s2">"Install with: semodule -i </span><span class="k">${</span><span class="nv">MODULE</span><span class="k">}</span><span class="s2">_additional.pp"</span>
        <span class="p">;;</span>
        
    <span class="s2">"module-deps"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"=== Module Dependencies for </span><span class="nv">$MODULE</span><span class="s2"> ==="</span>
        semodule <span class="nt">-l</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$MODULE</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="k">*</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> {avc-analysis|permissive-test|policy-stats|generate-policy|module-deps} &lt;module&gt;"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Examples:"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> avc-analysis httpd"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> permissive-test myapp"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> generate-policy myapp"</span>
        <span class="nb">exit </span>1
        <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<h2 id="apparmor-완전-마스터--apparmor-complete-mastery">AppArmor 완전 마스터 | AppArmor Complete Mastery</h2>

<h3 id="️-apparmor-프로파일-작성-및-관리">🛡️ AppArmor 프로파일 작성 및 관리</h3>

<h4 id="apparmor-기본-관리">AppArmor 기본 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># AppArmor 상태 확인</span>
aa-status                   <span class="c"># 전체 상태</span>
aa-enabled                  <span class="c"># 활성화 여부</span>
aa-unconfined               <span class="c"># 제한되지 않은 프로세스</span>

<span class="c"># 프로파일 모드 관리</span>
aa-enforce /etc/apparmor.d/usr.bin.firefox     <span class="c"># enforce 모드</span>
aa-complain /etc/apparmor.d/usr.bin.firefox    <span class="c"># complain 모드  </span>
aa-disable /etc/apparmor.d/usr.bin.firefox     <span class="c"># 비활성화</span>

<span class="c"># 프로파일 재로드</span>
apparmor_parser <span class="nt">-r</span> /etc/apparmor.d/usr.bin.firefox
apparmor_parser <span class="nt">-R</span> /etc/apparmor.d/            <span class="c"># 모든 프로파일 재로드</span>

<span class="c"># 프로파일 상태 확인</span>
aa-status | <span class="nb">grep </span>firefox
</code></pre></div></div>

<h4 id="고급-apparmor-프로파일-작성">고급 AppArmor 프로파일 작성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 웹 애플리케이션용 커스텀 프로파일</span>
<span class="c"># /etc/apparmor.d/usr.local.bin.webapp</span>
<span class="c">#include &lt;tunables/global&gt;</span>

profile /usr/local/bin/webapp <span class="nv">flags</span><span class="o">=(</span>attach_disconnected,mediate_deleted<span class="o">)</span> <span class="o">{</span>
  <span class="c">#include &lt;abstractions/base&gt;</span>
  <span class="c">#include &lt;abstractions/nameservice&gt;</span>
  <span class="c">#include &lt;abstractions/openssl&gt;</span>
  <span class="c">#include &lt;abstractions/ssl_certs&gt;</span>
  
  <span class="c"># 실행 권한</span>
  /usr/local/bin/webapp mr,
  
  <span class="c"># 라이브러리 접근</span>
  /lib<span class="o">{</span>,32,64<span class="o">}</span>/<span class="k">**</span> mr,
  /usr/lib<span class="o">{</span>,32,64<span class="o">}</span>/<span class="k">**</span> mr,
  /usr/local/lib/<span class="k">**</span> mr,
  
  <span class="c"># 설정 파일 (읽기 전용)</span>
  /etc/webapp/ r,
  /etc/webapp/<span class="k">**</span> r,
  owner /etc/webapp/webapp.conf r,
  
  <span class="c"># 사용자별 설정 및 데이터</span>
  owner @<span class="o">{</span>HOME<span class="o">}</span>/.webapp/ rw,
  owner @<span class="o">{</span>HOME<span class="o">}</span>/.webapp/<span class="k">**</span> rw,
  owner @<span class="o">{</span>HOME<span class="o">}</span>/.webapp/cache/<span class="k">**</span> rwk,
  
  <span class="c"># 애플리케이션 데이터 디렉토리</span>
  /var/lib/webapp/ r,
  /var/lib/webapp/<span class="k">**</span> rw,
  /var/cache/webapp/ r,
  /var/cache/webapp/<span class="k">**</span> rw,
  
  <span class="c"># 로그 파일</span>
  /var/log/webapp/ r,
  /var/log/webapp/<span class="k">*</span>.log w,
  /var/log/webapp/<span class="k">*</span>.log.[0-9] w,
  
  <span class="c"># 네트워크 접근</span>
  network inet stream,
  network inet6 stream,
  network inet dgram,
  network inet6 dgram,
  network netlink raw,
  
  <span class="c"># 프로세스 제어</span>
  capability setuid,
  capability setgid,
  capability dac_override,
  capability net_bind_service,
  
  <span class="c"># 임시 파일</span>
  /tmp/ r,
  /tmp/webapp.<span class="k">**</span> rw,
  owner /tmp/webapp-@<span class="o">{</span>pid<span class="o">}</span>-<span class="k">*</span> rw,
  /var/tmp/ r,
  /var/tmp/webapp.<span class="k">**</span> rw,
  
  <span class="c"># 시스템 정보 접근</span>
  /proc/sys/kernel/random/uuid r,
  /proc/loadavg r,
  /proc/meminfo r,
  /sys/devices/system/cpu/ r,
  /sys/devices/system/cpu/cpu[0-9]<span class="k">*</span>/cpufreq/scaling_cur_freq r,
  
  <span class="c"># 거부할 접근들 (명시적 거부)</span>
  deny /etc/passwd r,
  deny /etc/shadow r,
  deny /etc/gshadow r,
  deny owner /home/<span class="k">*</span>/.ssh/<span class="k">**</span> rw,
  deny /proc/[0-9]<span class="k">*</span>/maps r,
  deny /proc/[0-9]<span class="k">*</span>/mem r,
  deny /proc/kmem r,
  deny /proc/kcore r,
  deny /boot/<span class="k">**</span> r,
  
  <span class="c"># 하위 프로세스 실행</span>
  /bin/dash ix,
  /bin/bash ix,
  /usr/bin/python3 ix,
  /usr/bin/python3.[0-9] ix,
  /usr/local/bin/webapp-helper Cx -&gt; helper,
  
  <span class="c"># 조건부 실행 규칙</span>
  profile helper <span class="o">{</span>
    <span class="c">#include &lt;abstractions/base&gt;</span>
    
    /usr/local/bin/webapp-helper mr,
    /var/lib/webapp/helper-data/<span class="k">**</span> r,
    /tmp/helper-<span class="k">**</span> rw,
    
    <span class="c"># 부모로부터 상속받은 파일 디스크립터만 사용</span>
    deny network,
    deny capability,
  <span class="o">}</span>
  
  <span class="c"># 신호 처리</span>
  signal <span class="o">(</span>send<span class="o">)</span> <span class="nb">set</span><span class="o">=(</span>term,kill,usr1,usr2<span class="o">)</span> <span class="nv">peer</span><span class="o">=</span>/usr/local/bin/webapp,
  signal <span class="o">(</span>receive<span class="o">)</span> <span class="nb">set</span><span class="o">=(</span>term,kill,usr1,usr2<span class="o">)</span>,
  
  <span class="c"># DBus 접근 (필요시)</span>
  dbus <span class="o">(</span>send<span class="o">)</span>
       <span class="nv">bus</span><span class="o">=</span>session
       <span class="nv">path</span><span class="o">=</span>/org/freedesktop/Notifications
       <span class="nv">interface</span><span class="o">=</span>org.freedesktop.Notifications
       <span class="nv">member</span><span class="o">=</span>Notify
       <span class="nv">peer</span><span class="o">=(</span><span class="nv">name</span><span class="o">=</span>org.freedesktop.Notifications<span class="o">)</span>,
<span class="o">}</span>

<span class="c"># 데이터베이스 서버용 프로파일</span>
<span class="c"># /etc/apparmor.d/usr.sbin.mysqld-custom</span>
<span class="c">#include &lt;tunables/global&gt;</span>

profile /usr/sbin/mysqld-custom <span class="nv">flags</span><span class="o">=(</span>attach_disconnected,mediate_deleted<span class="o">)</span> <span class="o">{</span>
  <span class="c">#include &lt;abstractions/base&gt;</span>
  <span class="c">#include &lt;abstractions/mysql&gt;</span>
  <span class="c">#include &lt;abstractions/nameservice&gt;</span>
  <span class="c">#include &lt;abstractions/user-tmp&gt;</span>
  
  capability dac_override,
  capability setgid,
  capability setuid,
  capability sys_resource,
  capability net_bind_service,
  
  <span class="c"># MySQL 바이너리</span>
  /usr/sbin/mysqld mr,
  /usr/sbin/mysqld-debug mr,
  
  <span class="c"># 설정 파일</span>
  /etc/mysql/ r,
  /etc/mysql/<span class="k">**</span> r,
  /etc/my.cnf r,
  /etc/my.cnf.d/ r,
  /etc/my.cnf.d/<span class="k">*</span>.cnf r,
  
  <span class="c"># 데이터 디렉토리</span>
  /var/lib/mysql/ r,
  /var/lib/mysql/<span class="k">**</span> rwk,
  /var/lib/mysql-files/ r,
  /var/lib/mysql-files/<span class="k">**</span> rw,
  
  <span class="c"># 로그 파일</span>
  /var/log/mysql/ r,
  /var/log/mysql/<span class="k">*</span>.log rw,
  /var/log/mysql.log rw,
  /var/log/mysql/error.log rw,
  
  <span class="c"># 소켓 파일</span>
  /var/run/mysqld/ rw,
  /var/run/mysqld/mysqld.sock rw,
  /tmp/mysql.sock rw,
  
  <span class="c"># 네트워크</span>
  network tcp,
  
  <span class="c"># 프로세스 간 통신</span>
  /proc/<span class="k">*</span>/status r,
  /proc/sys/vm/overcommit_memory r,
  
  <span class="c"># 임시 파일</span>
  /tmp/ r,
  /tmp/mysql-<span class="k">**</span> rw,
  /var/tmp/ r,
  /var/tmp/mysql-<span class="k">**</span> rw,
  
  <span class="c"># 보안 제한</span>
  deny capability sys_ptrace,
  deny @<span class="o">{</span>PROC<span class="o">}</span>/sys/kernel/core_pattern w,
  deny /etc/passwd r,
  deny /etc/shadow r,
<span class="o">}</span>
</code></pre></div></div>

<h4 id="apparmor-프로파일-자동-생성-및-튜닝">AppArmor 프로파일 자동 생성 및 튜닝</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/apparmor-manager.sh</span>
<span class="c"># AppArmor 프로파일 관리 도구</span>

<span class="nv">ACTION</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">BINARY</span><span class="o">=</span><span class="nv">$2</span>
<span class="nv">PROFILE_NAME</span><span class="o">=</span><span class="k">${</span><span class="nv">3</span><span class="k">:-</span><span class="si">$(</span><span class="nb">basename</span> <span class="nv">$BINARY</span><span class="si">)</span><span class="k">}</span>

<span class="k">case</span> <span class="nv">$ACTION</span> <span class="k">in</span>
    <span class="s2">"generate"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Generating AppArmor profile for </span><span class="nv">$BINARY</span><span class="s2">..."</span>
        
        <span class="c"># 1. 기본 프로파일 생성</span>
        aa-genprof <span class="s2">"</span><span class="nv">$BINARY</span><span class="s2">"</span>
        
        <span class="nb">echo</span> <span class="s2">"Profile generation completed."</span>
        <span class="nb">echo</span> <span class="s2">"Test your application and run: </span><span class="nv">$0</span><span class="s2"> tune </span><span class="nv">$BINARY</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"tune"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Tuning AppArmor profile for </span><span class="nv">$BINARY</span><span class="s2">..."</span>
        
        <span class="c"># 로그프로파일링 실행</span>
        aa-logprof
        
        <span class="nb">echo</span> <span class="s2">"Profile tuning completed."</span>
        <span class="p">;;</span>
        
    <span class="s2">"analyze"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"=== AppArmor Profile Analysis for </span><span class="nv">$PROFILE_NAME</span><span class="s2"> ==="</span>
        
        <span class="c"># 프로파일 구문 검사</span>
        apparmor_parser <span class="nt">-p</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span> 2&gt;&amp;1 | <span class="se">\</span>
        <span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"(ERROR|WARNING)"</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"✓ Syntax OK"</span>
        
        <span class="c"># 프로파일 통계</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Profile statistics:"</span>
        <span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"^[[:space:]]*/"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"File rules"</span>
        <span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"capability"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"Capabilities"</span>
        <span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"network"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"Network rules"</span>
        <span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"deny"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"Deny rules"</span>
        
        <span class="c"># 보안 검사</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Security analysis:"</span>
        <span class="k">if </span><span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"capability sys_admin"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"⚠️  WARNING: sys_admin capability found"</span>
        <span class="k">fi
        
        if </span><span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"/etc/shadow"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"⚠️  WARNING: Shadow file access found"</span>  
        <span class="k">fi
        
        if </span><span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"network raw"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"⚠️  WARNING: Raw network access found"</span>
        <span class="k">fi</span>
        <span class="p">;;</span>
        
    <span class="s2">"template"</span><span class="p">)</span>
        <span class="nv">TEMPLATE_TYPE</span><span class="o">=</span><span class="nv">$3</span>
        <span class="nb">echo</span> <span class="s2">"Creating AppArmor profile template for </span><span class="nv">$BINARY</span><span class="s2"> (</span><span class="nv">$TEMPLATE_TYPE</span><span class="s2">)..."</span>
        
        <span class="k">case</span> <span class="nv">$TEMPLATE_TYPE</span> <span class="k">in</span>
            <span class="s2">"webapp"</span><span class="p">)</span>
                <span class="nb">cat</span> <span class="o">&gt;</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span> <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#include &lt;tunables/global&gt;

profile BINARY_PATH {
  #include &lt;abstractions/base&gt;
  #include &lt;abstractions/nameservice&gt;
  
  # Binary execution
  BINARY_PATH mr,
  
  # Libraries
  /lib{,32,64}/** mr,
  /usr/lib{,32,64}/** mr,
  
  # Configuration
  /etc/APP_NAME/ r,
  /etc/APP_NAME/** r,
  
  # Data directories
  /var/lib/APP_NAME/** rw,
  /var/log/APP_NAME/** w,
  
  # Network
  network inet stream,
  
  # Capabilities
  capability setuid,
  capability setgid,
  
  # Temporary files
  /tmp/APP_NAME.** rw,
}
</span><span class="no">EOF
</span>                <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|BINARY_PATH|</span><span class="nv">$BINARY</span><span class="s2">|g"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span>
                <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|APP_NAME|</span><span class="si">$(</span><span class="nb">basename</span> <span class="nv">$BINARY</span><span class="si">)</span><span class="s2">|g"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span>
                <span class="p">;;</span>
                
            <span class="s2">"service"</span><span class="p">)</span>
                <span class="nb">cat</span> <span class="o">&gt;</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span> <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#include &lt;tunables/global&gt;

profile BINARY_PATH flags=(attach_disconnected) {
  #include &lt;abstractions/base&gt;
  #include &lt;abstractions/nameservice&gt;
  
  # Service binary
  BINARY_PATH mr,
  
  # System libraries
  /lib{,32,64}/** mr,
  /usr/lib{,32,64}/** mr,
  
  # Service configuration
  /etc/APP_NAME/ r,
  /etc/APP_NAME/** r,
  
  # Runtime directories
  /var/run/APP_NAME/ rw,
  /var/run/APP_NAME/** rw,
  
  # Log files
  /var/log/APP_NAME/ r,
  /var/log/APP_NAME/*.log w,
  
  # PID file
  /var/run/APP_NAME.pid w,
  
  # Network access
  network inet stream,
  network inet dgram,
  
  # System capabilities
  capability setuid,
  capability setgid,
  capability net_bind_service,
  
  # Signal handling
  signal (receive) set=(term,kill,usr1),
}
</span><span class="no">EOF
</span>                <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|BINARY_PATH|</span><span class="nv">$BINARY</span><span class="s2">|g"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span>
                <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|APP_NAME|</span><span class="si">$(</span><span class="nb">basename</span> <span class="nv">$BINARY</span><span class="si">)</span><span class="s2">|g"</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span>
                <span class="p">;;</span>
        <span class="k">esac</span>
        
        <span class="nb">echo</span> <span class="s2">"Template created: /etc/apparmor.d/</span><span class="nv">$PROFILE_NAME</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"Edit the template and then load it with:"</span>
        <span class="nb">echo</span> <span class="s2">"apparmor_parser -r /etc/apparmor.d/</span><span class="nv">$PROFILE_NAME</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"test"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Testing AppArmor profile for </span><span class="nv">$BINARY</span><span class="s2">..."</span>
        
        <span class="c"># complain 모드로 전환</span>
        aa-complain /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span>
        
        <span class="nb">echo</span> <span class="s2">"Profile set to complain mode."</span>
        <span class="nb">echo</span> <span class="s2">"Run your application tests, then check logs:"</span>
        <span class="nb">echo</span> <span class="s2">"journalctl -f | grep apparmor"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"When testing is complete, switch to enforce mode:"</span>
        <span class="nb">echo</span> <span class="s2">"aa-enforce /etc/apparmor.d/</span><span class="nv">$PROFILE_NAME</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"backup"</span><span class="p">)</span>
        <span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">"/etc/apparmor.d/backups/</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span>
        <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>
        <span class="nb">cp</span> /etc/apparmor.d/<span class="nv">$PROFILE_NAME</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/"</span>
        <span class="nb">echo</span> <span class="s2">"Profile backed up to: </span><span class="nv">$BACKUP_DIR</span><span class="s2">/</span><span class="nv">$PROFILE_NAME</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="k">*</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> {generate|tune|analyze|template|test|backup} &lt;binary&gt; [profile-name]"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Template types for 'template' action:"</span>
        <span class="nb">echo</span> <span class="s2">"  webapp  - Web application template"</span>
        <span class="nb">echo</span> <span class="s2">"  service - System service template"</span>
        <span class="nb">echo</span> <span class="s2">""</span>
        <span class="nb">echo</span> <span class="s2">"Examples:"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> generate /usr/local/bin/myapp"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> template /usr/local/bin/myapp webapp"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> analyze myapp"</span>
        <span class="nb">echo</span> <span class="s2">"  </span><span class="nv">$0</span><span class="s2"> test myapp"</span>
        <span class="nb">exit </span>1
        <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<h2 id="시스템-하드닝--system-hardening">시스템 하드닝 | System Hardening</h2>

<h3 id="-커널-보안-매개변수-최적화">🔧 커널 보안 매개변수 최적화</h3>

<h4 id="고급-sysctl-보안-설정">고급 sysctl 보안 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/sysctl.d/99-security-hardening.conf</span>
<span class="c"># 종합적인 시스템 보안 강화 설정</span>

<span class="c"># ==================== 네트워크 보안 ====================</span>
<span class="c"># IPv4 네트워크 보안</span>
net.ipv4.ip_forward <span class="o">=</span> 0                          <span class="c"># IP 포워딩 비활성화</span>
net.ipv4.conf.all.send_redirects <span class="o">=</span> 0             <span class="c"># ICMP 리디렉트 전송 차단</span>
net.ipv4.conf.default.send_redirects <span class="o">=</span> 0
net.ipv4.conf.all.accept_redirects <span class="o">=</span> 0           <span class="c"># ICMP 리디렉트 수신 차단</span>
net.ipv4.conf.default.accept_redirects <span class="o">=</span> 0
net.ipv4.conf.all.secure_redirects <span class="o">=</span> 0           <span class="c"># 보안 리디렉트도 차단</span>
net.ipv4.conf.default.secure_redirects <span class="o">=</span> 0
net.ipv4.conf.all.accept_source_route <span class="o">=</span> 0        <span class="c"># 소스 라우팅 차단</span>
net.ipv4.conf.default.accept_source_route <span class="o">=</span> 0
net.ipv4.conf.all.rp_filter <span class="o">=</span> 1                 <span class="c"># 역방향 경로 필터링</span>
net.ipv4.conf.default.rp_filter <span class="o">=</span> 1
net.ipv4.conf.all.log_martians <span class="o">=</span> 1              <span class="c"># 비정상 패킷 로깅</span>
net.ipv4.conf.default.log_martians <span class="o">=</span> 1

<span class="c"># SYN Flood 공격 방지</span>
net.ipv4.tcp_syncookies <span class="o">=</span> 1
net.ipv4.tcp_max_syn_backlog <span class="o">=</span> 2048
net.ipv4.tcp_synack_retries <span class="o">=</span> 2
net.ipv4.tcp_syn_retries <span class="o">=</span> 5
net.ipv4.tcp_fin_timeout <span class="o">=</span> 15
net.ipv4.tcp_keepalive_time <span class="o">=</span> 300
net.ipv4.tcp_keepalive_probes <span class="o">=</span> 5
net.ipv4.tcp_keepalive_intvl <span class="o">=</span> 15

<span class="c"># ICMP 보안</span>
net.ipv4.icmp_echo_ignore_broadcasts <span class="o">=</span> 1         <span class="c"># 브로드캐스트 ping 무시</span>
net.ipv4.icmp_ignore_bogus_error_responses <span class="o">=</span> 1   <span class="c"># 잘못된 ICMP 에러 무시</span>
net.ipv4.icmp_echo_ignore_all <span class="o">=</span> 0                <span class="c"># 일반 ping은 허용 (필요시 1로 변경)</span>
net.ipv4.icmp_ratelimit <span class="o">=</span> 100                    <span class="c"># ICMP 속도 제한</span>

<span class="c"># IPv6 보안 (IPv6 사용하지 않는 경우)</span>
net.ipv6.conf.all.disable_ipv6 <span class="o">=</span> 1
net.ipv6.conf.default.disable_ipv6 <span class="o">=</span> 1
net.ipv6.conf.lo.disable_ipv6 <span class="o">=</span> 1

<span class="c"># IPv6 사용하는 경우의 보안 설정</span>
<span class="c"># net.ipv6.conf.all.accept_ra = 0                # 라우터 광고 차단</span>
<span class="c"># net.ipv6.conf.default.accept_ra = 0</span>
<span class="c"># net.ipv6.conf.all.accept_redirects = 0         # IPv6 리디렉트 차단</span>
<span class="c"># net.ipv6.conf.default.accept_redirects = 0</span>
<span class="c"># net.ipv6.conf.all.accept_source_route = 0      # IPv6 소스 라우팅 차단</span>
<span class="c"># net.ipv6.conf.default.accept_source_route = 0</span>

<span class="c"># ==================== 메모리 보안 ====================</span>
<span class="c"># ASLR (Address Space Layout Randomization)</span>
kernel.randomize_va_space <span class="o">=</span> 2                    <span class="c"># 전체 주소 공간 무작위화</span>

<span class="c"># 메모리 보호</span>
vm.mmap_min_addr <span class="o">=</span> 65536                        <span class="c"># mmap 최소 주소 (NULL 포인터 역참조 방지)</span>
kernel.exec-shield <span class="o">=</span> 1                          <span class="c"># 실행 쉴드 활성화 (가능한 경우)</span>
kernel.dmesg_restrict <span class="o">=</span> 1                       <span class="c"># dmesg 제한 (일반 사용자 차단)</span>
kernel.kptr_restrict <span class="o">=</span> 2                        <span class="c"># 커널 포인터 정보 제한</span>

<span class="c"># 메모리 할당 보안</span>
vm.overcommit_memory <span class="o">=</span> 2                        <span class="c"># 메모리 오버커밋 제한</span>
vm.overcommit_ratio <span class="o">=</span> 80                        <span class="c"># 오버커밋 비율 80%</span>

<span class="c"># ==================== 프로세스 보안 ====================</span>
<span class="c"># 코어 덤프 보안</span>
fs.suid_dumpable <span class="o">=</span> 0                            <span class="c"># SUID 프로그램 코어 덤프 금지</span>
kernel.core_uses_pid <span class="o">=</span> 1                        <span class="c"># 코어 파일에 PID 포함</span>
kernel.core_pattern <span class="o">=</span> |/bin/false               <span class="c"># 코어 덤프 완전 비활성화</span>

<span class="c"># 프로세스 제한</span>
kernel.pid_max <span class="o">=</span> 65536                          <span class="c"># 최대 프로세스 ID</span>
kernel.threads-max <span class="o">=</span> 65536                      <span class="c"># 최대 스레드 수</span>

<span class="c"># 시스템 호출 보안</span>
kernel.yama.ptrace_scope <span class="o">=</span> 1                    <span class="c"># ptrace 제한 (디버깅 방지)</span>
kernel.unprivileged_bpf_disabled <span class="o">=</span> 1            <span class="c"># 비특권 BPF 비활성화</span>
net.core.bpf_jit_harden <span class="o">=</span> 2                     <span class="c"># BPF JIT 강화</span>

<span class="c"># ==================== 파일 시스템 보안 ====================</span>
<span class="c"># 파일 시스템 보안</span>
fs.protected_hardlinks <span class="o">=</span> 1                      <span class="c"># 하드링크 보호</span>
fs.protected_symlinks <span class="o">=</span> 1                       <span class="c"># 심볼릭링크 보호</span>
fs.protected_fifos <span class="o">=</span> 2                          <span class="c"># FIFO 보호</span>
fs.protected_regular <span class="o">=</span> 2                        <span class="c"># 일반 파일 보호</span>

<span class="c"># 파일 디스크립터 제한</span>
fs.file-max <span class="o">=</span> 2097152                          <span class="c"># 시스템 전체 최대 파일 디스크립터</span>
fs.nr_open <span class="o">=</span> 1048576                           <span class="c"># 프로세스당 최대 파일 디스크립터</span>

<span class="c"># ==================== 시스템 제어 ====================</span>
<span class="c"># 시스템 키 조합 비활성화</span>
kernel.sysrq <span class="o">=</span> 0                               <span class="c"># SysRq 키 비활성화</span>
kernel.ctrl-alt-del <span class="o">=</span> 0                        <span class="c"># Ctrl+Alt+Del 비활성화</span>

<span class="c"># 커널 모듈 보안</span>
kernel.modules_disabled <span class="o">=</span> 1                     <span class="c"># 런타임 커널 모듈 로딩 비활성화 (신중히 사용)</span>
kernel.kexec_load_disabled <span class="o">=</span> 1                 <span class="c"># kexec 비활성화</span>

<span class="c"># ==================== 네트워크 성능 및 보안 ====================</span>
<span class="c"># 네트워크 버퍼 크기</span>
net.core.rmem_default <span class="o">=</span> 262144
net.core.rmem_max <span class="o">=</span> 16777216
net.core.wmem_default <span class="o">=</span> 262144  
net.core.wmem_max <span class="o">=</span> 16777216

<span class="c"># TCP 윈도우 스케일링</span>
net.ipv4.tcp_window_scaling <span class="o">=</span> 1
net.ipv4.tcp_rmem <span class="o">=</span> 4096 87380 16777216
net.ipv4.tcp_wmem <span class="o">=</span> 4096 65536 16777216

<span class="c"># 네트워크 큐 설정</span>
net.core.netdev_max_backlog <span class="o">=</span> 5000

<span class="c"># ==================== 로깅 및 감사 ====================</span>
<span class="c"># 커널 로깅</span>
kernel.printk <span class="o">=</span> 3 4 1 3                        <span class="c"># 로깅 레벨 조정</span>

<span class="c"># 설정 적용 및 확인 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/apply-sysctl-security.sh</span>

<span class="nb">echo</span> <span class="s2">"Applying sysctl security settings..."</span>

<span class="c"># 현재 설정 백업</span>
sysctl <span class="nt">-a</span> <span class="o">&gt;</span> /etc/sysctl.backup.<span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span>

<span class="c"># 새 설정 적용</span>
sysctl <span class="nt">-p</span> /etc/sysctl.d/99-security-hardening.conf

<span class="c"># 적용 결과 확인</span>
<span class="nb">echo</span> <span class="s2">"=== Security Sysctl Settings Applied ==="</span>
<span class="nb">echo</span> <span class="s2">"Network security:"</span>
sysctl net.ipv4.ip_forward net.ipv4.conf.all.accept_redirects net.ipv4.tcp_syncookies

<span class="nb">echo</span> <span class="s2">"Memory security:"</span>
sysctl kernel.randomize_va_space vm.mmap_min_addr kernel.dmesg_restrict

<span class="nb">echo</span> <span class="s2">"Process security:"</span>
sysctl fs.suid_dumpable kernel.yama.ptrace_scope kernel.unprivileged_bpf_disabled

<span class="nb">echo</span> <span class="s2">"File system security:"</span>
sysctl fs.protected_hardlinks fs.protected_symlinks

<span class="nb">echo</span> <span class="s2">"System control:"</span>
sysctl kernel.sysrq kernel.ctrl-alt-del

<span class="nb">echo</span> <span class="s2">""</span>
<span class="nb">echo</span> <span class="s2">"Settings applied successfully!"</span>
<span class="nb">echo</span> <span class="s2">"Reboot recommended to ensure all settings take effect."</span>
</code></pre></div></div>

<h2 id="다음-편-예고">다음 편 예고</h2>

<p>다음 포스트에서는 <strong>침입 탐지 시스템과 실시간 모니터링</strong>을 상세히 다룰 예정입니다:</p>
<ul>
  <li>AIDE 파일 무결성 모니터링</li>
  <li>Fail2Ban 고급 설정 및 커스터마이징</li>
  <li>Wazuh SIEM 구축 및 운영</li>
  <li>실시간 위협 탐지 및 대응</li>
</ul>

<p>SELinux/AppArmor와 시스템 하드닝을 완벽하게 마스터하셨나요? 🛡️🔒</p>]]></content><author><name>DevOps Engineer</name></author><category term="Security" /><category term="Linux" /><category term="selinux" /><category term="apparmor" /><category term="system-hardening" /><category term="kernel-security" /><category term="filesystem-security" /><category term="mandatory-access-control" /><summary type="html"><![CDATA[리눅스 시스템의 핵심 보안 레이어인 SELinux/AppArmor와 시스템 하드닝 기법을 완전히 마스터해보겠습니다. 강제 접근 제어부터 커널 보안 매개변수까지 최고 수준의 시스템 보안을 구축하는 방법을 다룹니다. SELinux 완전 마스터 | SELinux Complete Mastery 🔐 SELinux 기초부터 고급까지 SELinux 개념 및 초기 설정 # SELinux 상태 및 정보 확인 sestatus # 전체 상태 확인 getenforce # 현재 모드 확인 seinfo # 정책 통계 semanage -l # 관리 가능한 객체 목록 # SELinux 모드 설정 # /etc/selinux/config SELINUX=enforcing # enforcing, permissive, disabled SELINUXTYPE=targeted # targeted, minimum, mls # 임시 모드 변경 (재부팅 시 원복) setenforce 1 # enforcing 모드 setenforce 0 # permissive 모드 # SELinux 라벨링 시스템 이해 # 모든 객체는 security context를 가짐: user:role:type:level ls -Z /var/www/html/ # 파일 컨텍스트 확인 ps auxZ # 프로세스 컨텍스트 확인 id -Z # 현재 사용자 컨텍스트 # 컨텍스트 구성 요소 # user: SELinux 사용자 (unconfined_u, system_u, user_u 등) # role: 역할 (unconfined_r, system_r, object_r 등) # type: 타입/도메인 (httpd_t, httpd_exec_t, user_home_t 등) # level: MLS/MCS 레벨 (s0, s0:c0,c1 등) 파일 컨텍스트 관리 # 파일 컨텍스트 확인 및 복원 ls -lZ /var/www/html/ restorecon -Rv /var/www/html/ # 기본 컨텍스트로 복원 restorecon -RvF /var/www/html/ # 강제 복원 # 파일 컨텍스트 수동 설정 chcon -t httpd_exec_t /usr/local/apache2/bin/httpd chcon -u system_u /var/www/html/index.html chcon --reference=/var/www/html/index.html /var/www/html/newfile.html # 영구적인 컨텍스트 설정 (정책에 추가) semanage fcontext -a -t httpd_exec_t "/usr/local/apache2/bin/httpd" semanage fcontext -a -t httpd_config_t "/etc/myapp/.*\.conf" semanage fcontext -a -t user_home_t "/home/[^/]+/mydata(/.*)?" # 컨텍스트 정책 확인 semanage fcontext -l | grep httpd matchpathcon /var/www/html/index.html # 예상 컨텍스트 확인 # 컨텍스트 변경 내역 추적 ausearch -m AVC -ts today # AVC 거부 로그 sealert -a /var/log/audit/audit.log # 정책 제안 # 고급 컨텍스트 관리 스크립트 #!/bin/bash # /usr/local/bin/selinux-context-manager.sh ACTION=$1 TARGET=$2 CONTEXT=$3 case $ACTION in "scan") echo "=== SELinux Context Scan ===" find "$TARGET" -print0 | xargs -0 ls -lZ | \ awk '{print $4, $9}' | sort | uniq -c | sort -nr ;; "restore") echo "Restoring contexts for $TARGET..." restorecon -RvF "$TARGET" ;; "set-bulk") echo "Setting bulk context $CONTEXT for $TARGET..." find "$TARGET" -type f -exec chcon -t "$CONTEXT" {} \; ;; "analyze") echo "=== Context Analysis for $TARGET ===" # 비정상적인 컨텍스트 찾기 find "$TARGET" -type f -exec ls -lZ {} \; | \ grep -v "system_u:object_r" | \ awk '{print "Unusual context:", $4, $9}' ;; *) echo "Usage: $0 {scan|restore|set-bulk|analyze} &lt;path&gt; [context]" exit 1 ;; esac SELinux 불린 값 관리 # 불린 값 확인 getsebool -a # 모든 불린 값 getsebool -a | grep httpd # httpd 관련 불린 getsebool httpd_can_network_connect # 특정 불린 # 불린 값 설정 setsebool httpd_can_network_connect on # 임시 설정 setsebool -P httpd_can_network_connect on # 영구 설정 # 주요 웹 서버 불린 값들 setsebool -P httpd_can_network_connect on # 네트워크 연결 허용 setsebool -P httpd_can_sendmail on # 메일 발송 허용 setsebool -P httpd_enable_cgi on # CGI 실행 허용 setsebool -P httpd_read_user_content on # 사용자 콘텐츠 읽기 setsebool -P httpd_enable_homedirs on # 홈 디렉토리 접근 setsebool -P httpd_execmem on # 메모리 실행 허용 setsebool -P httpd_use_nfs on # NFS 사용 허용 # 데이터베이스 관련 불린 setsebool -P allow_user_mysql_connect on # MySQL 연결 허용 setsebool -P mysql_connect_any on # MySQL 임의 연결 # SSH 관련 불린 setsebool -P ssh_chroot_rw_homedirs on # chroot에서 홈디렉토리 쓰기 # 불린 값 모니터링 스크립트 #!/bin/bash # /usr/local/bin/selinux-bool-monitor.sh # 현재 불린 설정 백업 getsebool -a &gt; /var/log/selinux-bools-$(date +%Y%m%d).log # 변경된 불린 값 감지 if [ -f /var/log/selinux-bools-last.log ]; then echo "=== Boolean Changes Detected ===" diff /var/log/selinux-bools-last.log /var/log/selinux-bools-$(date +%Y%m%d).log fi cp /var/log/selinux-bools-$(date +%Y%m%d).log /var/log/selinux-bools-last.log # 보안에 민감한 불린 값들 체크 CRITICAL_BOOLS=( "httpd_execmem" "httpd_enable_cgi" "allow_execheap" "allow_execstack" "selinuxuser_execstack" ) echo "=== Critical Boolean Status ===" for bool in "${CRITICAL_BOOLS[@]}"; do status=$(getsebool "$bool" 2&gt;/dev/null) if echo "$status" | grep -q " on"; then echo "WARNING: $bool is enabled" else echo "OK: $bool is disabled" fi done 포트 라벨 관리 # 포트 라벨 확인 semanage port -l # 모든 포트 라벨 semanage port -l | grep http # HTTP 관련 포트 ss -tlnZ # 네트워크 서비스와 컨텍스트 # 새로운 포트에 라벨 할당 semanage port -a -t http_port_t -p tcp 8080 # HTTP 포트 추가 semanage port -a -t ssh_port_t -p tcp 2222 # SSH 포트 추가 semanage port -a -t mysqld_port_t -p tcp 3307 # MySQL 포트 추가 # 포트 라벨 수정 semanage port -m -t http_port_t -p tcp 8080 # 포트 라벨 제거 semanage port -d -t http_port_t -p tcp 8080 # 커스텀 포트 타입 생성 (고급) # myapp.te 파일 생성 cat &gt; myapp.te &lt;&lt; 'EOF' policy_module(myapp, 1.0) type myapp_port_t; corenet_port(myapp_port_t) allow httpd_t myapp_port_t:tcp_socket name_bind; EOF # 정책 컴파일 및 설치 make -f /usr/share/selinux/devel/Makefile myapp.pp semodule -i myapp.pp semanage port -a -t myapp_port_t -p tcp 9999 🛡️ SELinux 커스텀 정책 작성 정책 모듈 개발 # 정책 개발 환경 준비 yum install selinux-policy-devel # CentOS/RHEL apt-get install selinux-policy-dev # Ubuntu/Debian # AVC 거부 분석 및 정책 생성 # 1. 서비스 실행하여 AVC 거부 로그 수집 systemctl start myapp tail -f /var/log/audit/audit.log | grep AVC # 2. audit2allow로 정책 제안 생성 grep myapp /var/log/audit/audit.log | audit2allow -m myapp_policy grep myapp /var/log/audit/audit.log | audit2allow -M myapp_policy # 3. 수동으로 정책 모듈 작성 cat &gt; myapp_custom.te &lt;&lt; 'EOF' policy_module(myapp_custom, 1.0) ######################################## # # Declarations # type myapp_t; type myapp_exec_t; init_daemon_domain(myapp_t, myapp_exec_t) type myapp_config_t; files_config_file(myapp_config_t) type myapp_var_lib_t; files_type(myapp_var_lib_t) type myapp_log_t; logging_log_file(myapp_log_t) type myapp_port_t; corenet_port(myapp_port_t) ######################################## # # myapp local policy # # 기본 도메인 권한 allow myapp_t self:process { fork signal_perms }; allow myapp_t self:fifo_file rw_fifo_file_perms; allow myapp_t self:unix_stream_socket create_stream_socket_perms; # 네트워크 권한 allow myapp_t self:tcp_socket create_stream_socket_perms; allow myapp_t myapp_port_t:tcp_socket name_bind; corenet_tcp_sendrecv_generic_if(myapp_t) corenet_tcp_sendrecv_generic_node(myapp_t) # 파일 시스템 권한 allow myapp_t myapp_config_t:file read_file_perms; allow myapp_t myapp_var_lib_t:dir create_dir_perms; allow myapp_t myapp_var_lib_t:file create_file_perms; allow myapp_t myapp_log_t:file create_file_perms; # 시스템 서비스 상호작용 can_exec(myapp_t, myapp_exec_t) files_read_etc_files(myapp_t) libs_use_ld_so(myapp_t) libs_use_shared_libs(myapp_t) # 로깅 logging_send_syslog_msg(myapp_t) EOF # 4. 파일 컨텍스트 정의 cat &gt; myapp_custom.fc &lt;&lt; 'EOF' /usr/local/bin/myapp -- gen_context(system_u:object_r:myapp_exec_t,s0) /etc/myapp(/.*)? gen_context(system_u:object_r:myapp_config_t,s0) /var/lib/myapp(/.*)? gen_context(system_u:object_r:myapp_var_lib_t,s0) /var/log/myapp(/.*)? gen_context(system_u:object_r:myapp_log_t,s0) EOF # 5. 인터페이스 파일 (다른 모듈에서 사용할 인터페이스) cat &gt; myapp_custom.if &lt;&lt; 'EOF' ## &lt;summary&gt;MyApp custom policy&lt;/summary&gt; ######################################## ## &lt;summary&gt; ## Execute myapp in the myapp domain. ## &lt;/summary&gt; ## &lt;param name="domain"&gt; ## &lt;summary&gt; ## Domain allowed to transition. ## &lt;/summary&gt; ## &lt;/param&gt; # interface(`myapp_domtrans',` gen_require(` type myapp_t, myapp_exec_t; ') corecmd_search_bin($1) domtrans_pattern($1, myapp_exec_t, myapp_t) ') ######################################## ## &lt;summary&gt; ## Read myapp configuration files. ## &lt;/summary&gt; ## &lt;param name="domain"&gt; ## &lt;summary&gt; ## Domain allowed access. ## &lt;/summary&gt; ## &lt;/param&gt; # interface(`myapp_read_config',` gen_require(` type myapp_config_t; ') files_search_etc($1) read_files_pattern($1, myapp_config_t, myapp_config_t) ') EOF # 6. 정책 컴파일 및 설치 make -f /usr/share/selinux/devel/Makefile myapp_custom.pp semodule -i myapp_custom.pp # 7. 파일 컨텍스트 적용 semanage fcontext -a -f "" -t myapp_exec_t "/usr/local/bin/myapp" semanage fcontext -a -f "" -t myapp_config_t "/etc/myapp(/.*)?" restorecon -Rv /usr/local/bin/myapp /etc/myapp # 8. 포트 라벨 설정 semanage port -a -t myapp_port_t -p tcp 9090 정책 디버깅 및 최적화 #!/bin/bash # /usr/local/bin/selinux-debug.sh # SELinux 정책 디버깅 도구 MODE=$1 MODULE=$2 case $MODE in "avc-analysis") echo "=== AVC Denial Analysis ===" ausearch -m AVC -ts today | grep "$MODULE" | \ while read line; do echo "$line" | audit2allow -R echo "---" done ;; "permissive-test") echo "Setting $MODULE to permissive mode for testing..." semanage permissive -a ${MODULE}_t echo "Test your application, then check denials:" echo "ausearch -m AVC -ts now" echo "When done, remove permissive mode:" echo "semanage permissive -d ${MODULE}_t" ;; "policy-stats") echo "=== Policy Statistics ===" seinfo -t | grep "$MODULE" seinfo -r | grep "$MODULE" seinfo -u | grep "$MODULE" ;; "generate-policy") echo "Generating policy for $MODULE..." ausearch -m AVC -ts today | grep "$MODULE" | \ audit2allow -M ${MODULE}_additional echo "Generated policy module: ${MODULE}_additional.pp" echo "Install with: semodule -i ${MODULE}_additional.pp" ;; "module-deps") echo "=== Module Dependencies for $MODULE ===" semodule -l | grep "$MODULE" ;; *) echo "Usage: $0 {avc-analysis|permissive-test|policy-stats|generate-policy|module-deps} &lt;module&gt;" echo "" echo "Examples:" echo " $0 avc-analysis httpd" echo " $0 permissive-test myapp" echo " $0 generate-policy myapp" exit 1 ;; esac AppArmor 완전 마스터 | AppArmor Complete Mastery 🛡️ AppArmor 프로파일 작성 및 관리 AppArmor 기본 관리 # AppArmor 상태 확인 aa-status # 전체 상태 aa-enabled # 활성화 여부 aa-unconfined # 제한되지 않은 프로세스 # 프로파일 모드 관리 aa-enforce /etc/apparmor.d/usr.bin.firefox # enforce 모드 aa-complain /etc/apparmor.d/usr.bin.firefox # complain 모드 aa-disable /etc/apparmor.d/usr.bin.firefox # 비활성화 # 프로파일 재로드 apparmor_parser -r /etc/apparmor.d/usr.bin.firefox apparmor_parser -R /etc/apparmor.d/ # 모든 프로파일 재로드 # 프로파일 상태 확인 aa-status | grep firefox 고급 AppArmor 프로파일 작성 # 웹 애플리케이션용 커스텀 프로파일 # /etc/apparmor.d/usr.local.bin.webapp #include &lt;tunables/global&gt; profile /usr/local/bin/webapp flags=(attach_disconnected,mediate_deleted) { #include &lt;abstractions/base&gt; #include &lt;abstractions/nameservice&gt; #include &lt;abstractions/openssl&gt; #include &lt;abstractions/ssl_certs&gt; # 실행 권한 /usr/local/bin/webapp mr, # 라이브러리 접근 /lib{,32,64}/** mr, /usr/lib{,32,64}/** mr, /usr/local/lib/** mr, # 설정 파일 (읽기 전용) /etc/webapp/ r, /etc/webapp/** r, owner /etc/webapp/webapp.conf r, # 사용자별 설정 및 데이터 owner @{HOME}/.webapp/ rw, owner @{HOME}/.webapp/** rw, owner @{HOME}/.webapp/cache/** rwk, # 애플리케이션 데이터 디렉토리 /var/lib/webapp/ r, /var/lib/webapp/** rw, /var/cache/webapp/ r, /var/cache/webapp/** rw, # 로그 파일 /var/log/webapp/ r, /var/log/webapp/*.log w, /var/log/webapp/*.log.[0-9] w, # 네트워크 접근 network inet stream, network inet6 stream, network inet dgram, network inet6 dgram, network netlink raw, # 프로세스 제어 capability setuid, capability setgid, capability dac_override, capability net_bind_service, # 임시 파일 /tmp/ r, /tmp/webapp.** rw, owner /tmp/webapp-@{pid}-* rw, /var/tmp/ r, /var/tmp/webapp.** rw, # 시스템 정보 접근 /proc/sys/kernel/random/uuid r, /proc/loadavg r, /proc/meminfo r, /sys/devices/system/cpu/ r, /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_cur_freq r, # 거부할 접근들 (명시적 거부) deny /etc/passwd r, deny /etc/shadow r, deny /etc/gshadow r, deny owner /home/*/.ssh/** rw, deny /proc/[0-9]*/maps r, deny /proc/[0-9]*/mem r, deny /proc/kmem r, deny /proc/kcore r, deny /boot/** r, # 하위 프로세스 실행 /bin/dash ix, /bin/bash ix, /usr/bin/python3 ix, /usr/bin/python3.[0-9] ix, /usr/local/bin/webapp-helper Cx -&gt; helper, # 조건부 실행 규칙 profile helper { #include &lt;abstractions/base&gt; /usr/local/bin/webapp-helper mr, /var/lib/webapp/helper-data/** r, /tmp/helper-** rw, # 부모로부터 상속받은 파일 디스크립터만 사용 deny network, deny capability, } # 신호 처리 signal (send) set=(term,kill,usr1,usr2) peer=/usr/local/bin/webapp, signal (receive) set=(term,kill,usr1,usr2), # DBus 접근 (필요시) dbus (send) bus=session path=/org/freedesktop/Notifications interface=org.freedesktop.Notifications member=Notify peer=(name=org.freedesktop.Notifications), } # 데이터베이스 서버용 프로파일 # /etc/apparmor.d/usr.sbin.mysqld-custom #include &lt;tunables/global&gt; profile /usr/sbin/mysqld-custom flags=(attach_disconnected,mediate_deleted) { #include &lt;abstractions/base&gt; #include &lt;abstractions/mysql&gt; #include &lt;abstractions/nameservice&gt; #include &lt;abstractions/user-tmp&gt; capability dac_override, capability setgid, capability setuid, capability sys_resource, capability net_bind_service, # MySQL 바이너리 /usr/sbin/mysqld mr, /usr/sbin/mysqld-debug mr, # 설정 파일 /etc/mysql/ r, /etc/mysql/** r, /etc/my.cnf r, /etc/my.cnf.d/ r, /etc/my.cnf.d/*.cnf r, # 데이터 디렉토리 /var/lib/mysql/ r, /var/lib/mysql/** rwk, /var/lib/mysql-files/ r, /var/lib/mysql-files/** rw, # 로그 파일 /var/log/mysql/ r, /var/log/mysql/*.log rw, /var/log/mysql.log rw, /var/log/mysql/error.log rw, # 소켓 파일 /var/run/mysqld/ rw, /var/run/mysqld/mysqld.sock rw, /tmp/mysql.sock rw, # 네트워크 network tcp, # 프로세스 간 통신 /proc/*/status r, /proc/sys/vm/overcommit_memory r, # 임시 파일 /tmp/ r, /tmp/mysql-** rw, /var/tmp/ r, /var/tmp/mysql-** rw, # 보안 제한 deny capability sys_ptrace, deny @{PROC}/sys/kernel/core_pattern w, deny /etc/passwd r, deny /etc/shadow r, } AppArmor 프로파일 자동 생성 및 튜닝 #!/bin/bash # /usr/local/bin/apparmor-manager.sh # AppArmor 프로파일 관리 도구 ACTION=$1 BINARY=$2 PROFILE_NAME=${3:-$(basename $BINARY)} case $ACTION in "generate") echo "Generating AppArmor profile for $BINARY..." # 1. 기본 프로파일 생성 aa-genprof "$BINARY" echo "Profile generation completed." echo "Test your application and run: $0 tune $BINARY" ;; "tune") echo "Tuning AppArmor profile for $BINARY..." # 로그프로파일링 실행 aa-logprof echo "Profile tuning completed." ;; "analyze") echo "=== AppArmor Profile Analysis for $PROFILE_NAME ===" # 프로파일 구문 검사 apparmor_parser -p /etc/apparmor.d/$PROFILE_NAME 2&gt;&amp;1 | \ grep -E "(ERROR|WARNING)" || echo "✓ Syntax OK" # 프로파일 통계 echo "" echo "Profile statistics:" grep -c "^[[:space:]]*/" /etc/apparmor.d/$PROFILE_NAME &amp;&amp; echo "File rules" grep -c "capability" /etc/apparmor.d/$PROFILE_NAME &amp;&amp; echo "Capabilities" grep -c "network" /etc/apparmor.d/$PROFILE_NAME &amp;&amp; echo "Network rules" grep -c "deny" /etc/apparmor.d/$PROFILE_NAME &amp;&amp; echo "Deny rules" # 보안 검사 echo "" echo "Security analysis:" if grep -q "capability sys_admin" /etc/apparmor.d/$PROFILE_NAME; then echo "⚠️ WARNING: sys_admin capability found" fi if grep -q "/etc/shadow" /etc/apparmor.d/$PROFILE_NAME; then echo "⚠️ WARNING: Shadow file access found" fi if grep -q "network raw" /etc/apparmor.d/$PROFILE_NAME; then echo "⚠️ WARNING: Raw network access found" fi ;; "template") TEMPLATE_TYPE=$3 echo "Creating AppArmor profile template for $BINARY ($TEMPLATE_TYPE)..." case $TEMPLATE_TYPE in "webapp") cat &gt; /etc/apparmor.d/$PROFILE_NAME &lt;&lt; 'EOF' #include &lt;tunables/global&gt; profile BINARY_PATH { #include &lt;abstractions/base&gt; #include &lt;abstractions/nameservice&gt; # Binary execution BINARY_PATH mr, # Libraries /lib{,32,64}/** mr, /usr/lib{,32,64}/** mr, # Configuration /etc/APP_NAME/ r, /etc/APP_NAME/** r, # Data directories /var/lib/APP_NAME/** rw, /var/log/APP_NAME/** w, # Network network inet stream, # Capabilities capability setuid, capability setgid, # Temporary files /tmp/APP_NAME.** rw, } EOF sed -i "s|BINARY_PATH|$BINARY|g" /etc/apparmor.d/$PROFILE_NAME sed -i "s|APP_NAME|$(basename $BINARY)|g" /etc/apparmor.d/$PROFILE_NAME ;; "service") cat &gt; /etc/apparmor.d/$PROFILE_NAME &lt;&lt; 'EOF' #include &lt;tunables/global&gt; profile BINARY_PATH flags=(attach_disconnected) { #include &lt;abstractions/base&gt; #include &lt;abstractions/nameservice&gt; # Service binary BINARY_PATH mr, # System libraries /lib{,32,64}/** mr, /usr/lib{,32,64}/** mr, # Service configuration /etc/APP_NAME/ r, /etc/APP_NAME/** r, # Runtime directories /var/run/APP_NAME/ rw, /var/run/APP_NAME/** rw, # Log files /var/log/APP_NAME/ r, /var/log/APP_NAME/*.log w, # PID file /var/run/APP_NAME.pid w, # Network access network inet stream, network inet dgram, # System capabilities capability setuid, capability setgid, capability net_bind_service, # Signal handling signal (receive) set=(term,kill,usr1), } EOF sed -i "s|BINARY_PATH|$BINARY|g" /etc/apparmor.d/$PROFILE_NAME sed -i "s|APP_NAME|$(basename $BINARY)|g" /etc/apparmor.d/$PROFILE_NAME ;; esac echo "Template created: /etc/apparmor.d/$PROFILE_NAME" echo "Edit the template and then load it with:" echo "apparmor_parser -r /etc/apparmor.d/$PROFILE_NAME" ;; "test") echo "Testing AppArmor profile for $BINARY..." # complain 모드로 전환 aa-complain /etc/apparmor.d/$PROFILE_NAME echo "Profile set to complain mode." echo "Run your application tests, then check logs:" echo "journalctl -f | grep apparmor" echo "" echo "When testing is complete, switch to enforce mode:" echo "aa-enforce /etc/apparmor.d/$PROFILE_NAME" ;; "backup") BACKUP_DIR="/etc/apparmor.d/backups/$(date +%Y%m%d)" mkdir -p "$BACKUP_DIR" cp /etc/apparmor.d/$PROFILE_NAME "$BACKUP_DIR/" echo "Profile backed up to: $BACKUP_DIR/$PROFILE_NAME" ;; *) echo "Usage: $0 {generate|tune|analyze|template|test|backup} &lt;binary&gt; [profile-name]" echo "" echo "Template types for 'template' action:" echo " webapp - Web application template" echo " service - System service template" echo "" echo "Examples:" echo " $0 generate /usr/local/bin/myapp" echo " $0 template /usr/local/bin/myapp webapp" echo " $0 analyze myapp" echo " $0 test myapp" exit 1 ;; esac 시스템 하드닝 | System Hardening 🔧 커널 보안 매개변수 최적화 고급 sysctl 보안 설정 # /etc/sysctl.d/99-security-hardening.conf # 종합적인 시스템 보안 강화 설정 # ==================== 네트워크 보안 ==================== # IPv4 네트워크 보안 net.ipv4.ip_forward = 0 # IP 포워딩 비활성화 net.ipv4.conf.all.send_redirects = 0 # ICMP 리디렉트 전송 차단 net.ipv4.conf.default.send_redirects = 0 net.ipv4.conf.all.accept_redirects = 0 # ICMP 리디렉트 수신 차단 net.ipv4.conf.default.accept_redirects = 0 net.ipv4.conf.all.secure_redirects = 0 # 보안 리디렉트도 차단 net.ipv4.conf.default.secure_redirects = 0 net.ipv4.conf.all.accept_source_route = 0 # 소스 라우팅 차단 net.ipv4.conf.default.accept_source_route = 0 net.ipv4.conf.all.rp_filter = 1 # 역방향 경로 필터링 net.ipv4.conf.default.rp_filter = 1 net.ipv4.conf.all.log_martians = 1 # 비정상 패킷 로깅 net.ipv4.conf.default.log_martians = 1 # SYN Flood 공격 방지 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_max_syn_backlog = 2048 net.ipv4.tcp_synack_retries = 2 net.ipv4.tcp_syn_retries = 5 net.ipv4.tcp_fin_timeout = 15 net.ipv4.tcp_keepalive_time = 300 net.ipv4.tcp_keepalive_probes = 5 net.ipv4.tcp_keepalive_intvl = 15 # ICMP 보안 net.ipv4.icmp_echo_ignore_broadcasts = 1 # 브로드캐스트 ping 무시 net.ipv4.icmp_ignore_bogus_error_responses = 1 # 잘못된 ICMP 에러 무시 net.ipv4.icmp_echo_ignore_all = 0 # 일반 ping은 허용 (필요시 1로 변경) net.ipv4.icmp_ratelimit = 100 # ICMP 속도 제한 # IPv6 보안 (IPv6 사용하지 않는 경우) net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 net.ipv6.conf.lo.disable_ipv6 = 1 # IPv6 사용하는 경우의 보안 설정 # net.ipv6.conf.all.accept_ra = 0 # 라우터 광고 차단 # net.ipv6.conf.default.accept_ra = 0 # net.ipv6.conf.all.accept_redirects = 0 # IPv6 리디렉트 차단 # net.ipv6.conf.default.accept_redirects = 0 # net.ipv6.conf.all.accept_source_route = 0 # IPv6 소스 라우팅 차단 # net.ipv6.conf.default.accept_source_route = 0 # ==================== 메모리 보안 ==================== # ASLR (Address Space Layout Randomization) kernel.randomize_va_space = 2 # 전체 주소 공간 무작위화 # 메모리 보호 vm.mmap_min_addr = 65536 # mmap 최소 주소 (NULL 포인터 역참조 방지) kernel.exec-shield = 1 # 실행 쉴드 활성화 (가능한 경우) kernel.dmesg_restrict = 1 # dmesg 제한 (일반 사용자 차단) kernel.kptr_restrict = 2 # 커널 포인터 정보 제한 # 메모리 할당 보안 vm.overcommit_memory = 2 # 메모리 오버커밋 제한 vm.overcommit_ratio = 80 # 오버커밋 비율 80% # ==================== 프로세스 보안 ==================== # 코어 덤프 보안 fs.suid_dumpable = 0 # SUID 프로그램 코어 덤프 금지 kernel.core_uses_pid = 1 # 코어 파일에 PID 포함 kernel.core_pattern = |/bin/false # 코어 덤프 완전 비활성화 # 프로세스 제한 kernel.pid_max = 65536 # 최대 프로세스 ID kernel.threads-max = 65536 # 최대 스레드 수 # 시스템 호출 보안 kernel.yama.ptrace_scope = 1 # ptrace 제한 (디버깅 방지) kernel.unprivileged_bpf_disabled = 1 # 비특권 BPF 비활성화 net.core.bpf_jit_harden = 2 # BPF JIT 강화 # ==================== 파일 시스템 보안 ==================== # 파일 시스템 보안 fs.protected_hardlinks = 1 # 하드링크 보호 fs.protected_symlinks = 1 # 심볼릭링크 보호 fs.protected_fifos = 2 # FIFO 보호 fs.protected_regular = 2 # 일반 파일 보호 # 파일 디스크립터 제한 fs.file-max = 2097152 # 시스템 전체 최대 파일 디스크립터 fs.nr_open = 1048576 # 프로세스당 최대 파일 디스크립터 # ==================== 시스템 제어 ==================== # 시스템 키 조합 비활성화 kernel.sysrq = 0 # SysRq 키 비활성화 kernel.ctrl-alt-del = 0 # Ctrl+Alt+Del 비활성화 # 커널 모듈 보안 kernel.modules_disabled = 1 # 런타임 커널 모듈 로딩 비활성화 (신중히 사용) kernel.kexec_load_disabled = 1 # kexec 비활성화 # ==================== 네트워크 성능 및 보안 ==================== # 네트워크 버퍼 크기 net.core.rmem_default = 262144 net.core.rmem_max = 16777216 net.core.wmem_default = 262144 net.core.wmem_max = 16777216 # TCP 윈도우 스케일링 net.ipv4.tcp_window_scaling = 1 net.ipv4.tcp_rmem = 4096 87380 16777216 net.ipv4.tcp_wmem = 4096 65536 16777216 # 네트워크 큐 설정 net.core.netdev_max_backlog = 5000 # ==================== 로깅 및 감사 ==================== # 커널 로깅 kernel.printk = 3 4 1 3 # 로깅 레벨 조정 # 설정 적용 및 확인 스크립트 #!/bin/bash # /usr/local/bin/apply-sysctl-security.sh echo "Applying sysctl security settings..." # 현재 설정 백업 sysctl -a &gt; /etc/sysctl.backup.$(date +%Y%m%d-%H%M%S) # 새 설정 적용 sysctl -p /etc/sysctl.d/99-security-hardening.conf # 적용 결과 확인 echo "=== Security Sysctl Settings Applied ===" echo "Network security:" sysctl net.ipv4.ip_forward net.ipv4.conf.all.accept_redirects net.ipv4.tcp_syncookies echo "Memory security:" sysctl kernel.randomize_va_space vm.mmap_min_addr kernel.dmesg_restrict echo "Process security:" sysctl fs.suid_dumpable kernel.yama.ptrace_scope kernel.unprivileged_bpf_disabled echo "File system security:" sysctl fs.protected_hardlinks fs.protected_symlinks echo "System control:" sysctl kernel.sysrq kernel.ctrl-alt-del echo "" echo "Settings applied successfully!" echo "Reboot recommended to ensure all settings take effect." 다음 편 예고 다음 포스트에서는 침입 탐지 시스템과 실시간 모니터링을 상세히 다룰 예정입니다: AIDE 파일 무결성 모니터링 Fail2Ban 고급 설정 및 커스터마이징 Wazuh SIEM 구축 및 운영 실시간 위협 탐지 및 대응 SELinux/AppArmor와 시스템 하드닝을 완벽하게 마스터하셨나요? 🛡️🔒]]></summary></entry><entry><title type="html">네트워킹 완전 가이드 4편 - 무선 네트워킹과 최신 기술 | Complete Network Guide Part 4 - Wireless Networking &amp;amp; Modern Technologies</title><link href="https://leeyonghe.github.io/infra-blog/blog/2025/01/18/networking-guide-part4.html" rel="alternate" type="text/html" title="네트워킹 완전 가이드 4편 - 무선 네트워킹과 최신 기술 | Complete Network Guide Part 4 - Wireless Networking &amp;amp; Modern Technologies" /><published>2025-01-18T03:00:00+00:00</published><updated>2025-01-18T03:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2025/01/18/networking-guide-part4</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2025/01/18/networking-guide-part4.html"><![CDATA[<p>무선 네트워킹 기술과 최신 네트워크 기술 동향을 깊이 있게 알아보고 실무에 적용해보겠습니다.</p>

<h2 id="무선-네트워킹-기초--wireless-networking-fundamentals">무선 네트워킹 기초 | Wireless Networking Fundamentals</h2>

<h3 id="-무선-통신-기본-개념">📡 무선 통신 기본 개념</h3>

<h4 id="전파의-특성">전파의 특성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 주파수 대역별 특성</span>
2.4GHz 대역:
- 전파 도달 거리: 길음 <span class="o">(</span>벽 투과력 좋음<span class="o">)</span>
- 대역폭: 제한적 <span class="o">(</span>최대 3개 비간섭 채널<span class="o">)</span>
- 간섭: 많음 <span class="o">(</span>전자레인지, 블루투스 등<span class="o">)</span>

5GHz 대역:  
- 전파 도달 거리: 짧음 <span class="o">(</span>직진성 강함<span class="o">)</span>
- 대역폭: 풍부 <span class="o">(</span>최대 25개 비간섭 채널<span class="o">)</span>
- 간섭: 적음

6GHz 대역 <span class="o">(</span>Wi-Fi 6E<span class="o">)</span>:
- 전파 도달 거리: 매우 짧음
- 대역폭: 매우 풍부 <span class="o">(</span>59개 20MHz 채널<span class="o">)</span>
- 간섭: 거의 없음
</code></pre></div></div>

<h4 id="dbm과-신호-강도">dBm과 신호 강도</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># dBm 참조표</span>
<span class="nt">-30</span> dBm: 매우 강함 <span class="o">(</span>AP 바로 옆<span class="o">)</span>
<span class="nt">-50</span> dBm: 강함 <span class="o">(</span>우수한 연결<span class="o">)</span>
<span class="nt">-60</span> dBm: 좋음 <span class="o">(</span>안정적 연결<span class="o">)</span>
<span class="nt">-70</span> dBm: 약함 <span class="o">(</span>최소 연결 가능<span class="o">)</span>
<span class="nt">-80</span> dBm: 매우 약함 <span class="o">(</span>연결 불안정<span class="o">)</span>
<span class="nt">-90</span> dBm: 연결 불가

<span class="c"># 신호 강도 측정 (Linux)</span>
iwconfig wlan0
iw dev wlan0 scan | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"SSID|signal|freq"</span>
wavemon  <span class="c"># 실시간 무선 모니터링</span>
</code></pre></div></div>

<h3 id="-wi-fi-보안-기술">🔐 Wi-Fi 보안 기술</h3>

<h4 id="보안-프로토콜-발전사">보안 프로토콜 발전사</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WEP <span class="o">(</span>Wired Equivalent Privacy<span class="o">)</span>:
- 1997년 도입, 현재 사용 금지
- 40/104비트 키 길이
- RC4 암호화, 쉽게 크랙됨

WPA <span class="o">(</span>Wi-Fi Protected Access<span class="o">)</span>:
- 2003년 도입, WEP의 임시 대안
- TKIP 암호화, RC4 기반
- 동적 키 생성

WPA2 <span class="o">(</span>802.11i<span class="o">)</span>:
- 2004년 도입, 현재 표준
- AES-CCMP 암호화
- PSK<span class="o">(</span>개인용<span class="o">)</span> / Enterprise<span class="o">(</span>기업용<span class="o">)</span>

WPA3 <span class="o">(</span>2018년 도입<span class="o">)</span>:
- SAE <span class="o">(</span>Simultaneous Authentication of Equals<span class="o">)</span>
- 개선된 오픈 네트워크 보안
- 더 강력한 암호화 <span class="o">(</span>192비트<span class="o">)</span>
</code></pre></div></div>

<h4 id="wpa2wpa3-enterprise-설정">WPA2/WPA3 Enterprise 설정</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># FreeRADIUS 서버 설정 (/etc/freeradius/clients.conf)</span>
client wireless-controller <span class="o">{</span>
    ipaddr <span class="o">=</span> 192.168.1.10
    secret <span class="o">=</span> radiusSecret123
    shortname <span class="o">=</span> wlc
<span class="o">}</span>

<span class="c"># 사용자 인증 설정 (/etc/freeradius/users)</span>
john    Cleartext-Password :<span class="o">=</span> <span class="s2">"password123"</span>
        Tunnel-Type <span class="o">=</span> VLAN,
        Tunnel-Medium-Type <span class="o">=</span> IEEE-802,
        Tunnel-Private-Group-Id <span class="o">=</span> 10

<span class="c"># 인증서 기반 설정 (802.1X EAP-TLS)</span>
alice   TLS-Cert-Serial :<span class="o">=</span> <span class="s2">"1234567890"</span>
        Tunnel-Type <span class="o">=</span> VLAN,
        Tunnel-Medium-Type <span class="o">=</span> IEEE-802,
        Tunnel-Private-Group-Id <span class="o">=</span> 20

<span class="c"># Cisco WLC RADIUS 설정</span>
<span class="o">(</span>Cisco Controller<span class="o">)</span> <span class="o">&gt;</span> configure terminal
<span class="o">(</span>Cisco Controller<span class="o">)</span> <span class="o">&gt;</span> radius auth add 1 192.168.1.100 1812 radiusSecret123
<span class="o">(</span>Cisco Controller<span class="o">)</span> <span class="o">&gt;</span> radius acct add 1 192.168.1.100 1813 radiusSecret123
<span class="o">(</span>Cisco Controller<span class="o">)</span> <span class="o">&gt;</span> wlan create 10 CORPORATE
<span class="o">(</span>Cisco Controller<span class="o">)</span> <span class="o">&gt;</span> wlan security 802.1x <span class="nb">enable </span>10
<span class="o">(</span>Cisco Controller<span class="o">)</span> <span class="o">&gt;</span> wlan security wpa akm 802.1x <span class="nb">enable </span>10
</code></pre></div></div>

<h3 id="-wi-fi-66e-기술">📶 Wi-Fi 6/6E 기술</h3>

<h4 id="wi-fi-6-80211ax-주요-특징">Wi-Fi 6 (802.11ax) 주요 특징</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>OFDMA <span class="o">(</span>Orthogonal Frequency Division Multiple Access<span class="o">)</span>:
- 다중 사용자 동시 전송
- 효율적인 스펙트럼 사용
- 지연 시간 감소

MU-MIMO <span class="o">(</span>Multi-User MIMO<span class="o">)</span>:
- 최대 8x8 안테나 지원
- 다운링크/업링크 모두 지원
- 동시 다중 사용자 서비스

1024-QAM:
- 25% 높은 데이터 전송률
- 신호 품질이 좋은 환경에서 효과적

TWT <span class="o">(</span>Target Wake Time<span class="o">)</span>:
- IoT 디바이스 배터리 수명 연장
- 스케줄링된 통신
</code></pre></div></div>

<h4 id="wi-fi-6-ap-설정-실습">Wi-Fi 6 AP 설정 실습</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Cisco Wi-Fi 6 AP 설정</span>
<span class="c"># 802.11ax 활성화</span>
ap dot11 24ghz radio 1
 station-role root
 power <span class="nb">local </span>maximum 20
 channel width 80
 txpower auto

<span class="c"># OFDMA 활성화  </span>
ap dot11 5ghz radio 2
 station-role root
 power <span class="nb">local </span>maximum 23
 channel width 160
 ofdma
 mu-mimo

<span class="c"># BSS Coloring 설정 (간섭 감소)</span>
wlan 10
 bss-color 1-63
 
<span class="c"># TWT 설정</span>
ap name AP-WIFI6-01
 twt <span class="nb">enable</span>
</code></pre></div></div>

<h2 id="5g와-셀룰러-기술--5g-and-cellular-technology">5G와 셀룰러 기술 | 5G and Cellular Technology</h2>

<h3 id="-5g-기술-개요">📱 5G 기술 개요</h3>

<h4 id="5g-네트워크-아키텍처">5G 네트워크 아키텍처</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 5G 핵심 구성요소</span>
RAN <span class="o">(</span>Radio Access Network<span class="o">)</span>:
- gNB <span class="o">(</span>5G Base Station<span class="o">)</span>
- CU <span class="o">(</span>Centralized Unit<span class="o">)</span>  
- DU <span class="o">(</span>Distributed Unit<span class="o">)</span>
- RU <span class="o">(</span>Radio Unit<span class="o">)</span>

Core Network <span class="o">(</span>5GC<span class="o">)</span>:
- AMF <span class="o">(</span>Access and Mobility Management Function<span class="o">)</span>
- SMF <span class="o">(</span>Session Management Function<span class="o">)</span>
- UPF <span class="o">(</span>User Plane Function<span class="o">)</span>
- AUSF <span class="o">(</span>Authentication Server Function<span class="o">)</span>
- UDM <span class="o">(</span>Unified Data Management<span class="o">)</span>

<span class="c"># 5G 주파수 대역</span>
Sub-6GHz <span class="o">(</span>FR1<span class="o">)</span>:
- 저주파: 600MHz ~ 6GHz
- 넓은 커버리지, 건물 투과력 좋음
- 최대 속도: 1Gbps

mmWave <span class="o">(</span>FR2<span class="o">)</span>:
- 고주파: 24GHz ~ 100GHz  
- 초고속, 초저지연
- 커버리지 제한적
- 최대 속도: 10Gbps+
</code></pre></div></div>

<h4 id="5g-네트워크-슬라이싱">5G 네트워크 슬라이싱</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 슬라이스 유형별 특성</span>
eMBB <span class="o">(</span>Enhanced Mobile Broadband<span class="o">)</span>:
- 높은 대역폭 <span class="o">(</span>20Gbps+<span class="o">)</span>  
- 4K/8K 비디오, AR/VR
- 지연시간: 4ms 이하

URLLC <span class="o">(</span>Ultra-Reliable Low-Latency Communications<span class="o">)</span>:
- 초저지연 <span class="o">(</span>1ms<span class="o">)</span>
- 99.999% 신뢰성
- 자율주행, 산업 자동화

mMTC <span class="o">(</span>Massive Machine Type Communications<span class="o">)</span>:  
- 대량 IoT 디바이스 <span class="o">(</span>1M/km²<span class="o">)</span>
- 저전력, 저비용
- 스마트시티, 농업 IoT
</code></pre></div></div>

<h3 id="-sd-wan-기술">🌐 SD-WAN 기술</h3>

<p>SD-WAN은 소프트웨어 정의 방식으로 WAN을 관리하는 기술입니다.</p>

<h4 id="sd-wan-아키텍처">SD-WAN 아키텍처</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SD-WAN 구성요소</span>
Edge Device <span class="o">(</span>vCPE/uCPE<span class="o">)</span>:
- 지사에 설치되는 SD-WAN 장비
- 트래픽 라우팅 및 정책 적용

Orchestrator:  
- 중앙 집중식 관리 플랫폼
- 정책 설정 및 배포

Controller:
- 네트워크 토폴로지 관리
- 경로 최적화 결정

<span class="c"># 전송 방식</span>
MPLS: 높은 품질, 높은 비용
Internet: 낮은 비용, 가변적 품질  
LTE/5G: 이동성, 백업용
</code></pre></div></div>

<h4 id="sd-wan-구현-velocloudvmware">SD-WAN 구현 (VeloCloud/VMware)</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Edge 설정 예시</span>
<span class="c"># WAN 인터페이스 설정</span>
configure
interface GE1
 ip dhcp
 wan-interface internet1
 <span class="nb">exit

</span>interface GE2  
 ip address 10.1.1.1/30
 wan-interface mpls1
 <span class="nb">exit</span>

<span class="c"># 비즈니스 정책 설정</span>
business-policy VOICE
 application-classification voice
 sla latency 150
 sla jitter 30
 sla loss 1
 path-preference mpls1
 path-preference internet1

<span class="c"># 애플리케이션 기반 라우팅</span>
application-map
 application office365 path internet1
 application salesforce path internet1
 application voice path mpls1
 application video path mpls1
</code></pre></div></div>

<h4 id="open-source-sd-wan-flexiwan">Open Source SD-WAN (FlexiWAN)</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># FlexiWAN Agent 설치</span>
curl <span class="nt">-s</span> https://get.flexiwan.com | <span class="nb">sudo </span>bash

<span class="c"># 디바이스 등록</span>
flexiwan-mgmt device register <span class="nt">--token</span> &lt;registration-token&gt;

<span class="c"># 인터페이스 설정</span>
<span class="o">{</span>
  <span class="s2">"interfaces"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"eth0"</span>,
      <span class="s2">"type"</span>: <span class="s2">"WAN"</span>, 
      <span class="s2">"dhcp"</span>: <span class="s2">"yes"</span>,
      <span class="s2">"metric"</span>: 100
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"eth1"</span>,
      <span class="s2">"type"</span>: <span class="s2">"LAN"</span>,
      <span class="s2">"addr"</span>: <span class="s2">"192.168.1.1/24"</span>
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>

<span class="c"># 터널 설정</span>
<span class="o">{</span>
  <span class="s2">"tunnels"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"num"</span>: 1,
      <span class="s2">"peer"</span>: <span class="s2">"203.0.113.2"</span>,
      <span class="s2">"peer_port"</span>: 4789,
      <span class="s2">"local_port"</span>: 4789,
      <span class="s2">"encryption"</span>: <span class="s2">"yes"</span>
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="네트워크-가상화--network-virtualization">네트워크 가상화 | Network Virtualization</h2>

<h3 id="-sdn-software-defined-networking">🔀 SDN (Software Defined Networking)</h3>

<h4 id="openflow-기본-개념">OpenFlow 기본 개념</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># OpenFlow 스위치 구조</span>
Flow Table → Group Table → Meter Table

<span class="c"># Flow Entry 구성</span>
Match Fields: 패킷 매칭 조건
Instructions: 수행할 동작  
Counters: 통계 정보
Timeouts: 타임아웃 설정
Priority: 우선순위

<span class="c"># OpenFlow 메시지 유형</span>
Controller-to-Switch:
- Flow-Mod: 플로우 테이블 수정
- Group-Mod: 그룹 테이블 수정
- Port-Mod: 포트 설정 수정

Switch-to-Controller:
- Packet-In: 매칭되지 않은 패킷 전송
- Flow-Removed: 플로우 제거 알림
</code></pre></div></div>

<h4 id="opendaylight-컨트롤러-설정">OpenDaylight 컨트롤러 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># OpenDaylight 설치</span>
wget https://nexus.opendaylight.org/content/repositories/opendaylight.release/org/opendaylight/integration/karaf/0.13.3/karaf-0.13.3.tar.gz
<span class="nb">tar</span> <span class="nt">-xzf</span> karaf-0.13.3.tar.gz
<span class="nb">cd </span>karaf-0.13.3

<span class="c"># 컨트롤러 시작</span>
./bin/karaf

<span class="c"># 필수 피처 설치</span>
opendaylight-user@root&gt; feature:install odl-restconf odl-l2switch-switch-ui odl-mdsal-apidocs

<span class="c"># REST API를 통한 플로우 추가</span>
curl <span class="nt">-u</span> admin:admin <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-X</span> PUT <span class="se">\</span>
http://localhost:8181/restconf/config/opendaylight-inventory:nodes/node/openflow:1/flow-node-inventory:table/0/flow/1 <span class="se">\</span>
<span class="nt">-d</span> <span class="s1">'{
  "flow": [
    {
      "id": "1",
      "match": {
        "ethernet-match": {
          "ethernet-type": {
            "type": 2048
          }
        },
        "ipv4-destination": "192.168.1.100/32"
      },
      "instructions": {
        "instruction": [
          {
            "order": 0,
            "apply-actions": {
              "action": [
                {
                  "order": 0,
                  "output-action": {
                    "output-node-connector": "2"
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}'</span>
</code></pre></div></div>

<h3 id="️-네트워크-함수-가상화-nfv">☁️ 네트워크 함수 가상화 (NFV)</h3>

<h4 id="vnf-virtual-network-function-구현">VNF (Virtual Network Function) 구현</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 가상 라우터 (VyOS) 배포</span>
<span class="c"># Docker 컨테이너로 배포</span>
docker run <span class="nt">-d</span> <span class="nt">--name</span> vyos-router <span class="se">\</span>
  <span class="nt">--privileged</span> <span class="se">\</span>
  <span class="nt">--cap-add</span><span class="o">=</span>NET_ADMIN <span class="se">\</span>
  <span class="nt">-v</span> /lib/modules:/lib/modules:ro <span class="se">\</span>
  vyos/vyos:1.3

<span class="c"># 네트워크 네임스페이스 설정</span>
ip netns add router-ns
ip <span class="nb">link </span>add veth0 <span class="nb">type </span>veth peer name veth1
ip <span class="nb">link set </span>veth1 netns router-ns
ip netns <span class="nb">exec </span>router-ns ip addr add 10.0.1.1/24 dev veth1
ip netns <span class="nb">exec </span>router-ns ip <span class="nb">link set </span>veth1 up

<span class="c"># 가상 방화벽 (iptables 기반)</span>
<span class="c">#!/bin/bash</span>
<span class="c"># Virtual Firewall Function</span>
iptables <span class="nt">-F</span>
iptables <span class="nt">-P</span> INPUT DROP
iptables <span class="nt">-P</span> FORWARD DROP  
iptables <span class="nt">-P</span> OUTPUT ACCEPT

<span class="c"># 허용 규칙</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-i</span> lo <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> INPUT <span class="nt">-m</span> state <span class="nt">--state</span> ESTABLISHED,RELATED <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 22 <span class="nt">-s</span> 192.168.1.0/24 <span class="nt">-j</span> ACCEPT

<span class="c"># 포워딩 규칙</span>
iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> eth0 <span class="nt">-o</span> eth1 <span class="nt">-m</span> state <span class="nt">--state</span> ESTABLISHED,RELATED <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> eth1 <span class="nt">-o</span> eth0 <span class="nt">-j</span> ACCEPT

<span class="c"># NAT 설정</span>
iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-o</span> eth0 <span class="nt">-j</span> MASQUERADE
</code></pre></div></div>

<h2 id="엣지-컴퓨팅--edge-computing">엣지 컴퓨팅 | Edge Computing</h2>

<h3 id="️-mec-multi-access-edge-computing">🏗️ MEC (Multi-access Edge Computing)</h3>

<h4 id="mec-플랫폼-구조">MEC 플랫폼 구조</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># MEC 구성요소</span>
MEC Platform:
- 애플리케이션 라이프사이클 관리
- 서비스 레지스트리 및 발견
- 트래픽 라우팅

MEC Apps:
- 실시간 비디오 분석
- AR/VR 애플리케이션  
- IoT 데이터 처리

<span class="c"># MEC 배포 시나리오</span>
Corporate Edge: 기업 캠퍼스
Service Provider Edge: 통신사 CO
Access Edge: 기지국, Wi-Fi AP
Device Edge: CPE, 게이트웨이
</code></pre></div></div>

<h4 id="kubernetes-기반-엣지-컴퓨팅">Kubernetes 기반 엣지 컴퓨팅</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Edge Node 설정</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Node</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">edge-node-01</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">node-type</span><span class="pi">:</span> <span class="s">edge</span>
    <span class="na">location</span><span class="pi">:</span> <span class="s">branch-office</span>
    <span class="na">kubernetes.io/arch</span><span class="pi">:</span> <span class="s">arm64</span>

<span class="c1"># Edge 애플리케이션 배포</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">video-analytics</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">video-analytics</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">video-analytics</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">nodeSelector</span><span class="pi">:</span>
        <span class="na">node-type</span><span class="pi">:</span> <span class="s">edge</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">analytics</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">video-analytics:latest</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1Gi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">512Mi"</span> 
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">250m"</span>
        <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CAMERA_URL</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">rtsp://192.168.1.100:554/stream"</span>
</code></pre></div></div>

<h2 id="네트워크-자동화--network-automation">네트워크 자동화 | Network Automation</h2>

<h3 id="-ansible-네트워크-자동화">🤖 Ansible 네트워크 자동화</h3>

<h4 id="네트워크-인벤토리-설정">네트워크 인벤토리 설정</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># inventory.yml</span>
<span class="na">all</span><span class="pi">:</span>
  <span class="na">children</span><span class="pi">:</span>
    <span class="na">routers</span><span class="pi">:</span>
      <span class="na">hosts</span><span class="pi">:</span>
        <span class="na">router01</span><span class="pi">:</span>
          <span class="na">ansible_host</span><span class="pi">:</span> <span class="s">192.168.1.1</span>
          <span class="na">ansible_network_os</span><span class="pi">:</span> <span class="s">ios</span>
        <span class="na">router02</span><span class="pi">:</span>
          <span class="na">ansible_host</span><span class="pi">:</span> <span class="s">192.168.1.2</span>
          <span class="na">ansible_network_os</span><span class="pi">:</span> <span class="s">ios</span>
    <span class="na">switches</span><span class="pi">:</span>
      <span class="na">hosts</span><span class="pi">:</span>
        <span class="na">switch01</span><span class="pi">:</span>
          <span class="na">ansible_host</span><span class="pi">:</span> <span class="s">192.168.1.10</span>
          <span class="na">ansible_network_os</span><span class="pi">:</span> <span class="s">ios</span>
        <span class="na">switch02</span><span class="pi">:</span>
          <span class="na">ansible_host</span><span class="pi">:</span> <span class="s">192.168.1.11</span>
          <span class="na">ansible_network_os</span><span class="pi">:</span> <span class="s">ios</span>

  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">ansible_connection</span><span class="pi">:</span> <span class="s">network_cli</span>
    <span class="na">ansible_user</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">ansible_ssh_pass</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
    <span class="na">ansible_become</span><span class="pi">:</span> <span class="s">yes</span>
    <span class="na">ansible_become_method</span><span class="pi">:</span> <span class="s">enable</span>
    <span class="na">ansible_become_pass</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
</code></pre></div></div>

<h4 id="vlan-자동-배포-플레이북">VLAN 자동 배포 플레이북</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># deploy-vlans.yml</span>
<span class="nn">---</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Configure VLANs across switches</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">switches</span>
  <span class="na">gather_facts</span><span class="pi">:</span> <span class="s">no</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">vlans</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="m">10</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">SALES</span>
        <span class="na">ports</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">1</span><span class="pi">,</span> <span class="nv">2</span><span class="pi">,</span> <span class="nv">3</span><span class="pi">,</span> <span class="nv">4</span><span class="pi">,</span> <span class="nv">5</span><span class="pi">]</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">ENGINEERING</span>  
        <span class="na">ports</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">6</span><span class="pi">,</span> <span class="nv">7</span><span class="pi">,</span> <span class="nv">8</span><span class="pi">,</span> <span class="nv">9</span><span class="pi">,</span> <span class="nv">10</span><span class="pi">]</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="m">30</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">GUEST</span>
        <span class="na">ports</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">11</span><span class="pi">,</span> <span class="nv">12</span><span class="pi">]</span>

  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Create VLANs</span>
      <span class="na">ios_vlan</span><span class="pi">:</span>
        <span class="na">vlan_id</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        <span class="na">state</span><span class="pi">:</span> <span class="s">present</span>
      <span class="na">loop</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Configure access ports</span>
      <span class="na">ios_l2_interfaces</span><span class="pi">:</span>
        <span class="na">config</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">FastEthernet0/"</span>
            <span class="na">access</span><span class="pi">:</span>
              <span class="na">vlan</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
      <span class="na">with_subelements</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">"</span>
        <span class="pi">-</span> <span class="s">ports</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Configure trunk port</span>
      <span class="na">ios_l2_interfaces</span><span class="pi">:</span>
        <span class="na">config</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FastEthernet0/24</span>
            <span class="na">trunk</span><span class="pi">:</span>
              <span class="na">allowed_vlans</span><span class="pi">:</span> <span class="s2">"</span><span class="s">10,20,30"</span>
              <span class="na">native_vlan</span><span class="pi">:</span> <span class="m">1</span>
</code></pre></div></div>

<h3 id="-python-네트워크-자동화">🐍 Python 네트워크 자동화</h3>

<h4 id="napalm을-이용한-네트워크-관리">NAPALM을 이용한 네트워크 관리</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">napalm</span> <span class="kn">import</span> <span class="n">get_network_driver</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="c1"># 디바이스 연결 설정
</span><span class="n">driver</span> <span class="o">=</span> <span class="nf">get_network_driver</span><span class="p">(</span><span class="sh">'</span><span class="s">ios</span><span class="sh">'</span><span class="p">)</span>
<span class="n">device</span> <span class="o">=</span> <span class="nf">driver</span><span class="p">(</span><span class="sh">'</span><span class="s">192.168.1.1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">admin</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="c1"># 디바이스 연결
</span>    <span class="n">device</span><span class="p">.</span><span class="nf">open</span><span class="p">()</span>
    
    <span class="c1"># 인터페이스 정보 수집
</span>    <span class="n">interfaces</span> <span class="o">=</span> <span class="n">device</span><span class="p">.</span><span class="nf">get_interfaces</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">interfaces</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    
    <span class="c1"># 라우팅 테이블 확인
</span>    <span class="n">routes</span> <span class="o">=</span> <span class="n">device</span><span class="p">.</span><span class="nf">get_route_to</span><span class="p">(</span><span class="sh">'</span><span class="s">8.8.8.8</span><span class="sh">'</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">routes</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    
    <span class="c1"># 설정 변경 (ACL 추가)
</span>    <span class="n">config</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
    ip access-list extended BLOCK_SOCIAL
    deny tcp any host 23.35.67.140 eq 80
    permit ip any any
    </span><span class="sh">"""</span>
    
    <span class="c1"># 설정 로드 (아직 적용하지 않음)
</span>    <span class="n">device</span><span class="p">.</span><span class="nf">load_merge_candidate</span><span class="p">(</span><span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">)</span>
    
    <span class="c1"># 설정 차이 확인
</span>    <span class="n">diff</span> <span class="o">=</span> <span class="n">device</span><span class="p">.</span><span class="nf">compare_config</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">diff</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Configuration diff:</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">diff</span><span class="p">)</span>
        
        <span class="c1"># 사용자 확인 후 적용
</span>        <span class="n">confirm</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Apply configuration? (y/n): </span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">confirm</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">device</span><span class="p">.</span><span class="nf">commit_config</span><span class="p">()</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Configuration applied successfully</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">device</span><span class="p">.</span><span class="nf">discard_config</span><span class="p">()</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Configuration discarded</span><span class="sh">"</span><span class="p">)</span>
    
<span class="k">finally</span><span class="p">:</span>
    <span class="n">device</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="netmiko를-이용한-대량-설정">Netmiko를 이용한 대량 설정</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">netmiko</span> <span class="kn">import</span> <span class="n">ConnectHandler</span>
<span class="kn">from</span> <span class="n">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>
<span class="kn">import</span> <span class="n">threading</span>

<span class="c1"># 디바이스 리스트
</span><span class="n">devices</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">device_type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">cisco_ios</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">host</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">192.168.1.1</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">admin</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">hostname</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Router01</span><span class="sh">'</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">device_type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">cisco_ios</span><span class="sh">'</span><span class="p">,</span> 
        <span class="sh">'</span><span class="s">host</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">192.168.1.2</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">admin</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">hostname</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Router02</span><span class="sh">'</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">configure_device</span><span class="p">(</span><span class="n">device</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">개별 디바이스 설정 함수</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># SSH 연결
</span>        <span class="n">connection</span> <span class="o">=</span> <span class="nc">ConnectHandler</span><span class="p">(</span><span class="o">**</span><span class="n">device</span><span class="p">)</span>
        
        <span class="c1"># NTP 서버 설정
</span>        <span class="n">ntp_config</span> <span class="o">=</span> <span class="p">[</span>
            <span class="sh">'</span><span class="s">ntp server 192.168.1.100</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">ntp server 8.8.8.8</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">clock timezone KST 9 0</span><span class="sh">'</span>
        <span class="p">]</span>
        
        <span class="c1"># 설정 적용
</span>        <span class="n">output</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="nf">send_config_set</span><span class="p">(</span><span class="n">ntp_config</span><span class="p">)</span>
        
        <span class="c1"># SNMP 설정
</span>        <span class="n">snmp_config</span> <span class="o">=</span> <span class="p">[</span>
            <span class="sh">'</span><span class="s">snmp-server community public ro</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">snmp-server host 192.168.1.200 version 2c public</span><span class="sh">'</span>
        <span class="p">]</span>
        
        <span class="n">output</span> <span class="o">+=</span> <span class="n">connection</span><span class="p">.</span><span class="nf">send_config_set</span><span class="p">(</span><span class="n">snmp_config</span><span class="p">)</span>
        
        <span class="c1"># 설정 저장
</span>        <span class="n">save_output</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="nf">save_config</span><span class="p">()</span>
        
        <span class="n">connection</span><span class="p">.</span><span class="nf">disconnect</span><span class="p">()</span>
        
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">✅ </span><span class="si">{</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">hostname</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">: Configuration completed</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">True</span>
        
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">❌ </span><span class="si">{</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">hostname</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">: Error - </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="c1"># 병렬 실행
</span><span class="k">with</span> <span class="nc">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span> <span class="k">as</span> <span class="n">executor</span><span class="p">:</span>
    <span class="n">results</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">executor</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">configure_device</span><span class="p">,</span> <span class="n">devices</span><span class="p">))</span>

<span class="n">success_count</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">완료: </span><span class="si">{</span><span class="n">success_count</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">devices</span><span class="p">)</span><span class="si">}</span><span class="s"> 디바이스</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="-네트워크-모니터링-자동화">📊 네트워크 모니터링 자동화</h3>

<h4 id="prometheus--grafana-모니터링">Prometheus + Grafana 모니터링</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># prometheus.yml</span>
<span class="na">global</span><span class="pi">:</span>
  <span class="na">scrape_interval</span><span class="pi">:</span> <span class="s">15s</span>

<span class="na">scrape_configs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">snmp-devices'</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">192.168.1.1</span>  <span class="c1"># Router01</span>
        <span class="pi">-</span> <span class="s">192.168.1.2</span>  <span class="c1"># Router02</span>
        <span class="pi">-</span> <span class="s">192.168.1.10</span> <span class="c1"># Switch01</span>
    <span class="na">metrics_path</span><span class="pi">:</span> <span class="s">/snmp</span>
    <span class="na">params</span><span class="pi">:</span>
      <span class="na">module</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">if_mib</span><span class="pi">]</span>
    <span class="na">relabel_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">source_labels</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">__address__</span><span class="pi">]</span>
        <span class="na">target_label</span><span class="pi">:</span> <span class="s">__param_target</span>
      <span class="pi">-</span> <span class="na">source_labels</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">__param_target</span><span class="pi">]</span>
        <span class="na">target_label</span><span class="pi">:</span> <span class="s">instance</span>
      <span class="pi">-</span> <span class="na">target_label</span><span class="pi">:</span> <span class="s">__address__</span>
        <span class="na">replacement</span><span class="pi">:</span> <span class="s">192.168.1.100:9116</span>  <span class="c1"># SNMP Exporter</span>

  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">snmp-exporter'</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">192.168.1.100:9116'</span><span class="pi">]</span>
</code></pre></div></div>

<h4 id="네트워크-장애-알림-자동화">네트워크 장애 알림 자동화</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">smtplib</span>
<span class="kn">from</span> <span class="n">email.mime.text</span> <span class="kn">import</span> <span class="n">MIMEText</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="k">class</span> <span class="nc">NetworkMonitor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">devices</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Router01</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">192.168.1.1</span><span class="sh">'</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Switch01</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">192.168.1.10</span><span class="sh">'</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">AP01</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">192.168.1.20</span><span class="sh">'</span><span class="p">}</span>
        <span class="p">]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">previous_status</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">def</span> <span class="nf">check_device</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">SNMP 또는 PING으로 디바이스 상태 확인</span><span class="sh">"""</span>
        <span class="kn">import</span> <span class="n">subprocess</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># PING 테스트
</span>            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span>
                <span class="p">[</span><span class="sh">'</span><span class="s">ping</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">-c</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">-W</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">3</span><span class="sh">'</span><span class="p">,</span> <span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">]],</span> 
                <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span>
            <span class="p">)</span>
            
            <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">UP</span><span class="sh">'</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">DOWN</span><span class="sh">'</span>
                
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error checking </span><span class="si">{</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="sh">'</span><span class="s">ERROR</span><span class="sh">'</span>
    
    <span class="k">def</span> <span class="nf">send_alert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Slack 또는 이메일로 알림 전송</span><span class="sh">"""</span>
        <span class="c1"># Slack 알림
</span>        <span class="n">webhook_url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://hooks.slack.com/services/YOUR/WEBHOOK/URL</span><span class="sh">"</span>
        
        <span class="n">message</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">🚨 Network Alert: </span><span class="si">{</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">status</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">attachments</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="sh">"</span><span class="s">color</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">danger</span><span class="sh">"</span> <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="sh">'</span><span class="s">DOWN</span><span class="sh">'</span> <span class="k">else</span> <span class="sh">"</span><span class="s">good</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">fields</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
                        <span class="p">{</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Device</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">],</span> <span class="sh">"</span><span class="s">short</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">},</span>
                        <span class="p">{</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">IP</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">],</span> <span class="sh">"</span><span class="s">short</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">},</span>
                        <span class="p">{</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">status</span><span class="p">,</span> <span class="sh">"</span><span class="s">short</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">},</span>
                        <span class="p">{</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Time</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%m-%d %H:%M:%S</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">short</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
                    <span class="p">]</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">}</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">webhook_url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Alert sent for </span><span class="si">{</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Failed to send alert: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">monitor_loop</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">메인 모니터링 루프</span><span class="sh">"""</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">devices</span><span class="p">:</span>
                <span class="n">current_status</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">check_device</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
                <span class="n">previous_status</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">previous_status</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">UP</span><span class="sh">'</span><span class="p">)</span>
                
                <span class="c1"># 상태 변화 감지
</span>                <span class="k">if</span> <span class="n">current_status</span> <span class="o">!=</span> <span class="n">previous_status</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> status changed: </span><span class="si">{</span><span class="n">previous_status</span><span class="si">}</span><span class="s"> -&gt; </span><span class="si">{</span><span class="n">current_status</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                    <span class="n">self</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">current_status</span><span class="p">)</span>
                    
                <span class="n">self</span><span class="p">.</span><span class="n">previous_status</span><span class="p">[</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]]</span> <span class="o">=</span> <span class="n">current_status</span>
                
            <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>  <span class="c1"># 1분마다 체크
</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">monitor</span> <span class="o">=</span> <span class="nc">NetworkMonitor</span><span class="p">()</span>
    <span class="n">monitor</span><span class="p">.</span><span class="nf">monitor_loop</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="다음-편-예고">다음 편 예고</h2>

<p>다음 포스트에서는 <strong>네트워크 보안과 트러블슈팅</strong>의 고급 주제들을 다룰 예정입니다:</p>
<ul>
  <li>차세대 방화벽과 IDS/IPS</li>
  <li>네트워크 포렌식과 위협 헌팅</li>
  <li>제로 트러스트 네트워크 아키텍처</li>
  <li>고급 네트워크 문제 해결 기법</li>
</ul>

<p>무선 네트워킹과 최신 기술들을 마스터하셨나요? 🌐✨</p>]]></content><author><name>DevOps Engineer</name></author><category term="Networking" /><category term="Wireless" /><category term="wifi" /><category term="wireless" /><category term="5g" /><category term="sd-wan" /><category term="network-automation" /><category term="edge-computing" /><category term="wifi6" /><summary type="html"><![CDATA[무선 네트워킹 기술과 최신 네트워크 기술 동향을 깊이 있게 알아보고 실무에 적용해보겠습니다. 무선 네트워킹 기초 | Wireless Networking Fundamentals 📡 무선 통신 기본 개념 전파의 특성 # 주파수 대역별 특성 2.4GHz 대역: - 전파 도달 거리: 길음 (벽 투과력 좋음) - 대역폭: 제한적 (최대 3개 비간섭 채널) - 간섭: 많음 (전자레인지, 블루투스 등) 5GHz 대역: - 전파 도달 거리: 짧음 (직진성 강함) - 대역폭: 풍부 (최대 25개 비간섭 채널) - 간섭: 적음 6GHz 대역 (Wi-Fi 6E): - 전파 도달 거리: 매우 짧음 - 대역폭: 매우 풍부 (59개 20MHz 채널) - 간섭: 거의 없음 dBm과 신호 강도 # dBm 참조표 -30 dBm: 매우 강함 (AP 바로 옆) -50 dBm: 강함 (우수한 연결) -60 dBm: 좋음 (안정적 연결) -70 dBm: 약함 (최소 연결 가능) -80 dBm: 매우 약함 (연결 불안정) -90 dBm: 연결 불가 # 신호 강도 측정 (Linux) iwconfig wlan0 iw dev wlan0 scan | grep -E "SSID|signal|freq" wavemon # 실시간 무선 모니터링 🔐 Wi-Fi 보안 기술 보안 프로토콜 발전사 WEP (Wired Equivalent Privacy): - 1997년 도입, 현재 사용 금지 - 40/104비트 키 길이 - RC4 암호화, 쉽게 크랙됨 WPA (Wi-Fi Protected Access): - 2003년 도입, WEP의 임시 대안 - TKIP 암호화, RC4 기반 - 동적 키 생성 WPA2 (802.11i): - 2004년 도입, 현재 표준 - AES-CCMP 암호화 - PSK(개인용) / Enterprise(기업용) WPA3 (2018년 도입): - SAE (Simultaneous Authentication of Equals) - 개선된 오픈 네트워크 보안 - 더 강력한 암호화 (192비트) WPA2/WPA3 Enterprise 설정 # FreeRADIUS 서버 설정 (/etc/freeradius/clients.conf) client wireless-controller { ipaddr = 192.168.1.10 secret = radiusSecret123 shortname = wlc } # 사용자 인증 설정 (/etc/freeradius/users) john Cleartext-Password := "password123" Tunnel-Type = VLAN, Tunnel-Medium-Type = IEEE-802, Tunnel-Private-Group-Id = 10 # 인증서 기반 설정 (802.1X EAP-TLS) alice TLS-Cert-Serial := "1234567890" Tunnel-Type = VLAN, Tunnel-Medium-Type = IEEE-802, Tunnel-Private-Group-Id = 20 # Cisco WLC RADIUS 설정 (Cisco Controller) &gt; configure terminal (Cisco Controller) &gt; radius auth add 1 192.168.1.100 1812 radiusSecret123 (Cisco Controller) &gt; radius acct add 1 192.168.1.100 1813 radiusSecret123 (Cisco Controller) &gt; wlan create 10 CORPORATE (Cisco Controller) &gt; wlan security 802.1x enable 10 (Cisco Controller) &gt; wlan security wpa akm 802.1x enable 10 📶 Wi-Fi 6/6E 기술 Wi-Fi 6 (802.11ax) 주요 특징 OFDMA (Orthogonal Frequency Division Multiple Access): - 다중 사용자 동시 전송 - 효율적인 스펙트럼 사용 - 지연 시간 감소 MU-MIMO (Multi-User MIMO): - 최대 8x8 안테나 지원 - 다운링크/업링크 모두 지원 - 동시 다중 사용자 서비스 1024-QAM: - 25% 높은 데이터 전송률 - 신호 품질이 좋은 환경에서 효과적 TWT (Target Wake Time): - IoT 디바이스 배터리 수명 연장 - 스케줄링된 통신 Wi-Fi 6 AP 설정 실습 # Cisco Wi-Fi 6 AP 설정 # 802.11ax 활성화 ap dot11 24ghz radio 1 station-role root power local maximum 20 channel width 80 txpower auto # OFDMA 활성화 ap dot11 5ghz radio 2 station-role root power local maximum 23 channel width 160 ofdma mu-mimo # BSS Coloring 설정 (간섭 감소) wlan 10 bss-color 1-63 # TWT 설정 ap name AP-WIFI6-01 twt enable 5G와 셀룰러 기술 | 5G and Cellular Technology 📱 5G 기술 개요 5G 네트워크 아키텍처 # 5G 핵심 구성요소 RAN (Radio Access Network): - gNB (5G Base Station) - CU (Centralized Unit) - DU (Distributed Unit) - RU (Radio Unit) Core Network (5GC): - AMF (Access and Mobility Management Function) - SMF (Session Management Function) - UPF (User Plane Function) - AUSF (Authentication Server Function) - UDM (Unified Data Management) # 5G 주파수 대역 Sub-6GHz (FR1): - 저주파: 600MHz ~ 6GHz - 넓은 커버리지, 건물 투과력 좋음 - 최대 속도: 1Gbps mmWave (FR2): - 고주파: 24GHz ~ 100GHz - 초고속, 초저지연 - 커버리지 제한적 - 최대 속도: 10Gbps+ 5G 네트워크 슬라이싱 # 슬라이스 유형별 특성 eMBB (Enhanced Mobile Broadband): - 높은 대역폭 (20Gbps+) - 4K/8K 비디오, AR/VR - 지연시간: 4ms 이하 URLLC (Ultra-Reliable Low-Latency Communications): - 초저지연 (1ms) - 99.999% 신뢰성 - 자율주행, 산업 자동화 mMTC (Massive Machine Type Communications): - 대량 IoT 디바이스 (1M/km²) - 저전력, 저비용 - 스마트시티, 농업 IoT 🌐 SD-WAN 기술 SD-WAN은 소프트웨어 정의 방식으로 WAN을 관리하는 기술입니다. SD-WAN 아키텍처 # SD-WAN 구성요소 Edge Device (vCPE/uCPE): - 지사에 설치되는 SD-WAN 장비 - 트래픽 라우팅 및 정책 적용 Orchestrator: - 중앙 집중식 관리 플랫폼 - 정책 설정 및 배포 Controller: - 네트워크 토폴로지 관리 - 경로 최적화 결정 # 전송 방식 MPLS: 높은 품질, 높은 비용 Internet: 낮은 비용, 가변적 품질 LTE/5G: 이동성, 백업용 SD-WAN 구현 (VeloCloud/VMware) # Edge 설정 예시 # WAN 인터페이스 설정 configure interface GE1 ip dhcp wan-interface internet1 exit interface GE2 ip address 10.1.1.1/30 wan-interface mpls1 exit # 비즈니스 정책 설정 business-policy VOICE application-classification voice sla latency 150 sla jitter 30 sla loss 1 path-preference mpls1 path-preference internet1 # 애플리케이션 기반 라우팅 application-map application office365 path internet1 application salesforce path internet1 application voice path mpls1 application video path mpls1 Open Source SD-WAN (FlexiWAN) # FlexiWAN Agent 설치 curl -s https://get.flexiwan.com | sudo bash # 디바이스 등록 flexiwan-mgmt device register --token &lt;registration-token&gt; # 인터페이스 설정 { "interfaces": [ { "name": "eth0", "type": "WAN", "dhcp": "yes", "metric": 100 }, { "name": "eth1", "type": "LAN", "addr": "192.168.1.1/24" } ] } # 터널 설정 { "tunnels": [ { "num": 1, "peer": "203.0.113.2", "peer_port": 4789, "local_port": 4789, "encryption": "yes" } ] } 네트워크 가상화 | Network Virtualization 🔀 SDN (Software Defined Networking) OpenFlow 기본 개념 # OpenFlow 스위치 구조 Flow Table → Group Table → Meter Table # Flow Entry 구성 Match Fields: 패킷 매칭 조건 Instructions: 수행할 동작 Counters: 통계 정보 Timeouts: 타임아웃 설정 Priority: 우선순위 # OpenFlow 메시지 유형 Controller-to-Switch: - Flow-Mod: 플로우 테이블 수정 - Group-Mod: 그룹 테이블 수정 - Port-Mod: 포트 설정 수정 Switch-to-Controller: - Packet-In: 매칭되지 않은 패킷 전송 - Flow-Removed: 플로우 제거 알림 OpenDaylight 컨트롤러 설정 # OpenDaylight 설치 wget https://nexus.opendaylight.org/content/repositories/opendaylight.release/org/opendaylight/integration/karaf/0.13.3/karaf-0.13.3.tar.gz tar -xzf karaf-0.13.3.tar.gz cd karaf-0.13.3 # 컨트롤러 시작 ./bin/karaf # 필수 피처 설치 opendaylight-user@root&gt; feature:install odl-restconf odl-l2switch-switch-ui odl-mdsal-apidocs # REST API를 통한 플로우 추가 curl -u admin:admin -H "Content-Type: application/json" -X PUT \ http://localhost:8181/restconf/config/opendaylight-inventory:nodes/node/openflow:1/flow-node-inventory:table/0/flow/1 \ -d '{ "flow": [ { "id": "1", "match": { "ethernet-match": { "ethernet-type": { "type": 2048 } }, "ipv4-destination": "192.168.1.100/32" }, "instructions": { "instruction": [ { "order": 0, "apply-actions": { "action": [ { "order": 0, "output-action": { "output-node-connector": "2" } } ] } } ] } } ] }' ☁️ 네트워크 함수 가상화 (NFV) VNF (Virtual Network Function) 구현 # 가상 라우터 (VyOS) 배포 # Docker 컨테이너로 배포 docker run -d --name vyos-router \ --privileged \ --cap-add=NET_ADMIN \ -v /lib/modules:/lib/modules:ro \ vyos/vyos:1.3 # 네트워크 네임스페이스 설정 ip netns add router-ns ip link add veth0 type veth peer name veth1 ip link set veth1 netns router-ns ip netns exec router-ns ip addr add 10.0.1.1/24 dev veth1 ip netns exec router-ns ip link set veth1 up # 가상 방화벽 (iptables 기반) #!/bin/bash # Virtual Firewall Function iptables -F iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT ACCEPT # 허용 규칙 iptables -A INPUT -i lo -j ACCEPT iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -A INPUT -p tcp --dport 22 -s 192.168.1.0/24 -j ACCEPT # 포워딩 규칙 iptables -A FORWARD -i eth0 -o eth1 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT # NAT 설정 iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE 엣지 컴퓨팅 | Edge Computing 🏗️ MEC (Multi-access Edge Computing) MEC 플랫폼 구조 # MEC 구성요소 MEC Platform: - 애플리케이션 라이프사이클 관리 - 서비스 레지스트리 및 발견 - 트래픽 라우팅 MEC Apps: - 실시간 비디오 분석 - AR/VR 애플리케이션 - IoT 데이터 처리 # MEC 배포 시나리오 Corporate Edge: 기업 캠퍼스 Service Provider Edge: 통신사 CO Access Edge: 기지국, Wi-Fi AP Device Edge: CPE, 게이트웨이 Kubernetes 기반 엣지 컴퓨팅 # Edge Node 설정 apiVersion: v1 kind: Node metadata: name: edge-node-01 labels: node-type: edge location: branch-office kubernetes.io/arch: arm64 # Edge 애플리케이션 배포 apiVersion: apps/v1 kind: Deployment metadata: name: video-analytics spec: replicas: 1 selector: matchLabels: app: video-analytics template: metadata: labels: app: video-analytics spec: nodeSelector: node-type: edge containers: - name: analytics image: video-analytics:latest resources: limits: memory: "1Gi" cpu: "500m" requests: memory: "512Mi" cpu: "250m" env: - name: CAMERA_URL value: "rtsp://192.168.1.100:554/stream" 네트워크 자동화 | Network Automation 🤖 Ansible 네트워크 자동화 네트워크 인벤토리 설정 # inventory.yml all: children: routers: hosts: router01: ansible_host: 192.168.1.1 ansible_network_os: ios router02: ansible_host: 192.168.1.2 ansible_network_os: ios switches: hosts: switch01: ansible_host: 192.168.1.10 ansible_network_os: ios switch02: ansible_host: 192.168.1.11 ansible_network_os: ios vars: ansible_connection: network_cli ansible_user: admin ansible_ssh_pass: "" ansible_become: yes ansible_become_method: enable ansible_become_pass: "" VLAN 자동 배포 플레이북 # deploy-vlans.yml --- - name: Configure VLANs across switches hosts: switches gather_facts: no vars: vlans: - id: 10 name: SALES ports: [1, 2, 3, 4, 5] - id: 20 name: ENGINEERING ports: [6, 7, 8, 9, 10] - id: 30 name: GUEST ports: [11, 12] tasks: - name: Create VLANs ios_vlan: vlan_id: "" name: "" state: present loop: "" - name: Configure access ports ios_l2_interfaces: config: - name: "FastEthernet0/" access: vlan: "" with_subelements: - "" - ports - name: Configure trunk port ios_l2_interfaces: config: - name: FastEthernet0/24 trunk: allowed_vlans: "10,20,30" native_vlan: 1 🐍 Python 네트워크 자동화 NAPALM을 이용한 네트워크 관리 from napalm import get_network_driver import json # 디바이스 연결 설정 driver = get_network_driver('ios') device = driver('192.168.1.1', 'admin', 'password') try: # 디바이스 연결 device.open() # 인터페이스 정보 수집 interfaces = device.get_interfaces() print(json.dumps(interfaces, indent=2)) # 라우팅 테이블 확인 routes = device.get_route_to('8.8.8.8') print(json.dumps(routes, indent=2)) # 설정 변경 (ACL 추가) config = """ ip access-list extended BLOCK_SOCIAL deny tcp any host 23.35.67.140 eq 80 permit ip any any """ # 설정 로드 (아직 적용하지 않음) device.load_merge_candidate(config=config) # 설정 차이 확인 diff = device.compare_config() if diff: print("Configuration diff:") print(diff) # 사용자 확인 후 적용 confirm = input("Apply configuration? (y/n): ") if confirm.lower() == 'y': device.commit_config() print("Configuration applied successfully") else: device.discard_config() print("Configuration discarded") finally: device.close() Netmiko를 이용한 대량 설정 from netmiko import ConnectHandler from concurrent.futures import ThreadPoolExecutor import threading # 디바이스 리스트 devices = [ { 'device_type': 'cisco_ios', 'host': '192.168.1.1', 'username': 'admin', 'password': 'password', 'hostname': 'Router01' }, { 'device_type': 'cisco_ios', 'host': '192.168.1.2', 'username': 'admin', 'password': 'password', 'hostname': 'Router02' } ] def configure_device(device): """개별 디바이스 설정 함수""" try: # SSH 연결 connection = ConnectHandler(**device) # NTP 서버 설정 ntp_config = [ 'ntp server 192.168.1.100', 'ntp server 8.8.8.8', 'clock timezone KST 9 0' ] # 설정 적용 output = connection.send_config_set(ntp_config) # SNMP 설정 snmp_config = [ 'snmp-server community public ro', 'snmp-server host 192.168.1.200 version 2c public' ] output += connection.send_config_set(snmp_config) # 설정 저장 save_output = connection.save_config() connection.disconnect() print(f"✅ {device['hostname']}: Configuration completed") return True except Exception as e: print(f"❌ {device['hostname']}: Error - {str(e)}") return False # 병렬 실행 with ThreadPoolExecutor(max_workers=5) as executor: results = list(executor.map(configure_device, devices)) success_count = sum(results) print(f"\n완료: {success_count}/{len(devices)} 디바이스") 📊 네트워크 모니터링 자동화 Prometheus + Grafana 모니터링 # prometheus.yml global: scrape_interval: 15s scrape_configs: - job_name: 'snmp-devices' static_configs: - targets: - 192.168.1.1 # Router01 - 192.168.1.2 # Router02 - 192.168.1.10 # Switch01 metrics_path: /snmp params: module: [if_mib] relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.1.100:9116 # SNMP Exporter - job_name: 'snmp-exporter' static_configs: - targets: ['192.168.1.100:9116'] 네트워크 장애 알림 자동화 import requests import smtplib from email.mime.text import MIMEText import time class NetworkMonitor: def __init__(self): self.devices = [ {'name': 'Router01', 'ip': '192.168.1.1'}, {'name': 'Switch01', 'ip': '192.168.1.10'}, {'name': 'AP01', 'ip': '192.168.1.20'} ] self.previous_status = {} def check_device(self, device): """SNMP 또는 PING으로 디바이스 상태 확인""" import subprocess try: # PING 테스트 result = subprocess.run( ['ping', '-c', '3', '-W', '3', device['ip']], capture_output=True, text=True ) if result.returncode == 0: return 'UP' else: return 'DOWN' except Exception as e: print(f"Error checking {device['name']}: {e}") return 'ERROR' def send_alert(self, device, status): """Slack 또는 이메일로 알림 전송""" # Slack 알림 webhook_url = "https://hooks.slack.com/services/YOUR/WEBHOOK/URL" message = { "text": f"🚨 Network Alert: {device['name']} is {status}", "attachments": [ { "color": "danger" if status == 'DOWN' else "good", "fields": [ {"title": "Device", "value": device['name'], "short": True}, {"title": "IP", "value": device['ip'], "short": True}, {"title": "Status", "value": status, "short": True}, {"title": "Time", "value": time.strftime("%Y-%m-%d %H:%M:%S"), "short": True} ] } ] } try: response = requests.post(webhook_url, json=message) if response.status_code == 200: print(f"Alert sent for {device['name']}") except Exception as e: print(f"Failed to send alert: {e}") def monitor_loop(self): """메인 모니터링 루프""" while True: for device in self.devices: current_status = self.check_device(device) previous_status = self.previous_status.get(device['name'], 'UP') # 상태 변화 감지 if current_status != previous_status: print(f"{device['name']} status changed: {previous_status} -&gt; {current_status}") self.send_alert(device, current_status) self.previous_status[device['name']] = current_status time.sleep(60) # 1분마다 체크 if __name__ == "__main__": monitor = NetworkMonitor() monitor.monitor_loop() 다음 편 예고 다음 포스트에서는 네트워크 보안과 트러블슈팅의 고급 주제들을 다룰 예정입니다: 차세대 방화벽과 IDS/IPS 네트워크 포렌식과 위협 헌팅 제로 트러스트 네트워크 아키텍처 고급 네트워크 문제 해결 기법 무선 네트워킹과 최신 기술들을 마스터하셨나요? 🌐✨]]></summary></entry><entry><title type="html">리눅스 보안 완전 가이드 2편 - SSH 고급 보안과 방화벽 | Linux Security Guide Part 2 - Advanced SSH Security &amp;amp; Firewall</title><link href="https://leeyonghe.github.io/infra-blog/blog/2024/12/08/linux-security-guide-part2.html" rel="alternate" type="text/html" title="리눅스 보안 완전 가이드 2편 - SSH 고급 보안과 방화벽 | Linux Security Guide Part 2 - Advanced SSH Security &amp;amp; Firewall" /><published>2024-12-08T00:00:00+00:00</published><updated>2024-12-08T00:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2024/12/08/linux-security-guide-part2</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2024/12/08/linux-security-guide-part2.html"><![CDATA[<p>SSH 보안을 한 단계 높이고 강력한 방화벽 정책을 구축하는 방법을 완벽하게 마스터해보겠습니다. SSH 키 관리부터 고급 방화벽 설정까지 실무에서 바로 활용할 수 있는 내용으로 구성했습니다.</p>

<h2 id="ssh-고급-보안-설정--advanced-ssh-security">SSH 고급 보안 설정 | Advanced SSH Security</h2>

<h3 id="-ssh-키-기반-인증-완벽-구축">🔑 SSH 키 기반 인증 완벽 구축</h3>

<h4 id="강화된-ssh-키-생성-및-관리">강화된 SSH 키 생성 및 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 최신 암호화 알고리즘을 사용한 키 생성</span>
<span class="c"># ED25519 (권장 - 빠르고 안전)</span>
ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"admin@company.com-</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span> <span class="nt">-f</span> ~/.ssh/id_ed25519_admin

<span class="c"># RSA 키 (호환성이 필요한 경우)</span>
ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"admin@company.com-</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span> <span class="nt">-f</span> ~/.ssh/id_rsa_admin

<span class="c"># ECDSA 키 (대안)</span>
ssh-keygen <span class="nt">-t</span> ecdsa <span class="nt">-b</span> 521 <span class="nt">-C</span> <span class="s2">"admin@company.com-</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span> <span class="nt">-f</span> ~/.ssh/id_ecdsa_admin

<span class="c"># 키 생성 시 보안 옵션</span>
ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-b</span> 4096 <span class="se">\</span>
    <span class="nt">-C</span> <span class="s2">"admin@company.com-</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">-f</span> ~/.ssh/id_ed25519_admin <span class="se">\</span>
    <span class="nt">-N</span> <span class="s2">"</span><span class="si">$(</span>openssl rand <span class="nt">-base64</span> 32<span class="si">)</span><span class="s2">"</span> <span class="se">\ </span> <span class="c"># 강력한 패스프레이즈 자동 생성</span>
    <span class="nt">-o</span> <span class="se">\ </span>                              <span class="c"># OpenSSH 형식 사용</span>
    <span class="nt">-a</span> 100                            <span class="c"># KDF 라운드 수 증가</span>

<span class="c"># 키 권한 설정 (중요!)</span>
<span class="nb">chmod </span>700 ~/.ssh
<span class="nb">chmod </span>600 ~/.ssh/id_<span class="k">*</span>
<span class="nb">chmod </span>644 ~/.ssh/id_<span class="k">*</span>.pub
<span class="nb">chmod </span>600 ~/.ssh/authorized_keys
<span class="nb">chmod </span>600 ~/.ssh/config

<span class="c"># 키 핑거프린트 확인</span>
ssh-keygen <span class="nt">-lf</span> ~/.ssh/id_ed25519_admin.pub
ssh-keygen <span class="nt">-E</span> sha256 <span class="nt">-lf</span> ~/.ssh/id_ed25519_admin.pub  <span class="c"># SHA256 해시</span>

<span class="c"># 키 만료일 설정 (OpenSSH 8.2+)</span>
ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-V</span> +365d <span class="nt">-C</span> <span class="s2">"expires-</span><span class="si">$(</span><span class="nb">date</span> <span class="nt">-d</span> <span class="s1">'+1 year'</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h4 id="ssh-클라이언트-설정-최적화">SSH 클라이언트 설정 최적화</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ~/.ssh/config - 클라이언트 설정</span>
<span class="c"># 기본 설정</span>
Host <span class="k">*</span>
    <span class="c"># 보안 설정</span>
    Protocol 2
    HashKnownHosts <span class="nb">yes
    </span>VisualHostKey <span class="nb">yes
    </span>StrictHostKeyChecking ask
    UserKnownHostsFile ~/.ssh/known_hosts
    
    <span class="c"># 연결 설정</span>
    ServerAliveInterval 60
    ServerAliveCountMax 3
    ConnectTimeout 10
    TCPKeepAlive no
    
    <span class="c"># 암호화 설정</span>
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512
    MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com
    HostKeyAlgorithms ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
    
    <span class="c"># 인증 설정</span>
    PreferredAuthentications publickey,keyboard-interactive,password
    PubkeyAuthentication <span class="nb">yes
    </span>PasswordAuthentication no
    GSSAPIAuthentication no
    
    <span class="c"># 포워딩 설정 (기본적으로 비활성화)</span>
    ForwardAgent no
    ForwardX11 no
    ForwardX11Trusted no

<span class="c"># 서버별 개별 설정</span>
Host production-server
    HostName 192.168.1.100
    Port 2222
    User admin
    IdentityFile ~/.ssh/id_ed25519_admin
    IdentitiesOnly <span class="nb">yes
    </span>RequestTTY <span class="nb">yes
    </span>RemoteForward 9000 localhost:9000
    
Host development-<span class="k">*</span>
    Port 22
    User developer
    IdentityFile ~/.ssh/id_ed25519_dev
    StrictHostKeyChecking no        <span class="c"># 개발 서버용</span>
    UserKnownHostsFile /dev/null
    LogLevel QUIET

Host bastion
    HostName bastion.company.com
    Port 2222
    User jumpuser
    IdentityFile ~/.ssh/id_ed25519_jump
    ControlMaster auto
    ControlPath ~/.ssh/control-%h-%p-%r
    ControlPersist 600

<span class="c"># 베스천 호스트를 통한 접근</span>
Host internal-<span class="k">*</span>
    ProxyJump bastion
    User admin
    IdentityFile ~/.ssh/id_ed25519_admin

<span class="c"># 키 에이전트 설정</span>
<span class="c"># ~/.bashrc에 추가</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$SSH_AUTH_SOCK</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">eval</span> <span class="si">$(</span>ssh-agent <span class="nt">-s</span><span class="si">)</span>
    ssh-add ~/.ssh/id_ed25519_admin
    ssh-add ~/.ssh/id_ed25519_dev
<span class="k">fi</span>

<span class="c"># 키 만료 확인 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/check-ssh-keys.sh</span>
<span class="k">for </span>keyfile <span class="k">in</span> ~/.ssh/id_<span class="k">*</span><span class="p">;</span> <span class="k">do
    if</span> <span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$keyfile</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="s2">"</span><span class="nv">$keyfile</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.pub <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Checking </span><span class="nv">$keyfile</span><span class="s2">..."</span>
        ssh-keygen <span class="nt">-l</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$keyfile</span><span class="s2">"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"  Invalid or encrypted key"</span>
    <span class="k">fi
done</span>
</code></pre></div></div>

<h4 id="ssh-certificate-authority-ca-구축">SSH Certificate Authority (CA) 구축</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. CA 키 생성 (보안이 중요한 별도 시스템에서)</span>
ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-f</span> /etc/ssh/ca_key <span class="nt">-C</span> <span class="s2">"SSH-CA-</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span>
<span class="nb">chmod </span>600 /etc/ssh/ca_key
<span class="nb">chmod </span>644 /etc/ssh/ca_key.pub

<span class="c"># 2. 사용자 인증서 발급</span>
<span class="c"># 단기간 유효한 사용자 인증서 (1주일)</span>
ssh-keygen <span class="nt">-s</span> /etc/ssh/ca_key <span class="se">\</span>
    <span class="nt">-I</span> <span class="s2">"john-doe-</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">-n</span> john,admin <span class="se">\</span>
    <span class="nt">-V</span> +7d <span class="se">\</span>
    <span class="nt">-z</span> 1001 <span class="se">\</span>
    ~/.ssh/id_ed25519.pub

<span class="c"># 호스트별 제한된 인증서</span>
ssh-keygen <span class="nt">-s</span> /etc/ssh/ca_key <span class="se">\</span>
    <span class="nt">-I</span> <span class="s2">"backup-service"</span> <span class="se">\</span>
    <span class="nt">-n</span> backup <span class="se">\</span>
    <span class="nt">-V</span> +1d <span class="se">\</span>
    <span class="nt">-O</span> clear <span class="se">\</span>
    <span class="nt">-O</span> source-address<span class="o">=</span><span class="s2">"192.168.1.100/32"</span> <span class="se">\</span>
    <span class="nt">-O</span> force-command<span class="o">=</span><span class="s2">"/usr/local/bin/backup-script"</span> <span class="se">\</span>
    ~/.ssh/id_ed25519_backup.pub

<span class="c"># 권한 제한 인증서</span>
ssh-keygen <span class="nt">-s</span> /etc/ssh/ca_key <span class="se">\</span>
    <span class="nt">-I</span> <span class="s2">"readonly-access"</span> <span class="se">\</span>
    <span class="nt">-n</span> <span class="nb">readonly</span> <span class="se">\</span>
    <span class="nt">-V</span> +1h <span class="se">\</span>
    <span class="nt">-O</span> clear <span class="se">\</span>
    <span class="nt">-O</span> no-agent-forwarding <span class="se">\</span>
    <span class="nt">-O</span> no-port-forwarding <span class="se">\</span>
    <span class="nt">-O</span> no-pty <span class="se">\</span>
    <span class="nt">-O</span> no-user-rc <span class="se">\</span>
    ~/.ssh/id_ed25519_readonly.pub

<span class="c"># 3. 서버 설정에서 CA 신뢰</span>
<span class="c"># /etc/ssh/sshd_config</span>
TrustedUserCAKeys /etc/ssh/ca_key.pub
AuthorizedPrincipalsFile /etc/ssh/auth_principals/%u
PubkeyAuthentication <span class="nb">yes
</span>CertificateAuthentication <span class="nb">yes</span>

<span class="c"># 4. 사용자별 주체(principal) 설정</span>
<span class="c"># /etc/ssh/auth_principals/john</span>
john
admin
developer

<span class="c"># /etc/ssh/auth_principals/backup</span>
backup

<span class="c"># 5. 호스트 인증서도 구축</span>
<span class="c"># 호스트 키에 대한 인증서 발급</span>
ssh-keygen <span class="nt">-s</span> /etc/ssh/ca_key <span class="se">\</span>
    <span class="nt">-I</span> <span class="s2">"server1.company.com"</span> <span class="se">\</span>
    <span class="nt">-h</span> <span class="se">\</span>
    <span class="nt">-n</span> server1.company.com,server1,192.168.1.100 <span class="se">\</span>
    <span class="nt">-V</span> +365d <span class="se">\</span>
    /etc/ssh/ssh_host_ed25519_key.pub

<span class="c"># 클라이언트에서 호스트 CA 신뢰</span>
<span class="c"># ~/.ssh/known_hosts에 추가</span>
@cert-authority <span class="k">*</span>.company.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICAKeyFromCA...

<span class="c"># 6. 인증서 관리 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/ssh-cert-manager.sh</span>

<span class="nv">ACTION</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">USER</span><span class="o">=</span><span class="nv">$2</span>
<span class="nv">DAYS</span><span class="o">=</span><span class="k">${</span><span class="nv">3</span><span class="k">:-</span><span class="nv">7</span><span class="k">}</span>

<span class="k">case</span> <span class="nv">$ACTION</span> <span class="k">in</span>
    <span class="s2">"issue"</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$USER</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> issue &lt;username&gt; [days]"</span>
            <span class="nb">exit </span>1
        <span class="k">fi
        
        </span><span class="nv">USER_KEY</span><span class="o">=</span><span class="s2">"/home/</span><span class="nv">$USER</span><span class="s2">/.ssh/id_ed25519.pub"</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$USER_KEY</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"User key not found: </span><span class="nv">$USER_KEY</span><span class="s2">"</span>
            <span class="nb">exit </span>1
        <span class="k">fi
        
        </span>ssh-keygen <span class="nt">-s</span> /etc/ssh/ca_key <span class="se">\</span>
            <span class="nt">-I</span> <span class="s2">"</span><span class="nv">$USER</span><span class="s2">-</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span><span class="s2">"</span> <span class="se">\</span>
            <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$USER</span><span class="s2">"</span> <span class="se">\</span>
            <span class="nt">-V</span> <span class="s2">"+</span><span class="k">${</span><span class="nv">DAYS</span><span class="k">}</span><span class="s2">d"</span> <span class="se">\</span>
            <span class="s2">"</span><span class="nv">$USER_KEY</span><span class="s2">"</span>
        
        <span class="nb">echo</span> <span class="s2">"Certificate issued for </span><span class="nv">$USER</span><span class="s2">, valid for </span><span class="nv">$DAYS</span><span class="s2"> days"</span>
        <span class="p">;;</span>
        
    <span class="s2">"revoke"</span><span class="p">)</span>
        <span class="c"># 인증서 폐기 목록 관리</span>
        <span class="nv">CERT_SERIAL</span><span class="o">=</span><span class="si">$(</span>ssh-keygen <span class="nt">-L</span> <span class="nt">-f</span> <span class="s2">"/home/</span><span class="nv">$USER</span><span class="s2">/.ssh/id_ed25519-cert.pub"</span> | <span class="nb">grep </span>Serial | <span class="nb">awk</span> <span class="s1">'{print $2}'</span><span class="si">)</span>
        <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$CERT_SERIAL</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /etc/ssh/revoked_keys
        <span class="nb">echo</span> <span class="s2">"Certificate revoked for </span><span class="nv">$USER</span><span class="s2">"</span>
        <span class="p">;;</span>
        
    <span class="s2">"list"</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Active certificates:"</span>
        <span class="k">for </span>cert <span class="k">in</span> /home/<span class="k">*</span>/.ssh/<span class="k">*</span><span class="nt">-cert</span>.pub<span class="p">;</span> <span class="k">do
            if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$cert</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
                </span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="si">$(</span><span class="nb">dirname</span> <span class="nv">$cert</span><span class="si">))</span><span class="s2">: </span><span class="si">$(</span>ssh-keygen <span class="nt">-L</span> <span class="nt">-f</span> <span class="nv">$cert</span> | <span class="nb">grep </span>Valid<span class="si">)</span><span class="s2">"</span>
            <span class="k">fi
        done</span>
        <span class="p">;;</span>
        
    <span class="k">*</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> {issue|revoke|list} &lt;username&gt; [days]"</span>
        <span class="nb">exit </span>1
        <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<h3 id="️-ssh-서버-고급-보안-설정">🛡️ SSH 서버 고급 보안 설정</h3>

<h4 id="강화된-sshd_config-설정">강화된 sshd_config 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/ssh/sshd_config - 최고 보안 수준 설정</span>
<span class="c"># 기본 설정</span>
Protocol 2
Port 2222                           <span class="c"># 기본 포트 변경</span>
AddressFamily inet                  <span class="c"># IPv4만 사용 (필요시)</span>
ListenAddress 192.168.1.100        <span class="c"># 특정 IP만 바인딩</span>

<span class="c"># 암호화 및 키 교환</span>
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group16-sha512

<span class="c"># 호스트 키 설정 (약한 키 제거)</span>
HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_ecdsa_key
<span class="c"># RSA 키는 4096비트 이상만 사용</span>
HostKey /etc/ssh/ssh_host_rsa_key

<span class="c"># 인증 설정</span>
PubkeyAuthentication <span class="nb">yes
</span>AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
GSSAPIAuthentication no
HostbasedAuthentication no
IgnoreUserKnownHosts <span class="nb">yes
</span>PermitRootLogin no

<span class="c"># 로그인 제한</span>
LoginGraceTime 30
MaxAuthTries 3
MaxSessions 3
MaxStartups 3:30:10
ClientAliveInterval 300
ClientAliveCountMax 2

<span class="c"># 사용자/그룹 제한</span>
AllowUsers admin developer
AllowGroups sshusers
DenyUsers guest anonymous backup
DenyGroups wheel nogroup

<span class="c"># 기능 제한</span>
X11Forwarding no
AllowTcpForwarding no
GatewayPorts no
PermitTunnel no
PermitUserEnvironment no
PermitUserRC no
PrintMotd <span class="nb">yes
</span>PrintLastLog <span class="nb">yes
</span>TCPKeepAlive no
Compression no                      <span class="c"># 압축 비활성화 (보안)</span>

<span class="c"># 로깅</span>
SyslogFacility AUTH
LogLevel VERBOSE                    <span class="c"># 상세 로깅</span>

<span class="c"># Chroot 설정 (SFTP 전용 사용자)</span>
Subsystem sftp /usr/lib/openssh/sftp-server

<span class="c"># 조건부 설정</span>
Match User sftpuser
    ChrootDirectory /var/sftp/%u
    ForceCommand internal-sftp
    AllowTcpForwarding no
    X11Forwarding no
    PermitTunnel no

Match Address 192.168.1.0/24
    PasswordAuthentication <span class="nb">yes
    </span>MaxAuthTries 5

Match Address 10.0.0.0/8
    AllowTcpForwarding <span class="nb">local
    </span>GatewayPorts no

Match Group developers
    AllowTcpForwarding <span class="nb">yes
    </span>PermitOpen localhost:3000 localhost:8080

<span class="c"># 설정 검증</span>
sshd <span class="nt">-t</span>
sshd <span class="nt">-T</span> | <span class="nb">grep</span> <span class="nt">-i</span> cipher          <span class="c"># 암호화 설정 확인</span>
sshd <span class="nt">-T</span> | <span class="nb">grep</span> <span class="nt">-i</span> mac             <span class="c"># MAC 설정 확인</span>
</code></pre></div></div>

<h4 id="ssh-접근-제어-및-모니터링">SSH 접근 제어 및 모니터링</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. TCP Wrapper 설정</span>
<span class="c"># /etc/hosts.allow</span>
sshd: 192.168.1.0/24 : ALLOW
sshd: 10.0.0.0/8 : ALLOW
sshd: ALL : spawn <span class="o">(</span>/usr/local/bin/log-ssh-attempt %a %d<span class="o">)</span> : DENY

<span class="c"># /etc/hosts.deny</span>
sshd: ALL

<span class="c"># 2. SSH 접근 로깅 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/log-ssh-attempt</span>
<span class="nv">CLIENT_IP</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">DAEMON</span><span class="o">=</span><span class="nv">$2</span>
<span class="nv">TIMESTAMP</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"</span><span class="nv">$TIMESTAMP</span><span class="s2">: Blocked SSH attempt from </span><span class="nv">$CLIENT_IP</span><span class="s2"> to </span><span class="nv">$DAEMON</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /var/log/ssh-blocked.log

<span class="c"># 지리적 위치 확인 (선택사항)</span>
<span class="c"># LOCATION=$(geoiplookup $CLIENT_IP 2&gt;/dev/null | cut -d: -f2)</span>
<span class="c"># echo "$TIMESTAMP: $CLIENT_IP ($LOCATION) blocked" &gt;&gt; /var/log/ssh-geo.log</span>

<span class="c"># 3. SSH 세션 모니터링</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/ssh-monitor.sh</span>

<span class="c"># 활성 SSH 세션 모니터링</span>
<span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">ACTIVE_SESSIONS</span><span class="o">=</span><span class="si">$(</span><span class="nb">who</span> | <span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"pts/"</span><span class="si">)</span>
    <span class="nv">SSH_PROCESSES</span><span class="o">=</span><span class="si">$(</span>pgrep <span class="nt">-c</span> sshd<span class="si">)</span>
    
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$ACTIVE_SESSIONS</span> <span class="nt">-gt</span> 10 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">: High SSH session count: </span><span class="nv">$ACTIVE_SESSIONS</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /var/log/ssh-monitor.log
        <span class="c"># 알림 발송</span>
        <span class="nb">echo</span> <span class="s2">"High SSH session count detected: </span><span class="nv">$ACTIVE_SESSIONS</span><span class="s2"> active sessions"</span> | <span class="se">\</span>
        mail <span class="nt">-s</span> <span class="s2">"SSH Monitor Alert"</span> admin@company.com
    <span class="k">fi</span>
    
    <span class="c"># 장시간 유지되는 세션 확인</span>
    <span class="nb">who</span> | <span class="k">while </span><span class="nb">read </span>user <span class="nb">tty time </span>rest<span class="p">;</span> <span class="k">do</span>
        <span class="c"># 12시간 이상 유지된 세션 확인</span>
        <span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$time</span><span class="s2">"</span> &lt; <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="nt">-d</span> <span class="s1">'12 hours ago'</span> <span class="s1">'+%H:%M'</span><span class="si">)</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">: Long running session: </span><span class="nv">$user</span><span class="s2"> on </span><span class="nv">$tty</span><span class="s2"> since </span><span class="nv">$time</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /var/log/ssh-monitor.log
        <span class="k">fi
    done
    
    </span><span class="nb">sleep </span>60
<span class="k">done</span>

<span class="c"># 4. SSH 키 로테이션 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/ssh-key-rotation.sh</span>

<span class="c"># 90일마다 호스트 키 로테이션</span>
<span class="nv">HOSTKEY_AGE</span><span class="o">=</span><span class="si">$(</span>find /etc/ssh/ssh_host_<span class="k">*</span>_key <span class="nt">-mtime</span> +90 2&gt;/dev/null | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>

<span class="k">if</span> <span class="o">[</span> <span class="nv">$HOSTKEY_AGE</span> <span class="nt">-gt</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">: Host keys are older than 90 days. Rotation recommended."</span> <span class="o">&gt;&gt;</span> /var/log/ssh-key-rotation.log
    
    <span class="c"># 백업</span>
    <span class="nb">cp</span> <span class="nt">-r</span> /etc/ssh /etc/ssh.backup.<span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span>
    
    <span class="c"># 새 키 생성</span>
    ssh-keygen <span class="nt">-A</span>
    
    <span class="c"># 서비스 재시작</span>
    systemctl restart sshd
    
    <span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">: Host keys rotated successfully"</span> <span class="o">&gt;&gt;</span> /var/log/ssh-key-rotation.log
<span class="k">fi</span>

<span class="c"># 사용자 키 만료 확인</span>
<span class="k">for </span>user_home <span class="k">in</span> /home/<span class="k">*</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">username</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="nv">$user_home</span><span class="si">)</span>
    <span class="nv">auth_keys</span><span class="o">=</span><span class="s2">"</span><span class="nv">$user_home</span><span class="s2">/.ssh/authorized_keys"</span>
    
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$auth_keys</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        while </span><span class="nb">read</span> <span class="nt">-r</span> key<span class="p">;</span> <span class="k">do
            if</span> <span class="o">[[</span> <span class="nv">$key</span> <span class="o">=</span>~ ^ssh- <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
                <span class="c"># 키 생성일 확인 (코멘트에서 날짜 추출)</span>
                <span class="nv">key_date</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$key</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s1">'[0-9]\{8\}'</span> | <span class="nb">head</span> <span class="nt">-1</span><span class="si">)</span>
                <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$key_date</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
                    </span><span class="nv">key_age</span><span class="o">=</span><span class="k">$((</span> <span class="o">(</span><span class="si">$(</span><span class="nb">date</span> +%s<span class="si">)</span> <span class="o">-</span> <span class="si">$(</span><span class="nb">date</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$key_date</span><span class="s2">"</span> +%s<span class="si">)</span><span class="o">)</span> <span class="o">/</span> <span class="m">86400</span> <span class="k">))</span>
                    <span class="k">if</span> <span class="o">[</span> <span class="nv">$key_age</span> <span class="nt">-gt</span> 365 <span class="o">]</span><span class="p">;</span> <span class="k">then
                        </span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">: User </span><span class="nv">$username</span><span class="s2"> has key older than 1 year (</span><span class="nv">$key_age</span><span class="s2"> days)"</span> <span class="o">&gt;&gt;</span> /var/log/ssh-key-rotation.log
                    <span class="k">fi
                fi
            fi
        done</span> &lt; <span class="s2">"</span><span class="nv">$auth_keys</span><span class="s2">"</span>
    <span class="k">fi
done</span>
</code></pre></div></div>

<h3 id="-방화벽-보안-설정">🔥 방화벽 보안 설정</h3>

<h4 id="iptables-고급-보안-규칙">iptables 고급 보안 규칙</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/setup-iptables-advanced.sh</span>
<span class="c"># 고급 iptables 보안 설정 스크립트</span>

<span class="c"># 기존 규칙 초기화</span>
iptables <span class="nt">-F</span>
iptables <span class="nt">-X</span>
iptables <span class="nt">-t</span> nat <span class="nt">-F</span>
iptables <span class="nt">-t</span> nat <span class="nt">-X</span>
iptables <span class="nt">-t</span> mangle <span class="nt">-F</span>
iptables <span class="nt">-t</span> mangle <span class="nt">-X</span>
iptables <span class="nt">-t</span> raw <span class="nt">-F</span>
iptables <span class="nt">-t</span> raw <span class="nt">-X</span>

<span class="c"># 기본 정책 설정 (모든 트래픽 차단)</span>
iptables <span class="nt">-P</span> INPUT DROP
iptables <span class="nt">-P</span> FORWARD DROP
iptables <span class="nt">-P</span> OUTPUT DROP

<span class="c"># 1. 기본 허용 규칙</span>
<span class="c"># Loopback 인터페이스 허용</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-i</span> lo <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-o</span> lo <span class="nt">-j</span> ACCEPT

<span class="c"># 기존 연결 유지</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> ESTABLISHED,RELATED <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> ESTABLISHED <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> FORWARD <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> ESTABLISHED,RELATED <span class="nt">-j</span> ACCEPT

<span class="c"># 2. SSH 보안 규칙 (고급)</span>
<span class="c"># SSH 브루트포스 방지 (복합적 접근)</span>
iptables <span class="nt">-N</span> SSH_BRUTEFORCE
iptables <span class="nt">-A</span> SSH_BRUTEFORCE <span class="nt">-m</span> recent <span class="nt">--set</span> <span class="nt">--name</span> SSH_ATTACK
iptables <span class="nt">-A</span> SSH_BRUTEFORCE <span class="nt">-m</span> recent <span class="nt">--update</span> <span class="nt">--seconds</span> 3600 <span class="nt">--hitcount</span> 3 <span class="nt">--name</span> SSH_ATTACK <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"SSH Bruteforce: "</span>
iptables <span class="nt">-A</span> SSH_BRUTEFORCE <span class="nt">-m</span> recent <span class="nt">--update</span> <span class="nt">--seconds</span> 3600 <span class="nt">--hitcount</span> 3 <span class="nt">--name</span> SSH_ATTACK <span class="nt">-j</span> DROP
iptables <span class="nt">-A</span> SSH_BRUTEFORCE <span class="nt">-j</span> ACCEPT

<span class="c"># SSH 접근 제한</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2222 <span class="nt">-s</span> 192.168.1.0/24 <span class="nt">-j</span> SSH_BRUTEFORCE
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2222 <span class="nt">-s</span> 10.0.0.0/8 <span class="nt">-j</span> SSH_BRUTEFORCE
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2222 <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"SSH Unauthorized: "</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2222 <span class="nt">-j</span> DROP

<span class="c"># 3. 웹 서버 보안 (있는 경우)</span>
<span class="c"># HTTP/HTTPS with rate limiting</span>
iptables <span class="nt">-N</span> WEB_RATE_LIMIT
iptables <span class="nt">-A</span> WEB_RATE_LIMIT <span class="nt">-m</span> limit <span class="nt">--limit</span> 25/minute <span class="nt">--limit-burst</span> 100 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> WEB_RATE_LIMIT <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"HTTP Rate Limit: "</span>
iptables <span class="nt">-A</span> WEB_RATE_LIMIT <span class="nt">-j</span> DROP

iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 80 <span class="nt">-j</span> WEB_RATE_LIMIT
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 443 <span class="nt">-j</span> WEB_RATE_LIMIT

<span class="c"># 4. DDoS 방지 규칙</span>
<span class="c"># SYN Flood 방지</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--syn</span> <span class="nt">-m</span> limit <span class="nt">--limit</span> 1/second <span class="nt">--limit-burst</span> 3 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--syn</span> <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"SYN Flood: "</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--syn</span> <span class="nt">-j</span> DROP

<span class="c"># Ping Flood 방지</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> icmp <span class="nt">--icmp-type</span> echo-request <span class="nt">-m</span> limit <span class="nt">--limit</span> 1/second <span class="nt">--limit-burst</span> 2 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> icmp <span class="nt">--icmp-type</span> echo-request <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"Ping Flood: "</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> icmp <span class="nt">--icmp-type</span> echo-request <span class="nt">-j</span> DROP

<span class="c"># Port Scan 방지</span>
iptables <span class="nt">-N</span> PORT_SCAN
iptables <span class="nt">-A</span> PORT_SCAN <span class="nt">-p</span> tcp <span class="nt">--tcp-flags</span> SYN,ACK,FIN,RST RST <span class="nt">-m</span> limit <span class="nt">--limit</span> 1/s <span class="nt">--limit-burst</span> 2 <span class="nt">-j</span> RETURN
iptables <span class="nt">-A</span> PORT_SCAN <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"Port Scan: "</span>
iptables <span class="nt">-A</span> PORT_SCAN <span class="nt">-j</span> DROP
iptables <span class="nt">-A</span> INPUT <span class="nt">-j</span> PORT_SCAN

<span class="c"># 5. 아웃바운드 트래픽 제어</span>
<span class="c"># DNS 허용 (필수)</span>
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> udp <span class="nt">--dport</span> 53 <span class="nt">-d</span> 8.8.8.8 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> udp <span class="nt">--dport</span> 53 <span class="nt">-d</span> 1.1.1.1 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 53 <span class="nt">-j</span> ACCEPT

<span class="c"># NTP 허용</span>
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> udp <span class="nt">--dport</span> 123 <span class="nt">-j</span> ACCEPT

<span class="c"># HTTP/HTTPS 아웃바운드 (업데이트용)</span>
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 80 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 443 <span class="nt">-j</span> ACCEPT

<span class="c"># SMTP 아웃바운드 (이메일)</span>
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 587 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 25 <span class="nt">-j</span> ACCEPT

<span class="c"># SSH 아웃바운드 (관리용)</span>
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 22 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2222 <span class="nt">-j</span> ACCEPT

<span class="c"># 6. 지리적 IP 차단 (GeoIP 사용)</span>
<span class="c"># 특정 국가 IP 차단 (예: 러시아, 중국, 북한)</span>
<span class="c"># iptables -A INPUT -m geoip --src-cc RU,CN,KP -j LOG --log-prefix "GeoIP Block: "</span>
<span class="c"># iptables -A INPUT -m geoip --src-cc RU,CN,KP -j DROP</span>

<span class="c"># 7. 애플리케이션별 보안 규칙</span>
<span class="c"># 데이터베이스 접근 제한 (내부 네트워크만)</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 3306 <span class="nt">-s</span> 192.168.1.0/24 <span class="nt">-j</span> ACCEPT  <span class="c"># MySQL</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 5432 <span class="nt">-s</span> 192.168.1.0/24 <span class="nt">-j</span> ACCEPT  <span class="c"># PostgreSQL</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 3306 <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"MySQL Unauthorized: "</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 3306 <span class="nt">-j</span> DROP
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 5432 <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"PostgreSQL Unauthorized: "</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 5432 <span class="nt">-j</span> DROP

<span class="c"># 8. 악성 트래픽 차단</span>
<span class="c"># Invalid 패킷 차단</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> INVALID <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"Invalid Packet: "</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> INVALID <span class="nt">-j</span> DROP

<span class="c"># NULL 스캔 차단</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--tcp-flags</span> ALL NONE <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"NULL Scan: "</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--tcp-flags</span> ALL NONE <span class="nt">-j</span> DROP

<span class="c"># XMAS 스캔 차단</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--tcp-flags</span> ALL ALL <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"XMAS Scan: "</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--tcp-flags</span> ALL ALL <span class="nt">-j</span> DROP

<span class="c"># 9. 로깅 설정 (최종 단계)</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-m</span> limit <span class="nt">--limit</span> 5/min <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"INPUT DROP: "</span> <span class="nt">--log-level</span> 7
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-m</span> limit <span class="nt">--limit</span> 5/min <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"OUTPUT DROP: "</span> <span class="nt">--log-level</span> 7

<span class="c"># 10. 설정 저장</span>
iptables-save <span class="o">&gt;</span> /etc/iptables/rules.v4

<span class="c"># 11. 부팅 시 자동 로드 설정</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/systemd/system/iptables-restore.service <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
[Unit]
Description=Restore iptables rules
After=network.target

[Service]
Type=oneshot
ExecStart=/sbin/iptables-restore /etc/iptables/rules.v4
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
</span><span class="no">EOF

</span>systemctl <span class="nb">enable </span>iptables-restore.service

<span class="nb">echo</span> <span class="s2">"Advanced iptables configuration completed!"</span>
<span class="nb">echo</span> <span class="s2">"Rules saved to /etc/iptables/rules.v4"</span>
<span class="nb">echo</span> <span class="s2">"Service enabled for boot: iptables-restore.service"</span>

<span class="c"># 규칙 확인</span>
iptables <span class="nt">-L</span> <span class="nt">-n</span> <span class="nt">-v</span> <span class="nt">--line-numbers</span>
</code></pre></div></div>

<h4 id="ufw-고급-설정-및-자동화">UFW 고급 설정 및 자동화</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/setup-ufw-advanced.sh</span>
<span class="c"># UFW 고급 보안 설정</span>

<span class="c"># UFW 초기화 및 기본 설정</span>
ufw <span class="nt">--force</span> reset
ufw default deny incoming
ufw default deny outgoing
ufw default deny forward

<span class="c"># 기본 서비스 허용</span>
<span class="nb">echo</span> <span class="s2">"Setting up basic services..."</span>

<span class="c"># SSH (보안 포트)</span>
ufw allow from 192.168.1.0/24 to any port 2222 comment <span class="s1">'SSH from LAN'</span>
ufw allow from 10.0.0.0/8 to any port 2222 comment <span class="s1">'SSH from VPN'</span>

<span class="c"># 아웃바운드 필수 서비스</span>
ufw allow out 53 comment <span class="s1">'DNS'</span>
ufw allow out 123 comment <span class="s1">'NTP'</span>
ufw allow out 80 comment <span class="s1">'HTTP'</span>
ufw allow out 443 comment <span class="s1">'HTTPS'</span>

<span class="c"># 메일 발송</span>
ufw allow out 587 comment <span class="s1">'SMTP-TLS'</span>
ufw allow out 25 comment <span class="s1">'SMTP'</span>

<span class="c"># 웹 서버 (있는 경우)</span>
<span class="c"># ufw allow 80 comment 'HTTP Server'</span>
<span class="c"># ufw allow 443 comment 'HTTPS Server'</span>

<span class="c"># 고급 규칙 설정</span>
<span class="nb">echo</span> <span class="s2">"Setting up advanced rules..."</span>

<span class="c"># 1. 애플리케이션 프로파일 생성</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/ufw/applications.d/custom-apps <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
[SSH-Custom]
title=SSH Custom Port
description=SSH on custom port 2222
ports=2222/tcp

[Database-Internal]
title=Database Internal Access
description=MySQL/PostgreSQL for internal network
ports=3306,5432/tcp

[Monitoring]
title=Monitoring Services
description=Prometheus, Grafana, etc.
ports=9090,3000,9100/tcp
</span><span class="no">EOF

</span>ufw app update SSH-Custom
ufw allow SSH-Custom

<span class="c"># 2. Rate limiting 설정</span>
ufw limit ssh comment <span class="s1">'Rate limit SSH'</span>
ufw limit 80/tcp comment <span class="s1">'Rate limit HTTP'</span>
ufw limit 443/tcp comment <span class="s1">'Rate limit HTTPS'</span>

<span class="c"># 3. 특정 IP 차단 (예시)</span>
<span class="c"># 알려진 악성 IP 차단</span>
<span class="nv">MALICIOUS_IPS</span><span class="o">=(</span>
    <span class="s2">"192.0.2.100"</span>
    <span class="s2">"203.0.113.50"</span>
<span class="o">)</span>

<span class="k">for </span>ip <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">MALICIOUS_IPS</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    </span>ufw deny from <span class="s2">"</span><span class="nv">$ip</span><span class="s2">"</span> comment <span class="s2">"Known malicious IP"</span>
<span class="k">done</span>

<span class="c"># 4. 지역별 접근 제한 (예시)</span>
<span class="c"># 관리 서비스는 국내 IP만 허용</span>
ufw allow from 220.0.0.0/8 to any port 22 comment <span class="s1">'Korea Telecom range'</span>
ufw allow from 121.0.0.0/8 to any port 22 comment <span class="s1">'SK Broadband range'</span>

<span class="c"># 5. 로깅 설정</span>
ufw logging on

<span class="c"># 6. UFW 활성화</span>
ufw <span class="nt">--force</span> <span class="nb">enable</span>

<span class="c"># 7. 상태 출력</span>
ufw status verbose

<span class="c"># 8. UFW 로그 모니터링 스크립트 생성</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /usr/local/bin/ufw-log-monitor.sh <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/bash
# UFW 로그 모니터링 및 분석

UFW_LOG="/var/log/ufw.log"
ALERT_EMAIL="admin@company.com"

# 로그 패턴 분석
analyze_ufw_logs() {
    echo "=== UFW Log Analysis Report </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="sh"> ==="
    
    # 최근 1시간 동안의 차단된 연결
    echo "Top blocked IPs (last hour):"
    grep "</span><span class="si">$(</span><span class="nb">date</span> <span class="nt">-d</span> <span class="s1">'1 hour ago'</span> <span class="s1">'+%b %d %H'</span><span class="si">)</span><span class="sh">" "</span><span class="nv">$UFW_LOG</span><span class="sh">" 2&gt;/dev/null | </span><span class="se">\</span><span class="sh">
    grep "BLOCK" | awk '{print </span><span class="si">$(</span>NF-1<span class="si">)</span><span class="sh">}' | cut -d= -f2 | </span><span class="se">\</span><span class="sh">
    sort | uniq -c | sort -nr | head -10
    
    echo ""
    
    # 포트별 공격 통계
    echo "Top attacked ports (last hour):"
    grep "</span><span class="si">$(</span><span class="nb">date</span> <span class="nt">-d</span> <span class="s1">'1 hour ago'</span> <span class="s1">'+%b %d %H'</span><span class="si">)</span><span class="sh">" "</span><span class="nv">$UFW_LOG</span><span class="sh">" 2&gt;/dev/null | </span><span class="se">\</span><span class="sh">
    grep "BLOCK" | grep -o "DPT=[0-9]*" | cut -d= -f2 | </span><span class="se">\</span><span class="sh">
    sort | uniq -c | sort -nr | head -10
    
    echo ""
    
    # 프로토콜별 통계
    echo "Protocol statistics (last hour):"
    grep "</span><span class="si">$(</span><span class="nb">date</span> <span class="nt">-d</span> <span class="s1">'1 hour ago'</span> <span class="s1">'+%b %d %H'</span><span class="si">)</span><span class="sh">" "</span><span class="nv">$UFW_LOG</span><span class="sh">" 2&gt;/dev/null | </span><span class="se">\</span><span class="sh">
    grep "BLOCK" | grep -o "PROTO=[A-Z]*" | cut -d= -f2 | </span><span class="se">\</span><span class="sh">
    sort | uniq -c | sort -nr
    
    echo "=================================="
}

# 실시간 모니터링
monitor_realtime() {
    tail -f "</span><span class="nv">$UFW_LOG</span><span class="sh">" | while read line; do
        if echo "</span><span class="nv">$line</span><span class="sh">" | grep -q "BLOCK"; then
            src_ip=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"SRC=[0-9.]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="o">=</span> <span class="nt">-f2</span><span class="si">)</span><span class="sh">
            dst_port=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"DPT=[0-9]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="o">=</span> <span class="nt">-f2</span><span class="si">)</span><span class="sh">
            
            # 높은 빈도 공격 감지
            recent_blocks=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"</span><span class="nv">$src_ip</span><span class="s2">"</span> &lt;<span class="o">(</span><span class="nb">tail</span> <span class="nt">-100</span> <span class="s2">"</span><span class="nv">$UFW_LOG</span><span class="s2">"</span><span class="o">)</span><span class="si">)</span><span class="sh">
            
            if [ "</span><span class="nv">$recent_blocks</span><span class="sh">" -gt 10 ]; then
                echo "</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="sh">: High frequency attack from </span><span class="nv">$src_ip</span><span class="sh"> (port </span><span class="nv">$dst_port</span><span class="sh">)"
                # 자동 차단 강화 (선택사항)
                # ufw insert 1 deny from "</span><span class="nv">$src_ip</span><span class="sh">" comment "Auto-blocked: high frequency"
            fi
        fi
    done
}

case "</span><span class="nv">$1</span><span class="sh">" in
    "analyze")
        analyze_ufw_logs
        ;;
    "monitor")
        echo "Starting real-time UFW monitoring... (Ctrl+C to stop)"
        monitor_realtime
        ;;
    "report")
        analyze_ufw_logs | mail -s "UFW Security Report" "</span><span class="nv">$ALERT_EMAIL</span><span class="sh">"
        ;;
    *)
        echo "Usage: </span><span class="nv">$0</span><span class="sh"> {analyze|monitor|report}"
        exit 1
        ;;
esac
</span><span class="no">EOF

</span><span class="nb">chmod</span> +x /usr/local/bin/ufw-log-monitor.sh

<span class="c"># 9. 정기적인 로그 분석 설정</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/cron.hourly/ufw-analysis <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/bash
/usr/local/bin/ufw-log-monitor.sh analyze &gt;&gt; /var/log/ufw-analysis.log
</span><span class="no">EOF

</span><span class="nb">chmod</span> +x /etc/cron.hourly/ufw-analysis

<span class="nb">echo</span> <span class="s2">"UFW advanced configuration completed!"</span>
<span class="nb">echo</span> <span class="s2">"Monitor logs with: /usr/local/bin/ufw-log-monitor.sh monitor"</span>
<span class="nb">echo</span> <span class="s2">"View status with: ufw status verbose"</span>
</code></pre></div></div>

<h2 id="다음-편-예고">다음 편 예고</h2>

<p>다음 포스트에서는 <strong>SELinux/AppArmor와 시스템 하드닝</strong>을 자세히 다룰 예정입니다:</p>
<ul>
  <li>SELinux 정책 작성 및 관리</li>
  <li>AppArmor 프로파일 커스터마이징</li>
  <li>커널 보안 매개변수 최적화</li>
  <li>파일 시스템 보안 강화</li>
</ul>

<p>SSH와 방화벽 보안을 완벽하게 마스터하셨나요? 🔐🛡️</p>]]></content><author><name>DevOps Engineer</name></author><category term="Security" /><category term="Linux" /><category term="ssh" /><category term="firewall" /><category term="iptables" /><category term="ufw" /><category term="ssh-keys" /><category term="port-forwarding" /><summary type="html"><![CDATA[SSH 보안을 한 단계 높이고 강력한 방화벽 정책을 구축하는 방법을 완벽하게 마스터해보겠습니다. SSH 키 관리부터 고급 방화벽 설정까지 실무에서 바로 활용할 수 있는 내용으로 구성했습니다. SSH 고급 보안 설정 | Advanced SSH Security 🔑 SSH 키 기반 인증 완벽 구축 강화된 SSH 키 생성 및 관리 # 최신 암호화 알고리즘을 사용한 키 생성 # ED25519 (권장 - 빠르고 안전) ssh-keygen -t ed25519 -b 4096 -C "admin@company.com-$(date +%Y%m%d)" -f ~/.ssh/id_ed25519_admin # RSA 키 (호환성이 필요한 경우) ssh-keygen -t rsa -b 4096 -C "admin@company.com-$(date +%Y%m%d)" -f ~/.ssh/id_rsa_admin # ECDSA 키 (대안) ssh-keygen -t ecdsa -b 521 -C "admin@company.com-$(date +%Y%m%d)" -f ~/.ssh/id_ecdsa_admin # 키 생성 시 보안 옵션 ssh-keygen -t ed25519 -b 4096 \ -C "admin@company.com-$(date +%Y%m%d)" \ -f ~/.ssh/id_ed25519_admin \ -N "$(openssl rand -base64 32)" \ # 강력한 패스프레이즈 자동 생성 -o \ # OpenSSH 형식 사용 -a 100 # KDF 라운드 수 증가 # 키 권한 설정 (중요!) chmod 700 ~/.ssh chmod 600 ~/.ssh/id_* chmod 644 ~/.ssh/id_*.pub chmod 600 ~/.ssh/authorized_keys chmod 600 ~/.ssh/config # 키 핑거프린트 확인 ssh-keygen -lf ~/.ssh/id_ed25519_admin.pub ssh-keygen -E sha256 -lf ~/.ssh/id_ed25519_admin.pub # SHA256 해시 # 키 만료일 설정 (OpenSSH 8.2+) ssh-keygen -t ed25519 -V +365d -C "expires-$(date -d '+1 year' +%Y%m%d)" SSH 클라이언트 설정 최적화 # ~/.ssh/config - 클라이언트 설정 # 기본 설정 Host * # 보안 설정 Protocol 2 HashKnownHosts yes VisualHostKey yes StrictHostKeyChecking ask UserKnownHostsFile ~/.ssh/known_hosts # 연결 설정 ServerAliveInterval 60 ServerAliveCountMax 3 ConnectTimeout 10 TCPKeepAlive no # 암호화 설정 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512 MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com HostKeyAlgorithms ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521 # 인증 설정 PreferredAuthentications publickey,keyboard-interactive,password PubkeyAuthentication yes PasswordAuthentication no GSSAPIAuthentication no # 포워딩 설정 (기본적으로 비활성화) ForwardAgent no ForwardX11 no ForwardX11Trusted no # 서버별 개별 설정 Host production-server HostName 192.168.1.100 Port 2222 User admin IdentityFile ~/.ssh/id_ed25519_admin IdentitiesOnly yes RequestTTY yes RemoteForward 9000 localhost:9000 Host development-* Port 22 User developer IdentityFile ~/.ssh/id_ed25519_dev StrictHostKeyChecking no # 개발 서버용 UserKnownHostsFile /dev/null LogLevel QUIET Host bastion HostName bastion.company.com Port 2222 User jumpuser IdentityFile ~/.ssh/id_ed25519_jump ControlMaster auto ControlPath ~/.ssh/control-%h-%p-%r ControlPersist 600 # 베스천 호스트를 통한 접근 Host internal-* ProxyJump bastion User admin IdentityFile ~/.ssh/id_ed25519_admin # 키 에이전트 설정 # ~/.bashrc에 추가 if [ -z "$SSH_AUTH_SOCK" ]; then eval $(ssh-agent -s) ssh-add ~/.ssh/id_ed25519_admin ssh-add ~/.ssh/id_ed25519_dev fi # 키 만료 확인 스크립트 #!/bin/bash # /usr/local/bin/check-ssh-keys.sh for keyfile in ~/.ssh/id_*; do if [[ -f "$keyfile" &amp;&amp; ! "$keyfile" == *.pub ]]; then echo "Checking $keyfile..." ssh-keygen -l -f "$keyfile" 2&gt;/dev/null || echo " Invalid or encrypted key" fi done SSH Certificate Authority (CA) 구축 # 1. CA 키 생성 (보안이 중요한 별도 시스템에서) ssh-keygen -t ed25519 -f /etc/ssh/ca_key -C "SSH-CA-$(date +%Y%m%d)" chmod 600 /etc/ssh/ca_key chmod 644 /etc/ssh/ca_key.pub # 2. 사용자 인증서 발급 # 단기간 유효한 사용자 인증서 (1주일) ssh-keygen -s /etc/ssh/ca_key \ -I "john-doe-$(date +%Y%m%d)" \ -n john,admin \ -V +7d \ -z 1001 \ ~/.ssh/id_ed25519.pub # 호스트별 제한된 인증서 ssh-keygen -s /etc/ssh/ca_key \ -I "backup-service" \ -n backup \ -V +1d \ -O clear \ -O source-address="192.168.1.100/32" \ -O force-command="/usr/local/bin/backup-script" \ ~/.ssh/id_ed25519_backup.pub # 권한 제한 인증서 ssh-keygen -s /etc/ssh/ca_key \ -I "readonly-access" \ -n readonly \ -V +1h \ -O clear \ -O no-agent-forwarding \ -O no-port-forwarding \ -O no-pty \ -O no-user-rc \ ~/.ssh/id_ed25519_readonly.pub # 3. 서버 설정에서 CA 신뢰 # /etc/ssh/sshd_config TrustedUserCAKeys /etc/ssh/ca_key.pub AuthorizedPrincipalsFile /etc/ssh/auth_principals/%u PubkeyAuthentication yes CertificateAuthentication yes # 4. 사용자별 주체(principal) 설정 # /etc/ssh/auth_principals/john john admin developer # /etc/ssh/auth_principals/backup backup # 5. 호스트 인증서도 구축 # 호스트 키에 대한 인증서 발급 ssh-keygen -s /etc/ssh/ca_key \ -I "server1.company.com" \ -h \ -n server1.company.com,server1,192.168.1.100 \ -V +365d \ /etc/ssh/ssh_host_ed25519_key.pub # 클라이언트에서 호스트 CA 신뢰 # ~/.ssh/known_hosts에 추가 @cert-authority *.company.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICAKeyFromCA... # 6. 인증서 관리 스크립트 #!/bin/bash # /usr/local/bin/ssh-cert-manager.sh ACTION=$1 USER=$2 DAYS=${3:-7} case $ACTION in "issue") if [ -z "$USER" ]; then echo "Usage: $0 issue &lt;username&gt; [days]" exit 1 fi USER_KEY="/home/$USER/.ssh/id_ed25519.pub" if [ ! -f "$USER_KEY" ]; then echo "User key not found: $USER_KEY" exit 1 fi ssh-keygen -s /etc/ssh/ca_key \ -I "$USER-$(date +%Y%m%d-%H%M%S)" \ -n "$USER" \ -V "+${DAYS}d" \ "$USER_KEY" echo "Certificate issued for $USER, valid for $DAYS days" ;; "revoke") # 인증서 폐기 목록 관리 CERT_SERIAL=$(ssh-keygen -L -f "/home/$USER/.ssh/id_ed25519-cert.pub" | grep Serial | awk '{print $2}') echo "$CERT_SERIAL" &gt;&gt; /etc/ssh/revoked_keys echo "Certificate revoked for $USER" ;; "list") echo "Active certificates:" for cert in /home/*/.ssh/*-cert.pub; do if [ -f "$cert" ]; then echo "$(basename $(dirname $cert)): $(ssh-keygen -L -f $cert | grep Valid)" fi done ;; *) echo "Usage: $0 {issue|revoke|list} &lt;username&gt; [days]" exit 1 ;; esac 🛡️ SSH 서버 고급 보안 설정 강화된 sshd_config 설정 # /etc/ssh/sshd_config - 최고 보안 수준 설정 # 기본 설정 Protocol 2 Port 2222 # 기본 포트 변경 AddressFamily inet # IPv4만 사용 (필요시) ListenAddress 192.168.1.100 # 특정 IP만 바인딩 # 암호화 및 키 교환 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512 KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group16-sha512 # 호스트 키 설정 (약한 키 제거) HostKey /etc/ssh/ssh_host_ed25519_key HostKey /etc/ssh/ssh_host_ecdsa_key # RSA 키는 4096비트 이상만 사용 HostKey /etc/ssh/ssh_host_rsa_key # 인증 설정 PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no PermitEmptyPasswords no ChallengeResponseAuthentication no GSSAPIAuthentication no HostbasedAuthentication no IgnoreUserKnownHosts yes PermitRootLogin no # 로그인 제한 LoginGraceTime 30 MaxAuthTries 3 MaxSessions 3 MaxStartups 3:30:10 ClientAliveInterval 300 ClientAliveCountMax 2 # 사용자/그룹 제한 AllowUsers admin developer AllowGroups sshusers DenyUsers guest anonymous backup DenyGroups wheel nogroup # 기능 제한 X11Forwarding no AllowTcpForwarding no GatewayPorts no PermitTunnel no PermitUserEnvironment no PermitUserRC no PrintMotd yes PrintLastLog yes TCPKeepAlive no Compression no # 압축 비활성화 (보안) # 로깅 SyslogFacility AUTH LogLevel VERBOSE # 상세 로깅 # Chroot 설정 (SFTP 전용 사용자) Subsystem sftp /usr/lib/openssh/sftp-server # 조건부 설정 Match User sftpuser ChrootDirectory /var/sftp/%u ForceCommand internal-sftp AllowTcpForwarding no X11Forwarding no PermitTunnel no Match Address 192.168.1.0/24 PasswordAuthentication yes MaxAuthTries 5 Match Address 10.0.0.0/8 AllowTcpForwarding local GatewayPorts no Match Group developers AllowTcpForwarding yes PermitOpen localhost:3000 localhost:8080 # 설정 검증 sshd -t sshd -T | grep -i cipher # 암호화 설정 확인 sshd -T | grep -i mac # MAC 설정 확인 SSH 접근 제어 및 모니터링 # 1. TCP Wrapper 설정 # /etc/hosts.allow sshd: 192.168.1.0/24 : ALLOW sshd: 10.0.0.0/8 : ALLOW sshd: ALL : spawn (/usr/local/bin/log-ssh-attempt %a %d) : DENY # /etc/hosts.deny sshd: ALL # 2. SSH 접근 로깅 스크립트 #!/bin/bash # /usr/local/bin/log-ssh-attempt CLIENT_IP=$1 DAEMON=$2 TIMESTAMP=$(date) echo "$TIMESTAMP: Blocked SSH attempt from $CLIENT_IP to $DAEMON" &gt;&gt; /var/log/ssh-blocked.log # 지리적 위치 확인 (선택사항) # LOCATION=$(geoiplookup $CLIENT_IP 2&gt;/dev/null | cut -d: -f2) # echo "$TIMESTAMP: $CLIENT_IP ($LOCATION) blocked" &gt;&gt; /var/log/ssh-geo.log # 3. SSH 세션 모니터링 #!/bin/bash # /usr/local/bin/ssh-monitor.sh # 활성 SSH 세션 모니터링 while true; do ACTIVE_SESSIONS=$(who | grep -c "pts/") SSH_PROCESSES=$(pgrep -c sshd) if [ $ACTIVE_SESSIONS -gt 10 ]; then echo "$(date): High SSH session count: $ACTIVE_SESSIONS" &gt;&gt; /var/log/ssh-monitor.log # 알림 발송 echo "High SSH session count detected: $ACTIVE_SESSIONS active sessions" | \ mail -s "SSH Monitor Alert" admin@company.com fi # 장시간 유지되는 세션 확인 who | while read user tty time rest; do # 12시간 이상 유지된 세션 확인 if [[ "$time" &lt; "$(date -d '12 hours ago' '+%H:%M')" ]]; then echo "$(date): Long running session: $user on $tty since $time" &gt;&gt; /var/log/ssh-monitor.log fi done sleep 60 done # 4. SSH 키 로테이션 스크립트 #!/bin/bash # /usr/local/bin/ssh-key-rotation.sh # 90일마다 호스트 키 로테이션 HOSTKEY_AGE=$(find /etc/ssh/ssh_host_*_key -mtime +90 2&gt;/dev/null | wc -l) if [ $HOSTKEY_AGE -gt 0 ]; then echo "$(date): Host keys are older than 90 days. Rotation recommended." &gt;&gt; /var/log/ssh-key-rotation.log # 백업 cp -r /etc/ssh /etc/ssh.backup.$(date +%Y%m%d) # 새 키 생성 ssh-keygen -A # 서비스 재시작 systemctl restart sshd echo "$(date): Host keys rotated successfully" &gt;&gt; /var/log/ssh-key-rotation.log fi # 사용자 키 만료 확인 for user_home in /home/*; do username=$(basename $user_home) auth_keys="$user_home/.ssh/authorized_keys" if [ -f "$auth_keys" ]; then while read -r key; do if [[ $key =~ ^ssh- ]]; then # 키 생성일 확인 (코멘트에서 날짜 추출) key_date=$(echo $key | grep -o '[0-9]\{8\}' | head -1) if [ -n "$key_date" ]; then key_age=$(( ($(date +%s) - $(date -d "$key_date" +%s)) / 86400 )) if [ $key_age -gt 365 ]; then echo "$(date): User $username has key older than 1 year ($key_age days)" &gt;&gt; /var/log/ssh-key-rotation.log fi fi fi done &lt; "$auth_keys" fi done 🔥 방화벽 보안 설정 iptables 고급 보안 규칙 #!/bin/bash # /usr/local/bin/setup-iptables-advanced.sh # 고급 iptables 보안 설정 스크립트 # 기존 규칙 초기화 iptables -F iptables -X iptables -t nat -F iptables -t nat -X iptables -t mangle -F iptables -t mangle -X iptables -t raw -F iptables -t raw -X # 기본 정책 설정 (모든 트래픽 차단) iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT DROP # 1. 기본 허용 규칙 # Loopback 인터페이스 허용 iptables -A INPUT -i lo -j ACCEPT iptables -A OUTPUT -o lo -j ACCEPT # 기존 연결 유지 iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT # 2. SSH 보안 규칙 (고급) # SSH 브루트포스 방지 (복합적 접근) iptables -N SSH_BRUTEFORCE iptables -A SSH_BRUTEFORCE -m recent --set --name SSH_ATTACK iptables -A SSH_BRUTEFORCE -m recent --update --seconds 3600 --hitcount 3 --name SSH_ATTACK -j LOG --log-prefix "SSH Bruteforce: " iptables -A SSH_BRUTEFORCE -m recent --update --seconds 3600 --hitcount 3 --name SSH_ATTACK -j DROP iptables -A SSH_BRUTEFORCE -j ACCEPT # SSH 접근 제한 iptables -A INPUT -p tcp --dport 2222 -s 192.168.1.0/24 -j SSH_BRUTEFORCE iptables -A INPUT -p tcp --dport 2222 -s 10.0.0.0/8 -j SSH_BRUTEFORCE iptables -A INPUT -p tcp --dport 2222 -j LOG --log-prefix "SSH Unauthorized: " iptables -A INPUT -p tcp --dport 2222 -j DROP # 3. 웹 서버 보안 (있는 경우) # HTTP/HTTPS with rate limiting iptables -N WEB_RATE_LIMIT iptables -A WEB_RATE_LIMIT -m limit --limit 25/minute --limit-burst 100 -j ACCEPT iptables -A WEB_RATE_LIMIT -j LOG --log-prefix "HTTP Rate Limit: " iptables -A WEB_RATE_LIMIT -j DROP iptables -A INPUT -p tcp --dport 80 -j WEB_RATE_LIMIT iptables -A INPUT -p tcp --dport 443 -j WEB_RATE_LIMIT # 4. DDoS 방지 규칙 # SYN Flood 방지 iptables -A INPUT -p tcp --syn -m limit --limit 1/second --limit-burst 3 -j ACCEPT iptables -A INPUT -p tcp --syn -j LOG --log-prefix "SYN Flood: " iptables -A INPUT -p tcp --syn -j DROP # Ping Flood 방지 iptables -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/second --limit-burst 2 -j ACCEPT iptables -A INPUT -p icmp --icmp-type echo-request -j LOG --log-prefix "Ping Flood: " iptables -A INPUT -p icmp --icmp-type echo-request -j DROP # Port Scan 방지 iptables -N PORT_SCAN iptables -A PORT_SCAN -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN iptables -A PORT_SCAN -j LOG --log-prefix "Port Scan: " iptables -A PORT_SCAN -j DROP iptables -A INPUT -j PORT_SCAN # 5. 아웃바운드 트래픽 제어 # DNS 허용 (필수) iptables -A OUTPUT -p udp --dport 53 -d 8.8.8.8 -j ACCEPT iptables -A OUTPUT -p udp --dport 53 -d 1.1.1.1 -j ACCEPT iptables -A OUTPUT -p tcp --dport 53 -j ACCEPT # NTP 허용 iptables -A OUTPUT -p udp --dport 123 -j ACCEPT # HTTP/HTTPS 아웃바운드 (업데이트용) iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT # SMTP 아웃바운드 (이메일) iptables -A OUTPUT -p tcp --dport 587 -j ACCEPT iptables -A OUTPUT -p tcp --dport 25 -j ACCEPT # SSH 아웃바운드 (관리용) iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT iptables -A OUTPUT -p tcp --dport 2222 -j ACCEPT # 6. 지리적 IP 차단 (GeoIP 사용) # 특정 국가 IP 차단 (예: 러시아, 중국, 북한) # iptables -A INPUT -m geoip --src-cc RU,CN,KP -j LOG --log-prefix "GeoIP Block: " # iptables -A INPUT -m geoip --src-cc RU,CN,KP -j DROP # 7. 애플리케이션별 보안 규칙 # 데이터베이스 접근 제한 (내부 네트워크만) iptables -A INPUT -p tcp --dport 3306 -s 192.168.1.0/24 -j ACCEPT # MySQL iptables -A INPUT -p tcp --dport 5432 -s 192.168.1.0/24 -j ACCEPT # PostgreSQL iptables -A INPUT -p tcp --dport 3306 -j LOG --log-prefix "MySQL Unauthorized: " iptables -A INPUT -p tcp --dport 3306 -j DROP iptables -A INPUT -p tcp --dport 5432 -j LOG --log-prefix "PostgreSQL Unauthorized: " iptables -A INPUT -p tcp --dport 5432 -j DROP # 8. 악성 트래픽 차단 # Invalid 패킷 차단 iptables -A INPUT -m conntrack --ctstate INVALID -j LOG --log-prefix "Invalid Packet: " iptables -A INPUT -m conntrack --ctstate INVALID -j DROP # NULL 스캔 차단 iptables -A INPUT -p tcp --tcp-flags ALL NONE -j LOG --log-prefix "NULL Scan: " iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP # XMAS 스캔 차단 iptables -A INPUT -p tcp --tcp-flags ALL ALL -j LOG --log-prefix "XMAS Scan: " iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP # 9. 로깅 설정 (최종 단계) iptables -A INPUT -m limit --limit 5/min -j LOG --log-prefix "INPUT DROP: " --log-level 7 iptables -A OUTPUT -m limit --limit 5/min -j LOG --log-prefix "OUTPUT DROP: " --log-level 7 # 10. 설정 저장 iptables-save &gt; /etc/iptables/rules.v4 # 11. 부팅 시 자동 로드 설정 cat &gt; /etc/systemd/system/iptables-restore.service &lt;&lt; 'EOF' [Unit] Description=Restore iptables rules After=network.target [Service] Type=oneshot ExecStart=/sbin/iptables-restore /etc/iptables/rules.v4 RemainAfterExit=yes [Install] WantedBy=multi-user.target EOF systemctl enable iptables-restore.service echo "Advanced iptables configuration completed!" echo "Rules saved to /etc/iptables/rules.v4" echo "Service enabled for boot: iptables-restore.service" # 규칙 확인 iptables -L -n -v --line-numbers UFW 고급 설정 및 자동화 #!/bin/bash # /usr/local/bin/setup-ufw-advanced.sh # UFW 고급 보안 설정 # UFW 초기화 및 기본 설정 ufw --force reset ufw default deny incoming ufw default deny outgoing ufw default deny forward # 기본 서비스 허용 echo "Setting up basic services..." # SSH (보안 포트) ufw allow from 192.168.1.0/24 to any port 2222 comment 'SSH from LAN' ufw allow from 10.0.0.0/8 to any port 2222 comment 'SSH from VPN' # 아웃바운드 필수 서비스 ufw allow out 53 comment 'DNS' ufw allow out 123 comment 'NTP' ufw allow out 80 comment 'HTTP' ufw allow out 443 comment 'HTTPS' # 메일 발송 ufw allow out 587 comment 'SMTP-TLS' ufw allow out 25 comment 'SMTP' # 웹 서버 (있는 경우) # ufw allow 80 comment 'HTTP Server' # ufw allow 443 comment 'HTTPS Server' # 고급 규칙 설정 echo "Setting up advanced rules..." # 1. 애플리케이션 프로파일 생성 cat &gt; /etc/ufw/applications.d/custom-apps &lt;&lt; 'EOF' [SSH-Custom] title=SSH Custom Port description=SSH on custom port 2222 ports=2222/tcp [Database-Internal] title=Database Internal Access description=MySQL/PostgreSQL for internal network ports=3306,5432/tcp [Monitoring] title=Monitoring Services description=Prometheus, Grafana, etc. ports=9090,3000,9100/tcp EOF ufw app update SSH-Custom ufw allow SSH-Custom # 2. Rate limiting 설정 ufw limit ssh comment 'Rate limit SSH' ufw limit 80/tcp comment 'Rate limit HTTP' ufw limit 443/tcp comment 'Rate limit HTTPS' # 3. 특정 IP 차단 (예시) # 알려진 악성 IP 차단 MALICIOUS_IPS=( "192.0.2.100" "203.0.113.50" ) for ip in "${MALICIOUS_IPS[@]}"; do ufw deny from "$ip" comment "Known malicious IP" done # 4. 지역별 접근 제한 (예시) # 관리 서비스는 국내 IP만 허용 ufw allow from 220.0.0.0/8 to any port 22 comment 'Korea Telecom range' ufw allow from 121.0.0.0/8 to any port 22 comment 'SK Broadband range' # 5. 로깅 설정 ufw logging on # 6. UFW 활성화 ufw --force enable # 7. 상태 출력 ufw status verbose # 8. UFW 로그 모니터링 스크립트 생성 cat &gt; /usr/local/bin/ufw-log-monitor.sh &lt;&lt; 'EOF' #!/bin/bash # UFW 로그 모니터링 및 분석 UFW_LOG="/var/log/ufw.log" ALERT_EMAIL="admin@company.com" # 로그 패턴 분석 analyze_ufw_logs() { echo "=== UFW Log Analysis Report $(date) ===" # 최근 1시간 동안의 차단된 연결 echo "Top blocked IPs (last hour):" grep "$(date -d '1 hour ago' '+%b %d %H')" "$UFW_LOG" 2&gt;/dev/null | \ grep "BLOCK" | awk '{print $(NF-1)}' | cut -d= -f2 | \ sort | uniq -c | sort -nr | head -10 echo "" # 포트별 공격 통계 echo "Top attacked ports (last hour):" grep "$(date -d '1 hour ago' '+%b %d %H')" "$UFW_LOG" 2&gt;/dev/null | \ grep "BLOCK" | grep -o "DPT=[0-9]*" | cut -d= -f2 | \ sort | uniq -c | sort -nr | head -10 echo "" # 프로토콜별 통계 echo "Protocol statistics (last hour):" grep "$(date -d '1 hour ago' '+%b %d %H')" "$UFW_LOG" 2&gt;/dev/null | \ grep "BLOCK" | grep -o "PROTO=[A-Z]*" | cut -d= -f2 | \ sort | uniq -c | sort -nr echo "==================================" } # 실시간 모니터링 monitor_realtime() { tail -f "$UFW_LOG" | while read line; do if echo "$line" | grep -q "BLOCK"; then src_ip=$(echo "$line" | grep -o "SRC=[0-9.]*" | cut -d= -f2) dst_port=$(echo "$line" | grep -o "DPT=[0-9]*" | cut -d= -f2) # 높은 빈도 공격 감지 recent_blocks=$(grep -c "$src_ip" &lt;(tail -100 "$UFW_LOG")) if [ "$recent_blocks" -gt 10 ]; then echo "$(date): High frequency attack from $src_ip (port $dst_port)" # 자동 차단 강화 (선택사항) # ufw insert 1 deny from "$src_ip" comment "Auto-blocked: high frequency" fi fi done } case "$1" in "analyze") analyze_ufw_logs ;; "monitor") echo "Starting real-time UFW monitoring... (Ctrl+C to stop)" monitor_realtime ;; "report") analyze_ufw_logs | mail -s "UFW Security Report" "$ALERT_EMAIL" ;; *) echo "Usage: $0 {analyze|monitor|report}" exit 1 ;; esac EOF chmod +x /usr/local/bin/ufw-log-monitor.sh # 9. 정기적인 로그 분석 설정 cat &gt; /etc/cron.hourly/ufw-analysis &lt;&lt; 'EOF' #!/bin/bash /usr/local/bin/ufw-log-monitor.sh analyze &gt;&gt; /var/log/ufw-analysis.log EOF chmod +x /etc/cron.hourly/ufw-analysis echo "UFW advanced configuration completed!" echo "Monitor logs with: /usr/local/bin/ufw-log-monitor.sh monitor" echo "View status with: ufw status verbose" 다음 편 예고 다음 포스트에서는 SELinux/AppArmor와 시스템 하드닝을 자세히 다룰 예정입니다: SELinux 정책 작성 및 관리 AppArmor 프로파일 커스터마이징 커널 보안 매개변수 최적화 파일 시스템 보안 강화 SSH와 방화벽 보안을 완벽하게 마스터하셨나요? 🔐🛡️]]></summary></entry><entry><title type="html">배포 전략 완전 가이드 | Complete Deployment Strategies Guide</title><link href="https://leeyonghe.github.io/infra-blog/blog/2024/11/04/deployment-strategies-guide.html" rel="alternate" type="text/html" title="배포 전략 완전 가이드 | Complete Deployment Strategies Guide" /><published>2024-11-04T01:00:00+00:00</published><updated>2024-11-04T01:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2024/11/04/deployment-strategies-guide</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2024/11/04/deployment-strategies-guide.html"><![CDATA[<p>현대적인 소프트웨어 개발에서 배포는 단순히 코드를 서버에 올리는 것이 아닙니다. 안정적이고 예측 가능한 배포 전략을 통해 서비스 중단을 최소화하고 사용자 경험을 보장하는 것이 핵심입니다.</p>

<h2 id="3-1-배포--deployment">3-1 배포 | Deployment</h2>

<h3 id="3-1-1-배포-자동화--deployment-automation">3-1-1 배포 자동화 | Deployment Automation</h3>

<p>배포 자동화는 소프트웨어 릴리스 과정을 체계화하고 인간의 실수를 최소화하여 안정적인 서비스 운영을 보장합니다.</p>

<h4 id="-배포-자동화의-핵심-개념">🚀 배포 자동화의 핵심 개념</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 배포 자동화 구성 요소</span>
1. 소스 코드 관리 <span class="o">(</span>SCM<span class="o">)</span>
   - Git, SVN
   - 브랜치 전략 <span class="o">(</span>Git Flow, GitHub Flow<span class="o">)</span>

2. 빌드 자동화
   - 컴파일, 패키징
   - 테스트 실행
   - 아티팩트 생성

3. 배포 파이프라인
   - 단계별 배포 <span class="o">(</span>Dev → Staging → Production<span class="o">)</span>
   - 승인 프로세스
   - 롤백 메커니즘

4. 인프라 자동화
   - IaC <span class="o">(</span>Infrastructure as Code<span class="o">)</span>
   - 컨테이너화
   - 오케스트레이션
</code></pre></div></div>

<h4 id="cicd-파이프라인-설계">CI/CD 파이프라인 설계</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .gitlab-ci.yml - GitLab CI/CD 파이프라인</span>
<span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">build</span>
  <span class="pi">-</span> <span class="s">test</span>
  <span class="pi">-</span> <span class="s">security</span>
  <span class="pi">-</span> <span class="s">deploy-staging</span>
  <span class="pi">-</span> <span class="s">deploy-production</span>

<span class="na">variables</span><span class="pi">:</span>
  <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay2</span>
  <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2376</span>
  <span class="na">DOCKER_TLS_CERTDIR</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/certs"</span>

<span class="na">before_script</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">echo "Pipeline started at $(date)"</span>
  <span class="pi">-</span> <span class="s">docker info</span>

<span class="c1"># 빌드 단계</span>
<span class="na">build</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">build</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">node:16-alpine</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">npm ci --only=production</span>
    <span class="pi">-</span> <span class="s">npm run build</span>
    <span class="pi">-</span> <span class="s">docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .</span>
    <span class="pi">-</span> <span class="s">docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA</span>
  <span class="na">artifacts</span><span class="pi">:</span>
    <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">dist/</span>
    <span class="na">expire_in</span><span class="pi">:</span> <span class="s">1 hour</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">main</span>
    <span class="pi">-</span> <span class="s">develop</span>

<span class="c1"># 테스트 단계</span>
<span class="na">unit-test</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">node:16-alpine</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">npm ci</span>
    <span class="pi">-</span> <span class="s">npm run test:unit</span>
    <span class="pi">-</span> <span class="s">npm run test:coverage</span>
  <span class="na">artifacts</span><span class="pi">:</span>
    <span class="na">reports</span><span class="pi">:</span>
      <span class="na">junit</span><span class="pi">:</span> <span class="s">junit.xml</span>
      <span class="na">coverage_report</span><span class="pi">:</span>
        <span class="na">coverage_format</span><span class="pi">:</span> <span class="s">cobertura</span>
        <span class="na">path</span><span class="pi">:</span> <span class="s">coverage/cobertura-coverage.xml</span>
  <span class="na">coverage</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/Lines\s*:\s*(\d+\.\d+)%/'</span>

<span class="na">integration-test</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">postgres:13</span>
    <span class="pi">-</span> <span class="s">redis:6</span>
  <span class="na">variables</span><span class="pi">:</span>
    <span class="na">POSTGRES_DB</span><span class="pi">:</span> <span class="s">testdb</span>
    <span class="na">POSTGRES_USER</span><span class="pi">:</span> <span class="s">test</span>
    <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">npm run test:integration</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">main</span>

<span class="c1"># 보안 스캔</span>
<span class="na">security-scan</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">security</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">owasp/zap2docker-stable</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">zap-baseline.py -t http://localhost:3000 -J zap-report.json</span>
    <span class="pi">-</span> <span class="s">npm audit --audit-level high</span>
  <span class="na">artifacts</span><span class="pi">:</span>
    <span class="na">reports</span><span class="pi">:</span>
      <span class="na">sast</span><span class="pi">:</span> <span class="s">zap-report.json</span>
  <span class="na">allow_failure</span><span class="pi">:</span> <span class="kc">true</span>

<span class="c1"># 스테이징 배포</span>
<span class="na">deploy-staging</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy-staging</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">alpine/helm:3.8.0</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">helm upgrade --install myapp-staging ./helm-chart</span>
      <span class="s">--namespace staging</span>
      <span class="s">--set image.tag=$CI_COMMIT_SHA</span>
      <span class="s">--set ingress.host=staging.myapp.com</span>
      <span class="s">--wait</span>
  <span class="na">environment</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">staging</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://staging.myapp.com</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">develop</span>

<span class="c1"># 프로덕션 배포 (수동 승인 필요)</span>
<span class="na">deploy-production</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy-production</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">alpine/helm:3.8.0</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">helm upgrade --install myapp-prod ./helm-chart</span>
      <span class="s">--namespace production</span>
      <span class="s">--set image.tag=$CI_COMMIT_SHA</span>
      <span class="s">--set ingress.host=myapp.com</span>
      <span class="s">--set replicas=3</span>
      <span class="s">--wait</span>
  <span class="na">environment</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">production</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://myapp.com</span>
  <span class="na">when</span><span class="pi">:</span> <span class="s">manual</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">main</span>
</code></pre></div></div>

<h4 id="jenkins-파이프라인-구성">Jenkins 파이프라인 구성</h4>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Jenkinsfile - Jenkins 선언적 파이프라인</span>
<span class="n">pipeline</span> <span class="o">{</span>
    <span class="n">agent</span> <span class="n">any</span>
    
    <span class="n">environment</span> <span class="o">{</span>
        <span class="n">DOCKER_REGISTRY</span> <span class="o">=</span> <span class="s1">'your-registry.com'</span>
        <span class="n">APP_NAME</span> <span class="o">=</span> <span class="s1">'myapp'</span>
        <span class="n">KUBECONFIG</span> <span class="o">=</span> <span class="n">credentials</span><span class="o">(</span><span class="s1">'kubeconfig-prod'</span><span class="o">)</span>
    <span class="o">}</span>
    
    <span class="n">stages</span> <span class="o">{</span>
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Checkout'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">checkout</span> <span class="n">scm</span>
                <span class="n">script</span> <span class="o">{</span>
                    <span class="n">env</span><span class="o">.</span><span class="na">GIT_COMMIT_SHORT</span> <span class="o">=</span> <span class="n">sh</span><span class="o">(</span>
                        <span class="nl">script:</span> <span class="s1">'git rev-parse --short HEAD'</span><span class="o">,</span>
                        <span class="nl">returnStdout:</span> <span class="kc">true</span>
                    <span class="o">).</span><span class="na">trim</span><span class="o">()</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Build &amp; Test'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">parallel</span> <span class="o">{</span>
                <span class="n">stage</span><span class="o">(</span><span class="s1">'Unit Tests'</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">steps</span> <span class="o">{</span>
                        <span class="n">sh</span> <span class="s1">'npm ci'</span>
                        <span class="n">sh</span> <span class="s1">'npm run test:unit'</span>
                    <span class="o">}</span>
                    <span class="n">post</span> <span class="o">{</span>
                        <span class="n">always</span> <span class="o">{</span>
                            <span class="n">publishTestResults</span> <span class="nl">testResultsPattern:</span> <span class="s1">'test-results.xml'</span>
                            <span class="n">publishCoverage</span> <span class="nl">adapters:</span> <span class="o">[</span>
                                <span class="n">coberturaAdapter</span><span class="o">(</span><span class="s1">'coverage/cobertura-coverage.xml'</span><span class="o">)</span>
                            <span class="o">]</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                
                <span class="n">stage</span><span class="o">(</span><span class="s1">'Security Scan'</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">steps</span> <span class="o">{</span>
                        <span class="n">sh</span> <span class="s1">'npm audit'</span>
                        <span class="n">sh</span> <span class="s1">'docker run --rm -v $(pwd):/app clair-scanner --ip $(hostname -i) myapp:latest'</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Build Docker Image'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">script</span> <span class="o">{</span>
                    <span class="kt">def</span> <span class="n">image</span> <span class="o">=</span> <span class="n">docker</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="s2">"${DOCKER_REGISTRY}/${APP_NAME}:${env.GIT_COMMIT_SHORT}"</span><span class="o">)</span>
                    <span class="n">docker</span><span class="o">.</span><span class="na">withRegistry</span><span class="o">(</span><span class="s2">"https://${DOCKER_REGISTRY}"</span><span class="o">,</span> <span class="s1">'docker-registry-credentials'</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">image</span><span class="o">.</span><span class="na">push</span><span class="o">()</span>
                        <span class="n">image</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s1">'latest'</span><span class="o">)</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Deploy to Staging'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">sh</span> <span class="s2">"""
                    helm upgrade --install ${APP_NAME}-staging ./helm-chart \\
                        --namespace staging \\
                        --set image.tag=${env.GIT_COMMIT_SHORT} \\
                        --wait --timeout=600s
                """</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Integration Tests'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">sh</span> <span class="s1">'npm run test:integration -- --env=staging'</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Deploy to Production'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">when</span> <span class="o">{</span>
                <span class="n">branch</span> <span class="s1">'main'</span>
            <span class="o">}</span>
            <span class="n">input</span> <span class="o">{</span>
                <span class="n">message</span> <span class="s2">"Deploy to production?"</span>
                <span class="n">ok</span> <span class="s2">"Deploy"</span>
                <span class="n">parameters</span> <span class="o">{</span>
                    <span class="n">choice</span><span class="o">(</span><span class="nl">name:</span> <span class="s1">'DEPLOYMENT_STRATEGY'</span><span class="o">,</span> <span class="nl">choices:</span> <span class="o">[</span><span class="s1">'rolling'</span><span class="o">,</span> <span class="s1">'blue-green'</span><span class="o">,</span> <span class="s1">'canary'</span><span class="o">])</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">script</span> <span class="o">{</span>
                    <span class="k">switch</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">DEPLOYMENT_STRATEGY</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">case</span> <span class="s1">'blue-green'</span><span class="o">:</span>
                            <span class="n">sh</span> <span class="s1">'./scripts/blue-green-deploy.sh ${env.GIT_COMMIT_SHORT}'</span>
                            <span class="k">break</span>
                        <span class="k">case</span> <span class="s1">'canary'</span><span class="o">:</span>
                            <span class="n">sh</span> <span class="s1">'./scripts/canary-deploy.sh ${env.GIT_COMMIT_SHORT}'</span>
                            <span class="k">break</span>
                        <span class="nl">default:</span>
                            <span class="n">sh</span> <span class="s2">"""
                                helm upgrade --install ${APP_NAME}-prod ./helm-chart \\
                                    --namespace production \\
                                    --set image.tag=${env.GIT_COMMIT_SHORT} \\
                                    --wait --timeout=600s
                            """</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="n">post</span> <span class="o">{</span>
        <span class="n">failure</span> <span class="o">{</span>
            <span class="n">script</span> <span class="o">{</span>
                <span class="n">slackSend</span><span class="o">(</span>
                    <span class="nl">channel:</span> <span class="s1">'#deployments'</span><span class="o">,</span>
                    <span class="nl">color:</span> <span class="s1">'danger'</span><span class="o">,</span>
                    <span class="nl">message:</span> <span class="s2">"❌ Deployment failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}"</span>
                <span class="o">)</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">success</span> <span class="o">{</span>
            <span class="n">script</span> <span class="o">{</span>
                <span class="n">slackSend</span><span class="o">(</span>
                    <span class="nl">channel:</span> <span class="s1">'#deployments'</span><span class="o">,</span>
                    <span class="nl">color:</span> <span class="s1">'good'</span><span class="o">,</span>
                    <span class="nl">message:</span> <span class="s2">"✅ Deployment successful: ${env.JOB_NAME} ${env.BUILD_NUMBER}"</span>
                <span class="o">)</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-1-2-배포-자동화-도구-선택--deployment-automation-tools">3-1-2 배포 자동화 도구 선택 | Deployment Automation Tools</h3>

<h4 id="️-도구-비교-매트릭스">🛠️ 도구 비교 매트릭스</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># CI/CD 플랫폼 비교</span>
                GitLab CI    Jenkins     GitHub Actions    Azure DevOps    AWS CodePipeline
설정 복잡도        낮음        중간           낮음            중간              높음
클라우드 통합      우수        보통           우수            우수              우수  
온프레미스 지원    우수        우수           제한적          우수              불가
비용              무료/유료    오픈소스       무료/유료        유료              사용량기반
확장성            우수        우수           우수            우수              우수
커뮤니티 지원      우수        최고           우수            보통              보통

<span class="c"># 컨테이너 오케스트레이션</span>
                Kubernetes   Docker Swarm   OpenShift      Nomad           ECS/Fargate
학습 곡선          가파름       완만          중간           완만             완만
기능 풍부함        최고        기본           우수           기본             기본
클라우드 지원      우수        보통           우수           보통             AWS전용
커뮤니티          최고        감소           보통           성장             AWS생태계
</code></pre></div></div>

<h4 id="github-actions-워크플로우">GitHub Actions 워크플로우</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .github/workflows/deploy.yml</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">Deploy Application</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">main</span><span class="pi">,</span> <span class="nv">develop</span><span class="pi">]</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">main</span><span class="pi">]</span>

<span class="na">env</span><span class="pi">:</span>
  <span class="na">REGISTRY</span><span class="pi">:</span> <span class="s">ghcr.io</span>
  <span class="na">IMAGE_NAME</span><span class="pi">:</span> <span class="s">$</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">strategy</span><span class="pi">:</span>
      <span class="na">matrix</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">16.x</span><span class="pi">,</span> <span class="nv">18.x</span><span class="pi">]</span>
    
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup Node.js $</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">cache</span><span class="pi">:</span> <span class="s1">'</span><span class="s">npm'</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">npm ci</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run tests</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">npm run test:unit</span>
        <span class="s">npm run test:integration</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Upload coverage reports</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">codecov/codecov-action@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">file</span><span class="pi">:</span> <span class="s">./coverage/lcov.info</span>

  <span class="na">build</span><span class="pi">:</span>
    <span class="na">needs</span><span class="pi">:</span> <span class="s">test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">outputs</span><span class="pi">:</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">$</span>
      <span class="na">digest</span><span class="pi">:</span> <span class="s">$</span>
    
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout repository</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup Docker Buildx</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/setup-buildx-action@v2</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Log in to Container Registry</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/login-action@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">registry</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">username</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">password</span><span class="pi">:</span> <span class="s">$</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Extract metadata</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">meta</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/metadata-action@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">images</span><span class="pi">:</span> <span class="s">$/$</span>
        <span class="na">tags</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">type=ref,event=branch</span>
          <span class="s">type=ref,event=pr</span>
          <span class="s">type=sha,prefix=-</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build and push Docker image</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">build</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/build-push-action@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
        <span class="na">push</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">tags</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">labels</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">cache-from</span><span class="pi">:</span> <span class="s">type=gha</span>
        <span class="na">cache-to</span><span class="pi">:</span> <span class="s">type=gha,mode=max</span>

  <span class="na">deploy-staging</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">github.ref == 'refs/heads/develop'</span>
    <span class="na">needs</span><span class="pi">:</span> <span class="s">build</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">environment</span><span class="pi">:</span> <span class="s">staging</span>
    
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to staging</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">azure/k8s-deploy@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">manifests</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">k8s/staging/deployment.yaml</span>
          <span class="s">k8s/staging/service.yaml</span>
        <span class="na">images</span><span class="pi">:</span> <span class="s">$@$</span>
        <span class="na">namespace</span><span class="pi">:</span> <span class="s">staging</span>

  <span class="na">deploy-production</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">github.ref == 'refs/heads/main'</span>
    <span class="na">needs</span><span class="pi">:</span> <span class="s">build</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">environment</span><span class="pi">:</span> <span class="s">production</span>
    
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to production</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">azure/k8s-deploy@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">manifests</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">k8s/production/deployment.yaml</span>
          <span class="s">k8s/production/service.yaml</span>
        <span class="na">images</span><span class="pi">:</span> <span class="s">$@$</span>
        <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>
        <span class="na">strategy</span><span class="pi">:</span> <span class="s">blue-green</span>
</code></pre></div></div>

<h4 id="argocd-gitops-워크플로우">ArgoCD GitOps 워크플로우</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># argocd-app.yaml - ArgoCD Application 정의</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">argoproj.io/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Application</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-production</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">argocd</span>
  <span class="na">finalizers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">resources-finalizer.argocd.argoproj.io</span>

<span class="na">spec</span><span class="pi">:</span>
  <span class="na">project</span><span class="pi">:</span> <span class="s">default</span>
  
  <span class="na">source</span><span class="pi">:</span>
    <span class="na">repoURL</span><span class="pi">:</span> <span class="s">https://github.com/company/myapp-k8s-manifests</span>
    <span class="na">targetRevision</span><span class="pi">:</span> <span class="s">HEAD</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">overlays/production</span>
    
  <span class="na">destination</span><span class="pi">:</span>
    <span class="na">server</span><span class="pi">:</span> <span class="s">https://kubernetes.default.svc</span>
    <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>
    
  <span class="na">syncPolicy</span><span class="pi">:</span>
    <span class="na">automated</span><span class="pi">:</span>
      <span class="na">prune</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">selfHeal</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">allowEmpty</span><span class="pi">:</span> <span class="kc">false</span>
    <span class="na">syncOptions</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">CreateNamespace=true</span>
      <span class="pi">-</span> <span class="s">PrunePropagationPolicy=foreground</span>
      <span class="pi">-</span> <span class="s">PruneLast=true</span>
      
  <span class="na">revisionHistoryLimit</span><span class="pi">:</span> <span class="m">10</span>
  
  <span class="c1"># Health checks</span>
  <span class="na">ignoreDifferences</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">group</span><span class="pi">:</span> <span class="s">apps</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
    <span class="na">jsonPointers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">/spec/replicas</span>

<span class="nn">---</span>
<span class="c1"># kustomization.yaml - Kustomize 설정</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">kustomize.config.k8s.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Kustomization</span>

<span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>

<span class="na">resources</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s">../../base</span>

<span class="na">patchesStrategicMerge</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s">deployment-patch.yaml</span>
<span class="pi">-</span> <span class="s">service-patch.yaml</span>

<span class="na">images</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">myapp</span>
  <span class="na">newTag</span><span class="pi">:</span> <span class="s">v1.2.3</span>

<span class="na">replicas</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-deployment</span>
  <span class="na">count</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">configMapGenerator</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-config</span>
  <span class="na">files</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">config/production.yaml</span>

<span class="na">secretGenerator</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-secrets</span>
  <span class="na">files</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">secrets/database.env</span>
</code></pre></div></div>

<h2 id="3-2-배포-전략--deployment-strategies">3-2 배포 전략 | Deployment Strategies</h2>

<h3 id="3-2-1-가장-간단한-배포--recreate-deployment">3-2-1 가장 간단한 배포 | Recreate Deployment</h3>

<p>Recreate 배포는 기존 버전을 완전히 중단한 후 새 버전을 시작하는 가장 단순한 배포 방식입니다.</p>

<h4 id="-recreate-배포-특징">📋 Recreate 배포 특징</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 장점</span>
- 구현이 간단함
- 리소스 사용량이 적음
- 버전 간 충돌 없음
- 데이터베이스 마이그레이션에 유리

<span class="c"># 단점  </span>
- 서비스 중단 시간 발생
- 사용자 경험 저하
- 롤백 시간이 김
</code></pre></div></div>

<h4 id="kubernetes-recreate-배포">Kubernetes Recreate 배포</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># recreate-deployment.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-recreate</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>

<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">Recreate</span>  <span class="c1"># Recreate 전략 사용</span>
    
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
      
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">v2.0.0</span>
        
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">myapp</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">myapp:v2.0.0</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
        
        <span class="c1"># 헬스체크 설정</span>
        <span class="na">livenessProbe</span><span class="pi">:</span>
          <span class="na">httpGet</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>
            <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
          <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="m">30</span>
          <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">10</span>
          
        <span class="na">readinessProbe</span><span class="pi">:</span>
          <span class="na">httpGet</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/ready</span>
            <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
          <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="m">5</span>
          <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">5</span>
          
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">256Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">250m"</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">512Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
</code></pre></div></div>

<h4 id="recreate-배포-스크립트">Recreate 배포 스크립트</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># recreate-deploy.sh</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="nv">APP_NAME</span><span class="o">=</span><span class="s2">"myapp"</span>
<span class="nv">NEW_VERSION</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="nv">NAMESPACE</span><span class="o">=</span><span class="s2">"production"</span>

<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$NEW_VERSION</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> &lt;new-version&gt;"</span>
    <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"=== Recreate Deployment Started ==="</span>
<span class="nb">echo</span> <span class="s2">"App: </span><span class="nv">$APP_NAME</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"New Version: </span><span class="nv">$NEW_VERSION</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Namespace: </span><span class="nv">$NAMESPACE</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Time: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>

<span class="c"># 1. 현재 배포 상태 확인</span>
<span class="nb">echo</span> <span class="s2">"Current deployment status:"</span>
kubectl get deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span>

<span class="c"># 2. 헬스체크 엔드포인트 확인</span>
<span class="nb">echo</span> <span class="s2">"Checking current health status..."</span>
kubectl get pods <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-l</span> <span class="nv">app</span><span class="o">=</span><span class="nv">$APP_NAME</span>

<span class="c"># 3. 트래픽 중단 (로드밸런서에서 제거)</span>
<span class="nb">echo</span> <span class="s2">"Removing from load balancer..."</span>
kubectl patch service <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-p</span> <span class="s1">'{"spec":{"selector":{"app":"maintenance"}}}'</span>

<span class="c"># 4. 기존 파드 종료 대기</span>
<span class="nb">echo</span> <span class="s2">"Stopping existing pods..."</span>
kubectl delete pods <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-l</span> <span class="nv">app</span><span class="o">=</span><span class="nv">$APP_NAME</span> <span class="nt">--grace-period</span><span class="o">=</span>30

<span class="c"># 5. 새 버전으로 업데이트</span>
<span class="nb">echo</span> <span class="s2">"Updating to new version: </span><span class="nv">$NEW_VERSION</span><span class="s2">"</span>
kubectl <span class="nb">set </span>image deployment/<span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nv">container</span><span class="o">=</span><span class="nv">$APP_NAME</span>:<span class="nv">$NEW_VERSION</span>

<span class="c"># 6. 배포 완료 대기</span>
<span class="nb">echo</span> <span class="s2">"Waiting for deployment to complete..."</span>
kubectl rollout status deployment/<span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">--timeout</span><span class="o">=</span>300s

<span class="c"># 7. 헬스체크 확인</span>
<span class="nb">echo</span> <span class="s2">"Performing health checks..."</span>
<span class="nb">sleep </span>30

<span class="nv">READY_REPLICAS</span><span class="o">=</span><span class="si">$(</span>kubectl get deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.status.readyReplicas}'</span><span class="si">)</span>
<span class="nv">DESIRED_REPLICAS</span><span class="o">=</span><span class="si">$(</span>kubectl get deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.spec.replicas}'</span><span class="si">)</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$READY_REPLICAS</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"</span><span class="nv">$DESIRED_REPLICAS</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Health check passed: </span><span class="nv">$READY_REPLICAS</span><span class="s2">/</span><span class="nv">$DESIRED_REPLICAS</span><span class="s2"> pods ready"</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"Health check failed: </span><span class="nv">$READY_REPLICAS</span><span class="s2">/</span><span class="nv">$DESIRED_REPLICAS</span><span class="s2"> pods ready"</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># 8. 트래픽 복원</span>
<span class="nb">echo</span> <span class="s2">"Restoring traffic..."</span>
kubectl patch service <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-p</span> <span class="s1">'{"spec":{"selector":{"app":"'</span><span class="nv">$APP_NAME</span><span class="s1">'"}}}'</span>

<span class="nb">echo</span> <span class="s2">"=== Recreate Deployment Completed Successfully ==="</span>
</code></pre></div></div>

<h3 id="3-2-2-롤링-업데이트--rolling-update">3-2-2 롤링 업데이트 | Rolling Update</h3>

<p>롤링 업데이트는 서비스 중단 없이 점진적으로 새 버전을 배포하는 방식입니다.</p>

<h4 id="-롤링-업데이트-원리">🔄 롤링 업데이트 원리</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># rolling-update-deployment.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-rolling</span>

<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">6</span>
  <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">RollingUpdate</span>
    <span class="na">rollingUpdate</span><span class="pi">:</span>
      <span class="na">maxUnavailable</span><span class="pi">:</span> <span class="m">1</span>      <span class="c1"># 최대 1개 파드 중단 허용</span>
      <span class="na">maxSurge</span><span class="pi">:</span> <span class="m">2</span>           <span class="c1"># 최대 2개 추가 파드 생성 허용</span>
      
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
      
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">myapp</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">myapp:v2.1.0</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
        
        <span class="c1"># 점진적 종료를 위한 설정</span>
        <span class="na">lifecycle</span><span class="pi">:</span>
          <span class="na">preStop</span><span class="pi">:</span>
            <span class="na">exec</span><span class="pi">:</span>
              <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">/bin/sh"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">sleep</span><span class="nv"> </span><span class="s">15"</span><span class="pi">]</span>
              
        <span class="c1"># 빠른 시작을 위한 헬스체크</span>
        <span class="na">readinessProbe</span><span class="pi">:</span>
          <span class="na">httpGet</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/ready</span>
            <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
          <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="m">10</span>
          <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">2</span>
          <span class="na">timeoutSeconds</span><span class="pi">:</span> <span class="m">1</span>
          <span class="na">successThreshold</span><span class="pi">:</span> <span class="m">1</span>
          <span class="na">failureThreshold</span><span class="pi">:</span> <span class="m">3</span>
          
        <span class="na">livenessProbe</span><span class="pi">:</span>
          <span class="na">httpGet</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>  
            <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
          <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="m">30</span>
          <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">10</span>
</code></pre></div></div>

<h4 id="고급-롤링-업데이트-스크립트">고급 롤링 업데이트 스크립트</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># advanced-rolling-update.sh</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="nv">APP_NAME</span><span class="o">=</span><span class="s2">"myapp"</span>
<span class="nv">NEW_VERSION</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="nv">NAMESPACE</span><span class="o">=</span><span class="s2">"production"</span>
<span class="nv">MAX_ROLLBACK_REVISION</span><span class="o">=</span>5

<span class="c"># 컬러 출력을 위한 함수</span>
<span class="nv">RED</span><span class="o">=</span><span class="s1">'\033[0;31m'</span>
<span class="nv">GREEN</span><span class="o">=</span><span class="s1">'\033[0;32m'</span>
<span class="nv">YELLOW</span><span class="o">=</span><span class="s1">'\033[1;33m'</span>
<span class="nv">NC</span><span class="o">=</span><span class="s1">'\033[0m'</span> <span class="c"># No Color</span>

log<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">GREEN</span><span class="k">}</span><span class="s2">[</span><span class="si">$(</span><span class="nb">date</span> +<span class="s1">'%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2">]</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2"> </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

warn<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">YELLOW</span><span class="k">}</span><span class="s2">[WARNING]</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2"> </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

error<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">RED</span><span class="k">}</span><span class="s2">[ERROR]</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2"> </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 사전 점검</span>
pre_deployment_checks<span class="o">()</span> <span class="o">{</span>
    log <span class="s2">"Performing pre-deployment checks..."</span>
    
    <span class="c"># 1. 새 이미지 존재 확인</span>
    <span class="k">if</span> <span class="o">!</span> docker pull <span class="nv">$APP_NAME</span>:<span class="nv">$NEW_VERSION</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"Image </span><span class="nv">$APP_NAME</span><span class="s2">:</span><span class="nv">$NEW_VERSION</span><span class="s2"> not found"</span>
        <span class="nb">exit </span>1
    <span class="k">fi</span>
    
    <span class="c"># 2. 클러스터 상태 확인</span>
    <span class="k">if</span> <span class="o">!</span> kubectl cluster-info <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"Cannot connect to Kubernetes cluster"</span>
        <span class="nb">exit </span>1
    <span class="k">fi</span>
    
    <span class="c"># 3. 네임스페이스 존재 확인</span>
    <span class="k">if</span> <span class="o">!</span> kubectl get namespace <span class="nv">$NAMESPACE</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"Namespace </span><span class="nv">$NAMESPACE</span><span class="s2"> does not exist"</span>
        <span class="nb">exit </span>1
    <span class="k">fi</span>
    
    <span class="c"># 4. 현재 배포 상태 확인</span>
    <span class="nv">CURRENT_REPLICAS</span><span class="o">=</span><span class="si">$(</span>kubectl get deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.status.readyReplicas}'</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"0"</span><span class="si">)</span>
    <span class="nv">DESIRED_REPLICAS</span><span class="o">=</span><span class="si">$(</span>kubectl get deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.spec.replicas}'</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"0"</span><span class="si">)</span>
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$CURRENT_REPLICAS</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"</span><span class="nv">$DESIRED_REPLICAS</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>warn <span class="s2">"Current deployment is not healthy: </span><span class="nv">$CURRENT_REPLICAS</span><span class="s2">/</span><span class="nv">$DESIRED_REPLICAS</span><span class="s2"> pods ready"</span>
        <span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Continue anyway? (y/N): "</span> <span class="nt">-n</span> 1 <span class="nt">-r</span>
        <span class="nb">echo
        </span><span class="k">if</span> <span class="o">[[</span> <span class="o">!</span> <span class="nv">$REPLY</span> <span class="o">=</span>~ ^[Yy]<span class="nv">$ </span><span class="o">]]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">exit </span>1
        <span class="k">fi
    fi
    
    </span>log <span class="s2">"Pre-deployment checks completed successfully"</span>
<span class="o">}</span>

<span class="c"># 배포 실행</span>
perform_rolling_update<span class="o">()</span> <span class="o">{</span>
    log <span class="s2">"Starting rolling update to version </span><span class="nv">$NEW_VERSION</span><span class="s2">"</span>
    
    <span class="c"># 현재 이미지 태그 저장 (롤백용)</span>
    <span class="nv">CURRENT_IMAGE</span><span class="o">=</span><span class="si">$(</span>kubectl get deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.spec.template.spec.containers[0].image}'</span><span class="si">)</span>
    
    <span class="c"># 배포 히스토리 기록</span>
    kubectl annotate deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="se">\</span>
        deployment.kubernetes.io/revision-history<span class="o">=</span><span class="s2">"Previous: </span><span class="nv">$CURRENT_IMAGE</span><span class="s2">, New: </span><span class="nv">$APP_NAME</span><span class="s2">:</span><span class="nv">$NEW_VERSION</span><span class="s2">, Time: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>
    
    <span class="c"># 새 버전 배포</span>
    kubectl <span class="nb">set </span>image deployment/<span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nv">$APP_NAME</span><span class="o">=</span><span class="nv">$APP_NAME</span>:<span class="nv">$NEW_VERSION</span>
    
    <span class="c"># 배포 상태 모니터링</span>
    log <span class="s2">"Monitoring rollout progress..."</span>
    
    <span class="c"># 타임아웃과 함께 롤아웃 상태 확인</span>
    <span class="k">if </span><span class="nb">timeout </span>600 kubectl rollout status deployment/<span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span><span class="p">;</span> <span class="k">then
        </span>log <span class="s2">"Rolling update completed successfully"</span>
    <span class="k">else
        </span>error <span class="s2">"Rolling update timed out"</span>
        <span class="k">return </span>1
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># 배포 후 검증</span>
post_deployment_validation<span class="o">()</span> <span class="o">{</span>
    log <span class="s2">"Performing post-deployment validation..."</span>
    
    <span class="c"># 1. 파드 상태 확인</span>
    <span class="nb">sleep </span>30
    
    <span class="nv">READY_REPLICAS</span><span class="o">=</span><span class="si">$(</span>kubectl get deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.status.readyReplicas}'</span><span class="si">)</span>
    <span class="nv">DESIRED_REPLICAS</span><span class="o">=</span><span class="si">$(</span>kubectl get deployment <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.spec.replicas}'</span><span class="si">)</span>
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$READY_REPLICAS</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"</span><span class="nv">$DESIRED_REPLICAS</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"Pod readiness check failed: </span><span class="nv">$READY_REPLICAS</span><span class="s2">/</span><span class="nv">$DESIRED_REPLICAS</span><span class="s2">"</span>
        <span class="k">return </span>1
    <span class="k">fi</span>
    
    <span class="c"># 2. 애플리케이션 헬스체크</span>
    <span class="nv">SERVICE_IP</span><span class="o">=</span><span class="si">$(</span>kubectl get service <span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.spec.clusterIP}'</span><span class="si">)</span>
    
    <span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..10<span class="o">}</span><span class="p">;</span> <span class="k">do
        if </span>curl <span class="nt">-f</span> <span class="nt">-s</span> http://<span class="nv">$SERVICE_IP</span>:8080/health <span class="o">&gt;</span> /dev/null<span class="p">;</span> <span class="k">then
            </span>log <span class="s2">"Application health check passed"</span>
            <span class="nb">break
        </span><span class="k">else
            </span>warn <span class="s2">"Health check attempt </span><span class="nv">$i</span><span class="s2"> failed, retrying..."</span>
            <span class="nb">sleep </span>5
        <span class="k">fi
        
        if</span> <span class="o">[</span> <span class="nv">$i</span> <span class="nt">-eq</span> 10 <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>error <span class="s2">"Application health check failed after 10 attempts"</span>
            <span class="k">return </span>1
        <span class="k">fi
    done</span>
    
    <span class="c"># 3. 메모리 및 CPU 사용률 확인</span>
    log <span class="s2">"Checking resource usage..."</span>
    kubectl top pods <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">-l</span> <span class="nv">app</span><span class="o">=</span><span class="nv">$APP_NAME</span>
    
    log <span class="s2">"Post-deployment validation completed successfully"</span>
<span class="o">}</span>

<span class="c"># 롤백 함수</span>
rollback_deployment<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">rollback_reason</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
    
    error <span class="s2">"Rolling back deployment due to: </span><span class="nv">$rollback_reason</span><span class="s2">"</span>
    
    kubectl rollout undo deployment/<span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span>
    
    log <span class="s2">"Waiting for rollback to complete..."</span>
    kubectl rollout status deployment/<span class="nv">$APP_NAME</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">--timeout</span><span class="o">=</span>300s
    
    error <span class="s2">"Rollback completed"</span>
<span class="o">}</span>

<span class="c"># 메인 실행 로직</span>
main<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$NEW_VERSION</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> &lt;new-version&gt;"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"=== Rolling Update Started ==="</span>
    log <span class="s2">"App: </span><span class="nv">$APP_NAME</span><span class="s2">"</span>
    log <span class="s2">"New Version: </span><span class="nv">$NEW_VERSION</span><span class="s2">"</span>
    log <span class="s2">"Namespace: </span><span class="nv">$NAMESPACE</span><span class="s2">"</span>
    
    <span class="c"># 단계별 실행</span>
    <span class="k">if</span> <span class="o">!</span> pre_deployment_checks<span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"Pre-deployment checks failed"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    if</span> <span class="o">!</span> perform_rolling_update<span class="p">;</span> <span class="k">then
        </span>rollback_deployment <span class="s2">"Rolling update failed"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    if</span> <span class="o">!</span> post_deployment_validation<span class="p">;</span> <span class="k">then
        </span>rollback_deployment <span class="s2">"Post-deployment validation failed"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"=== Rolling Update Completed Successfully ==="</span>
<span class="o">}</span>

main <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="3-2-3-블루그린-배포--blue-green-deployment">3-2-3 블루그린 배포 | Blue-Green Deployment</h3>

<p>블루그린 배포는 두 개의 동일한 환경을 운영하여 무중단 배포와 즉시 롤백을 가능하게 하는 전략입니다.</p>

<h4 id="-블루그린-배포-개념">🔵🟢 블루그린 배포 개념</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 블루그린 배포 환경 구성</span>
Production Traffic → Load Balancer → Blue Environment <span class="o">(</span>현재 버전<span class="o">)</span>
                                  → Green Environment <span class="o">(</span>새 버전, 대기<span class="o">)</span>

<span class="c"># 배포 과정</span>
1. Green 환경에 새 버전 배포
2. Green 환경 테스트 및 검증  
3. 로드밸런서 트래픽을 Blue → Green으로 전환
4. Blue 환경을 새로운 Green으로 준비
</code></pre></div></div>

<h4 id="kubernetes-블루그린-배포">Kubernetes 블루그린 배포</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># blue-green-service.yaml - 트래픽 라우팅 서비스</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-service</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>

<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s">blue</span>    <span class="c1"># blue 또는 green으로 전환</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">http</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>
    <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>

<span class="nn">---</span>
<span class="c1"># blue-deployment.yaml - Blue 환경</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-blue</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s">blue</span>

<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">blue</span>
      
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">blue</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">myapp</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">myapp:v1.0.0</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">256Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">250m"</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">512Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>

<span class="nn">---</span>
<span class="c1"># green-deployment.yaml - Green 환경</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>  
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-green</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s">green</span>

<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">green</span>
      
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">green</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">myapp</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">myapp:v2.0.0</span>  <span class="c1"># 새 버전</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">256Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">250m"</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">512Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
</code></pre></div></div>

<h3 id="3-2-4-카나리-배포--canary-deployment">3-2-4 카나리 배포 | Canary Deployment</h3>

<p>카나리 배포는 새 버전을 일부 트래픽에만 점진적으로 노출하여 리스크를 최소화하는 배포 전략입니다.</p>

<h4 id="-카나리-배포-구현">🐤 카나리 배포 구현</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># canary-istio.yaml - Istio를 이용한 카나리 배포</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VirtualService</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-canary</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>

<span class="na">spec</span><span class="pi">:</span>
  <span class="na">hosts</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">myapp.company.com</span>
  
  <span class="na">http</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">headers</span><span class="pi">:</span>
        <span class="na">canary</span><span class="pi">:</span>
          <span class="na">exact</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
    <span class="na">route</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">destination</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">myapp-service</span>
        <span class="na">subset</span><span class="pi">:</span> <span class="s">v2</span>
      <span class="na">weight</span><span class="pi">:</span> <span class="m">100</span>
      
  <span class="pi">-</span> <span class="na">route</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">destination</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">myapp-service</span>
        <span class="na">subset</span><span class="pi">:</span> <span class="s">v1</span>
      <span class="na">weight</span><span class="pi">:</span> <span class="m">90</span>    <span class="c1"># 90% 기존 버전</span>
    <span class="pi">-</span> <span class="na">destination</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">myapp-service</span>  
        <span class="na">subset</span><span class="pi">:</span> <span class="s">v2</span>
      <span class="na">weight</span><span class="pi">:</span> <span class="m">10</span>    <span class="c1"># 10% 새 버전</span>

<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">DestinationRule</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-destination</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">production</span>

<span class="na">spec</span><span class="pi">:</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">myapp-service</span>
  <span class="na">subsets</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">v1</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">v1.0.0</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">v2</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">v2.0.0</span>
</code></pre></div></div>

<h4 id="점진적-카나리-배포-스크립트">점진적 카나리 배포 스크립트</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># progressive-canary.sh</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="nv">APP_NAME</span><span class="o">=</span><span class="s2">"myapp"</span>
<span class="nv">NEW_VERSION</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="nv">NAMESPACE</span><span class="o">=</span><span class="s2">"production"</span>

<span class="c"># 트래픽 분배 단계 (%)</span>
<span class="nv">CANARY_STAGES</span><span class="o">=(</span>5 10 25 50 75 100<span class="o">)</span>

log<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[</span><span class="si">$(</span><span class="nb">date</span> +<span class="s1">'%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2">] </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 메트릭 수집 함수</span>
collect_metrics<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">version</span><span class="o">=</span><span class="nv">$1</span>
    <span class="nb">local </span><span class="nv">duration</span><span class="o">=</span><span class="nv">$2</span>
    
    log <span class="s2">"Collecting metrics for version </span><span class="nv">$version</span><span class="s2"> over </span><span class="nv">$duration</span><span class="s2"> seconds"</span>
    
    <span class="c"># Prometheus 메트릭 쿼리</span>
    <span class="nb">local </span><span class="nv">error_rate</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> <span class="s2">"http://prometheus:9090/api/v1/query"</span> <span class="se">\</span>
        <span class="nt">--data-urlencode</span> <span class="s2">"query=rate(http_requests_total{version=</span><span class="se">\"</span><span class="nv">$version</span><span class="se">\"</span><span class="s2">,status=~</span><span class="se">\"</span><span class="s2">5..</span><span class="se">\"</span><span class="s2">}[</span><span class="k">${</span><span class="nv">duration</span><span class="k">}</span><span class="s2">s]) / rate(http_requests_total{version=</span><span class="se">\"</span><span class="nv">$version</span><span class="se">\"</span><span class="s2">}[</span><span class="k">${</span><span class="nv">duration</span><span class="k">}</span><span class="s2">s]) * 100"</span><span class="si">)</span>
    
    <span class="nb">local </span><span class="nv">response_time</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> <span class="s2">"http://prometheus:9090/api/v1/query"</span> <span class="se">\</span>
        <span class="nt">--data-urlencode</span> <span class="s2">"query=histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{version=</span><span class="se">\"</span><span class="nv">$version</span><span class="se">\"</span><span class="s2">}[</span><span class="k">${</span><span class="nv">duration</span><span class="k">}</span><span class="s2">s]))"</span><span class="si">)</span>
    
    <span class="nb">local </span><span class="nv">cpu_usage</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> <span class="s2">"http://prometheus:9090/api/v1/query"</span> <span class="se">\</span>
        <span class="nt">--data-urlencode</span> <span class="s2">"query=avg(rate(container_cpu_usage_seconds_total{pod=~</span><span class="se">\"</span><span class="nv">$APP_NAME</span><span class="s2">-.*</span><span class="se">\"</span><span class="s2">,container=</span><span class="se">\"</span><span class="nv">$APP_NAME</span><span class="se">\"</span><span class="s2">}[</span><span class="k">${</span><span class="nv">duration</span><span class="k">}</span><span class="s2">s])) by (version)"</span><span class="si">)</span>
    
    <span class="c"># JSON 파싱 (jq 필요)</span>
    <span class="nb">local </span><span class="nv">error_rate_value</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$error_rate</span> | jq <span class="nt">-r</span> <span class="s1">'.data.result[0].value[1] // "0"'</span><span class="si">)</span>
    <span class="nb">local </span><span class="nv">response_time_value</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$response_time</span> | jq <span class="nt">-r</span> <span class="s1">'.data.result[0].value[1] // "0"'</span><span class="si">)</span>
    <span class="nb">local </span><span class="nv">cpu_usage_value</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$cpu_usage</span> | jq <span class="nt">-r</span> <span class="s1">'.data.result[0].value[1] // "0"'</span><span class="si">)</span>
    
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$error_rate_value</span><span class="s2">,</span><span class="nv">$response_time_value</span><span class="s2">,</span><span class="nv">$cpu_usage_value</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># SLI/SLO 체크</span>
check_slo<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">metrics</span><span class="o">=</span><span class="nv">$1</span>
    <span class="nb">local </span><span class="nv">version</span><span class="o">=</span><span class="nv">$2</span>
    
    <span class="nv">IFS</span><span class="o">=</span><span class="s1">','</span> <span class="nb">read</span> <span class="nt">-r</span> error_rate response_time cpu_usage <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$metrics</span><span class="s2">"</span>
    
    log <span class="s2">"SLO Check for </span><span class="nv">$version</span><span class="s2"> - Error Rate: </span><span class="nv">$error_rate</span><span class="s2">%, Response Time: </span><span class="k">${</span><span class="nv">response_time</span><span class="k">}</span><span class="s2">s, CPU: </span><span class="nv">$cpu_usage</span><span class="s2">"</span>
    
    <span class="c"># SLO 임계값</span>
    <span class="nb">local </span><span class="nv">max_error_rate</span><span class="o">=</span>1.0
    <span class="nb">local </span><span class="nv">max_response_time</span><span class="o">=</span>0.5
    <span class="nb">local </span><span class="nv">max_cpu_usage</span><span class="o">=</span>0.8
    
    <span class="k">if</span> <span class="o">((</span> <span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$error_rate</span><span class="s2"> &gt; </span><span class="nv">$max_error_rate</span><span class="s2">"</span> | bc <span class="nt">-l</span><span class="si">)</span> <span class="o">))</span><span class="p">;</span> <span class="k">then
        </span>log <span class="s2">"❌ Error rate SLO violated: </span><span class="nv">$error_rate</span><span class="s2">% &gt; </span><span class="nv">$max_error_rate</span><span class="s2">%"</span>
        <span class="k">return </span>1
    <span class="k">fi
    
    if</span> <span class="o">((</span> <span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$response_time</span><span class="s2"> &gt; </span><span class="nv">$max_response_time</span><span class="s2">"</span> | bc <span class="nt">-l</span><span class="si">)</span> <span class="o">))</span><span class="p">;</span> <span class="k">then
        </span>log <span class="s2">"❌ Response time SLO violated: </span><span class="k">${</span><span class="nv">response_time</span><span class="k">}</span><span class="s2">s &gt; </span><span class="k">${</span><span class="nv">max_response_time</span><span class="k">}</span><span class="s2">s"</span>
        <span class="k">return </span>1
    <span class="k">fi
    
    if</span> <span class="o">((</span> <span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$cpu_usage</span><span class="s2"> &gt; </span><span class="nv">$max_cpu_usage</span><span class="s2">"</span> | bc <span class="nt">-l</span><span class="si">)</span> <span class="o">))</span><span class="p">;</span> <span class="k">then
        </span>log <span class="s2">"❌ CPU usage SLO violated: </span><span class="nv">$cpu_usage</span><span class="s2"> &gt; </span><span class="nv">$max_cpu_usage</span><span class="s2">"</span>
        <span class="k">return </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"✅ All SLOs passed for version </span><span class="nv">$version</span><span class="s2">"</span>
    <span class="k">return </span>0
<span class="o">}</span>

<span class="c"># 트래픽 가중치 업데이트</span>
update_traffic_weight<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">canary_weight</span><span class="o">=</span><span class="nv">$1</span>
    <span class="nb">local </span><span class="nv">stable_weight</span><span class="o">=</span><span class="k">$((</span><span class="m">100</span> <span class="o">-</span> canary_weight<span class="k">))</span>
    
    log <span class="s2">"Updating traffic weights - Stable: </span><span class="nv">$stable_weight</span><span class="s2">%, Canary: </span><span class="nv">$canary_weight</span><span class="s2">%"</span>
    
    kubectl patch virtualservice <span class="nv">$APP_NAME</span><span class="nt">-canary</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">--type</span><span class="o">=</span><span class="s1">'json'</span> <span class="nt">-p</span><span class="o">=</span><span class="s2">"[
        {</span><span class="se">\"</span><span class="s2">op</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="s2">replace</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">path</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="s2">/spec/http/1/route/0/weight</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">value</span><span class="se">\"</span><span class="s2">: </span><span class="nv">$stable_weight</span><span class="s2">},
        {</span><span class="se">\"</span><span class="s2">op</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="s2">replace</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">path</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="s2">/spec/http/1/route/1/weight</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">value</span><span class="se">\"</span><span class="s2">: </span><span class="nv">$canary_weight</span><span class="s2">}
    ]"</span>
<span class="o">}</span>

<span class="c"># 카나리 배포 실행</span>
perform_canary_deployment<span class="o">()</span> <span class="o">{</span>
    log <span class="s2">"Starting canary deployment for version </span><span class="nv">$NEW_VERSION</span><span class="s2">"</span>
    
    <span class="c"># 1. 카나리 버전 배포 (0% 트래픽)</span>
    kubectl <span class="nb">set </span>image deployment/<span class="nv">$APP_NAME</span><span class="nt">-canary</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nv">$APP_NAME</span><span class="o">=</span><span class="nv">$APP_NAME</span>:<span class="nv">$NEW_VERSION</span>
    kubectl rollout status deployment/<span class="nv">$APP_NAME</span><span class="nt">-canary</span> <span class="nt">-n</span> <span class="nv">$NAMESPACE</span> <span class="nt">--timeout</span><span class="o">=</span>300s
    
    <span class="c"># 2. 단계별 트래픽 증가</span>
    <span class="k">for </span>stage <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CANARY_STAGES</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
        </span>log <span class="s2">"=== Canary Stage: </span><span class="nv">$stage</span><span class="s2">% traffic ==="</span>
        
        <span class="c"># 트래픽 가중치 업데이트</span>
        update_traffic_weight <span class="nv">$stage</span>
        
        <span class="c"># 안정화 대기</span>
        log <span class="s2">"Waiting for traffic stabilization..."</span>
        <span class="nb">sleep </span>60
        
        <span class="c"># 메트릭 수집 및 분석 (5분간)</span>
        <span class="nb">local </span><span class="nv">canary_metrics</span><span class="o">=</span><span class="si">$(</span>collect_metrics <span class="s2">"v</span><span class="nv">$NEW_VERSION</span><span class="s2">"</span> 300<span class="si">)</span>
        <span class="nb">local </span><span class="nv">stable_metrics</span><span class="o">=</span><span class="si">$(</span>collect_metrics <span class="s2">"v</span><span class="si">$(</span>get_current_version<span class="si">)</span><span class="s2">"</span> 300<span class="si">)</span>
        
        <span class="c"># SLO 체크</span>
        <span class="k">if</span> <span class="o">!</span> check_slo <span class="s2">"</span><span class="nv">$canary_metrics</span><span class="s2">"</span> <span class="s2">"canary"</span><span class="p">;</span> <span class="k">then
            </span>log <span class="s2">"❌ Canary version failed SLO check, rolling back..."</span>
            rollback_canary
            <span class="k">return </span>1
        <span class="k">fi</span>
        
        <span class="c"># 비교 분석</span>
        log <span class="s2">"Comparing canary vs stable metrics..."</span>
        <span class="k">if</span> <span class="o">!</span> compare_versions <span class="s2">"</span><span class="nv">$canary_metrics</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$stable_metrics</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
            </span>log <span class="s2">"❌ Canary version performance degraded, rolling back..."</span>
            rollback_canary  
            <span class="k">return </span>1
        <span class="k">fi
        
        </span>log <span class="s2">"✅ Stage </span><span class="nv">$stage</span><span class="s2">% completed successfully"</span>
        
        <span class="c"># 마지막 단계가 아니면 대기</span>
        <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$stage</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"100"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log <span class="s2">"Waiting before next stage..."</span>
            <span class="nb">sleep </span>300  <span class="c"># 5분 대기</span>
        <span class="k">fi
    done
    
    </span>log <span class="s2">"🎉 Canary deployment completed successfully"</span>
<span class="o">}</span>

<span class="c"># 롤백 함수</span>
rollback_canary<span class="o">()</span> <span class="o">{</span>
    log <span class="s2">"Rolling back canary deployment..."</span>
    update_traffic_weight 0
    log <span class="s2">"Traffic rolled back to stable version"</span>
<span class="o">}</span>

main<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$NEW_VERSION</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> &lt;new-version&gt;"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"=== Progressive Canary Deployment Started ==="</span>
    log <span class="s2">"App: </span><span class="nv">$APP_NAME</span><span class="s2">, New Version: </span><span class="nv">$NEW_VERSION</span><span class="s2">"</span>
    
    <span class="k">if</span> <span class="o">!</span> perform_canary_deployment<span class="p">;</span> <span class="k">then
        </span>log <span class="s2">"❌ Canary deployment failed"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"=== Canary Deployment Completed Successfully ==="</span>
<span class="o">}</span>

main <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="실습-aws-ec2-기반의-블루그린-배포">실습: AWS EC2 기반의 블루그린 배포</h2>

<h3 id="️-aws-인프라-구성">🏗️ AWS 인프라 구성</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. VPC 및 서브넷 생성</span>
aws ec2 create-vpc <span class="nt">--cidr-block</span> 10.0.0.0/16 <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=vpc,Tags=[{Key=Name,Value=BlueGreen-VPC}]'</span>

<span class="nv">VPC_ID</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="s2">"Name=tag:Name,Values=BlueGreen-VPC"</span> <span class="nt">--query</span> <span class="s1">'Vpcs[0].VpcId'</span> <span class="nt">--output</span> text<span class="si">)</span>

<span class="c"># 퍼블릭 서브넷 생성 (2개 AZ)</span>
aws ec2 create-subnet <span class="nt">--vpc-id</span> <span class="nv">$VPC_ID</span> <span class="nt">--cidr-block</span> 10.0.1.0/24 <span class="nt">--availability-zone</span> us-west-2a <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=subnet,Tags=[{Key=Name,Value=Public-Subnet-1}]'</span>

aws ec2 create-subnet <span class="nt">--vpc-id</span> <span class="nv">$VPC_ID</span> <span class="nt">--cidr-block</span> 10.0.2.0/24 <span class="nt">--availability-zone</span> us-west-2b <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=subnet,Tags=[{Key=Name,Value=Public-Subnet-2}]'</span>

<span class="c"># 프라이빗 서브넷 생성 (2개 AZ)</span>
aws ec2 create-subnet <span class="nt">--vpc-id</span> <span class="nv">$VPC_ID</span> <span class="nt">--cidr-block</span> 10.0.11.0/24 <span class="nt">--availability-zone</span> us-west-2a <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=subnet,Tags=[{Key=Name,Value=Private-Subnet-1}]'</span>

aws ec2 create-subnet <span class="nt">--vpc-id</span> <span class="nv">$VPC_ID</span> <span class="nt">--cidr-block</span> 10.0.12.0/24 <span class="nt">--availability-zone</span> us-west-2b <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=subnet,Tags=[{Key=Name,Value=Private-Subnet-2}]'</span>

<span class="c"># 인터넷 게이트웨이 생성 및 연결</span>
aws ec2 create-internet-gateway <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=internet-gateway,Tags=[{Key=Name,Value=BlueGreen-IGW}]'</span>

<span class="nv">IGW_ID</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-internet-gateways <span class="nt">--filters</span> <span class="s2">"Name=tag:Name,Values=BlueGreen-IGW"</span> <span class="nt">--query</span> <span class="s1">'InternetGateways[0].InternetGatewayId'</span> <span class="nt">--output</span> text<span class="si">)</span>

aws ec2 attach-internet-gateway <span class="nt">--vpc-id</span> <span class="nv">$VPC_ID</span> <span class="nt">--internet-gateway-id</span> <span class="nv">$IGW_ID</span>
</code></pre></div></div>

<h4 id="application-load-balancer-구성">Application Load Balancer 구성</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"LoadBalancerName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"myapp-bluegreen-alb"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Scheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"internet-facing"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"application"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"IpAddressType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ipv4"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Subnets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"subnet-12345678"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"subnet-87654321"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"SecurityGroups"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"sg-12345678"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"Tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Name"</span><span class="p">,</span><span class="w"> 
      </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MyApp-BlueGreen-ALB"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Environment"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Production"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="블루그린-배포-자동화-스크립트">블루그린 배포 자동화 스크립트</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># aws-bluegreen-deploy.sh</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># 설정 변수</span>
<span class="nv">APP_NAME</span><span class="o">=</span><span class="s2">"myapp"</span>
<span class="nv">NEW_VERSION</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="nv">AWS_REGION</span><span class="o">=</span><span class="s2">"us-west-2"</span>
<span class="nv">VPC_ID</span><span class="o">=</span><span class="s2">"vpc-12345678"</span>
<span class="nv">ALB_ARN</span><span class="o">=</span><span class="s2">"arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/myapp-alb/1234567890123456"</span>
<span class="nv">BLUE_TG_ARN</span><span class="o">=</span><span class="s2">"arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/myapp-blue/1234567890123456"</span>
<span class="nv">GREEN_TG_ARN</span><span class="o">=</span><span class="s2">"arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/myapp-green/1234567890123456"</span>
<span class="nv">LISTENER_ARN</span><span class="o">=</span><span class="s2">"arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/myapp-alb/1234567890123456/1234567890123456"</span>

<span class="c"># 현재 활성 환경 확인</span>
get_active_environment<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">listener_rules</span><span class="o">=</span><span class="si">$(</span>aws elbv2 describe-rules <span class="nt">--listener-arn</span> <span class="nv">$LISTENER_ARN</span> <span class="nt">--region</span> <span class="nv">$AWS_REGION</span><span class="si">)</span>
    <span class="nb">local </span><span class="nv">active_target_group</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$listener_rules</span> | jq <span class="nt">-r</span> <span class="s1">'.Rules[] | select(.Priority == "100") | .Actions[0].TargetGroupArn'</span><span class="si">)</span>
    
    <span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$active_target_group</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"</span><span class="nv">$BLUE_TG_ARN</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"blue"</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"green"</span>  
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Auto Scaling Group에 새 Launch Template 적용</span>
update_asg_launch_template<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">environment</span><span class="o">=</span><span class="nv">$1</span>
    <span class="nb">local </span><span class="nv">new_ami</span><span class="o">=</span><span class="nv">$2</span>
    
    <span class="nb">local </span><span class="nv">asg_name</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">APP_NAME</span><span class="k">}</span><span class="s2">-</span><span class="k">${</span><span class="nv">environment</span><span class="k">}</span><span class="s2">-asg"</span>
    <span class="nb">local </span><span class="nv">lt_name</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">APP_NAME</span><span class="k">}</span><span class="s2">-</span><span class="k">${</span><span class="nv">environment</span><span class="k">}</span><span class="s2">-lt"</span>
    
    <span class="c"># 새 Launch Template 버전 생성</span>
    aws ec2 create-launch-template-version <span class="se">\</span>
        <span class="nt">--launch-template-name</span> <span class="nv">$lt_name</span> <span class="se">\</span>
        <span class="nt">--source-version</span> <span class="s1">'$Latest'</span> <span class="se">\</span>
        <span class="nt">--launch-template-data</span> <span class="s2">"{</span><span class="se">\"</span><span class="s2">ImageId</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="nv">$new_ami</span><span class="se">\"</span><span class="s2">}"</span> <span class="se">\</span>
        <span class="nt">--region</span> <span class="nv">$AWS_REGION</span>
    
    <span class="c"># ASG에 새 Launch Template 버전 적용</span>
    <span class="nb">local </span><span class="nv">latest_version</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-launch-template-versions <span class="se">\</span>
        <span class="nt">--launch-template-name</span> <span class="nv">$lt_name</span> <span class="se">\</span>
        <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="se">\</span>
        <span class="nt">--query</span> <span class="s1">'LaunchTemplateVersions[0].VersionNumber'</span> <span class="se">\</span>
        <span class="nt">--output</span> text<span class="si">)</span>
    
    aws autoscaling update-auto-scaling-group <span class="se">\</span>
        <span class="nt">--auto-scaling-group-name</span> <span class="nv">$asg_name</span> <span class="se">\</span>
        <span class="nt">--launch-template</span> <span class="nv">LaunchTemplateName</span><span class="o">=</span><span class="nv">$lt_name</span>,Version<span class="o">=</span><span class="nv">$latest_version</span> <span class="se">\</span>
        <span class="nt">--region</span> <span class="nv">$AWS_REGION</span>
    
    log <span class="s2">"Updated ASG </span><span class="nv">$asg_name</span><span class="s2"> with Launch Template version </span><span class="nv">$latest_version</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 인스턴스 교체 (Rolling Replacement)</span>
perform_instance_refresh<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">environment</span><span class="o">=</span><span class="nv">$1</span>
    <span class="nb">local </span><span class="nv">asg_name</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">APP_NAME</span><span class="k">}</span><span class="s2">-</span><span class="k">${</span><span class="nv">environment</span><span class="k">}</span><span class="s2">-asg"</span>
    
    log <span class="s2">"Starting instance refresh for </span><span class="nv">$asg_name</span><span class="s2">"</span>
    
    <span class="nb">local </span><span class="nv">refresh_id</span><span class="o">=</span><span class="si">$(</span>aws autoscaling start-instance-refresh <span class="se">\</span>
        <span class="nt">--auto-scaling-group-name</span> <span class="nv">$asg_name</span> <span class="se">\</span>
        <span class="nt">--preferences</span> <span class="s1">'{
            "InstanceWarmup": 300,
            "MinHealthyPercentage": 50,
            "CheckpointPercentages": [20, 50, 100],
            "CheckpointDelay": 600
        }'</span> <span class="se">\</span>
        <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="se">\</span>
        <span class="nt">--query</span> <span class="s1">'InstanceRefreshId'</span> <span class="se">\</span>
        <span class="nt">--output</span> text<span class="si">)</span>
    
    log <span class="s2">"Instance refresh started with ID: </span><span class="nv">$refresh_id</span><span class="s2">"</span>
    
    <span class="c"># 인스턴스 교체 완료 대기</span>
    <span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do
        </span><span class="nb">local </span><span class="nv">status</span><span class="o">=</span><span class="si">$(</span>aws autoscaling describe-instance-refreshes <span class="se">\</span>
            <span class="nt">--auto-scaling-group-name</span> <span class="nv">$asg_name</span> <span class="se">\</span>
            <span class="nt">--instance-refresh-ids</span> <span class="nv">$refresh_id</span> <span class="se">\</span>
            <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="se">\</span>
            <span class="nt">--query</span> <span class="s1">'InstanceRefreshes[0].Status'</span> <span class="se">\</span>
            <span class="nt">--output</span> text<span class="si">)</span>
        
        log <span class="s2">"Instance refresh status: </span><span class="nv">$status</span><span class="s2">"</span>
        
        <span class="k">case</span> <span class="nv">$status</span> <span class="k">in</span>
            <span class="s2">"Successful"</span><span class="p">)</span>
                log <span class="s2">"✅ Instance refresh completed successfully"</span>
                <span class="nb">break</span>
                <span class="p">;;</span>
            <span class="s2">"Failed"</span><span class="p">|</span><span class="s2">"Cancelled"</span><span class="p">)</span>
                error <span class="s2">"❌ Instance refresh failed with status: </span><span class="nv">$status</span><span class="s2">"</span>
                <span class="k">return </span>1
                <span class="p">;;</span>
            <span class="s2">"InProgress"</span><span class="p">|</span><span class="s2">"Pending"</span><span class="p">)</span>
                log <span class="s2">"Instance refresh in progress, waiting..."</span>
                <span class="nb">sleep </span>60
                <span class="p">;;</span>
        <span class="k">esac</span>
    <span class="k">done</span>
<span class="o">}</span>

<span class="c"># 헬스체크 수행</span>
health_check_environment<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">environment</span><span class="o">=</span><span class="nv">$1</span>
    <span class="nb">local </span>target_group_arn
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$environment</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"blue"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">target_group_arn</span><span class="o">=</span><span class="nv">$BLUE_TG_ARN</span>
    <span class="k">else
        </span><span class="nv">target_group_arn</span><span class="o">=</span><span class="nv">$GREEN_TG_ARN</span>
    <span class="k">fi
    
    </span>log <span class="s2">"Performing health check for </span><span class="nv">$environment</span><span class="s2"> environment"</span>
    
    <span class="nb">local </span><span class="nv">max_attempts</span><span class="o">=</span>30
    <span class="nb">local </span><span class="nv">attempt</span><span class="o">=</span>1
    
    <span class="k">while</span> <span class="o">[</span> <span class="nv">$attempt</span> <span class="nt">-le</span> <span class="nv">$max_attempts</span> <span class="o">]</span><span class="p">;</span> <span class="k">do
        </span><span class="nb">local </span><span class="nv">healthy_targets</span><span class="o">=</span><span class="si">$(</span>aws elbv2 describe-target-health <span class="se">\</span>
            <span class="nt">--target-group-arn</span> <span class="nv">$target_group_arn</span> <span class="se">\</span>
            <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="se">\</span>
            <span class="nt">--query</span> <span class="s1">'TargetHealthDescriptions[?TargetHealth.State==`healthy`] | length(@)'</span><span class="si">)</span>
        
        <span class="nb">local </span><span class="nv">total_targets</span><span class="o">=</span><span class="si">$(</span>aws elbv2 describe-target-health <span class="se">\</span>
            <span class="nt">--target-group-arn</span> <span class="nv">$target_group_arn</span> <span class="se">\</span>
            <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="se">\</span>
            <span class="nt">--query</span> <span class="s1">'TargetHealthDescriptions | length(@)'</span><span class="si">)</span>
        
        log <span class="s2">"Health check attempt </span><span class="nv">$attempt</span><span class="s2">: </span><span class="nv">$healthy_targets</span><span class="s2">/</span><span class="nv">$total_targets</span><span class="s2"> targets healthy"</span>
        
        <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$healthy_targets</span><span class="s2">"</span> <span class="nt">-gt</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$healthy_targets</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="s2">"</span><span class="nv">$total_targets</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span>log <span class="s2">"✅ All targets are healthy in </span><span class="nv">$environment</span><span class="s2"> environment"</span>
            <span class="k">return </span>0
        <span class="k">fi
        
        </span><span class="nb">sleep </span>30
        <span class="o">((</span>attempt++<span class="o">))</span>
    <span class="k">done
    
    </span>error <span class="s2">"❌ Health check failed for </span><span class="nv">$environment</span><span class="s2"> environment after </span><span class="nv">$max_attempts</span><span class="s2"> attempts"</span>
    <span class="k">return </span>1
<span class="o">}</span>

<span class="c"># 트래픽 전환</span>
switch_traffic<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">target_environment</span><span class="o">=</span><span class="nv">$1</span>
    <span class="nb">local </span>target_group_arn
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$target_environment</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"blue"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">target_group_arn</span><span class="o">=</span><span class="nv">$BLUE_TG_ARN</span>
    <span class="k">else
        </span><span class="nv">target_group_arn</span><span class="o">=</span><span class="nv">$GREEN_TG_ARN</span>
    <span class="k">fi
    
    </span>log <span class="s2">"Switching traffic to </span><span class="nv">$target_environment</span><span class="s2"> environment"</span>
    
    aws elbv2 modify-rule <span class="se">\</span>
        <span class="nt">--rule-arn</span> <span class="si">$(</span>aws elbv2 describe-rules <span class="nt">--listener-arn</span> <span class="nv">$LISTENER_ARN</span> <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="nt">--query</span> <span class="s1">'Rules[?Priority==`100`].RuleArn'</span> <span class="nt">--output</span> text<span class="si">)</span> <span class="se">\</span>
        <span class="nt">--actions</span> <span class="nv">Type</span><span class="o">=</span>forward,TargetGroupArn<span class="o">=</span><span class="nv">$target_group_arn</span> <span class="se">\</span>
        <span class="nt">--region</span> <span class="nv">$AWS_REGION</span>
    
    log <span class="s2">"✅ Traffic switched to </span><span class="nv">$target_environment</span><span class="s2"> environment"</span>
<span class="o">}</span>

<span class="c"># 배포 검증</span>
validate_deployment<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">environment</span><span class="o">=</span><span class="nv">$1</span>
    
    log <span class="s2">"Validating deployment in </span><span class="nv">$environment</span><span class="s2"> environment"</span>
    
    <span class="c"># ALB DNS 이름 가져오기</span>
    <span class="nb">local </span><span class="nv">alb_dns</span><span class="o">=</span><span class="si">$(</span>aws elbv2 describe-load-balancers <span class="se">\</span>
        <span class="nt">--load-balancer-arns</span> <span class="nv">$ALB_ARN</span> <span class="se">\</span>
        <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="se">\</span>
        <span class="nt">--query</span> <span class="s1">'LoadBalancers[0].DNSName'</span> <span class="se">\</span>
        <span class="nt">--output</span> text<span class="si">)</span>
    
    <span class="c"># 애플리케이션 버전 확인</span>
    <span class="nb">local </span><span class="nv">app_version</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> <span class="nt">-f</span> http://<span class="nv">$alb_dns</span>/version 2&gt;/dev/null <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"unknown"</span><span class="si">)</span>
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$app_version</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"</span><span class="nv">$NEW_VERSION</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log <span class="s2">"✅ Application version validated: </span><span class="nv">$app_version</span><span class="s2">"</span>
    <span class="k">else
        </span>error <span class="s2">"❌ Version mismatch. Expected: </span><span class="nv">$NEW_VERSION</span><span class="s2">, Got: </span><span class="nv">$app_version</span><span class="s2">"</span>
        <span class="k">return </span>1
    <span class="k">fi</span>
    
    <span class="c"># 기본 기능 테스트</span>
    <span class="nb">local </span><span class="nv">health_status</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> <span class="nt">-o</span> /dev/null <span class="nt">-w</span> <span class="s2">"%{http_code}"</span> http://<span class="nv">$alb_dns</span>/health<span class="si">)</span>
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$health_status</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"200"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>log <span class="s2">"✅ Application health check passed"</span>
    <span class="k">else
        </span>error <span class="s2">"❌ Application health check failed. Status code: </span><span class="nv">$health_status</span><span class="s2">"</span>
        <span class="k">return </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"✅ Deployment validation completed successfully"</span>
<span class="o">}</span>

<span class="c"># 롤백 수행</span>
rollback_deployment<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span><span class="nv">current_environment</span><span class="o">=</span><span class="si">$(</span>get_active_environment<span class="si">)</span>
    <span class="nb">local </span>rollback_environment
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$current_environment</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"blue"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">rollback_environment</span><span class="o">=</span><span class="s2">"green"</span>
    <span class="k">else
        </span><span class="nv">rollback_environment</span><span class="o">=</span><span class="s2">"blue"</span>
    <span class="k">fi
    
    </span>log <span class="s2">"Rolling back from </span><span class="nv">$current_environment</span><span class="s2"> to </span><span class="nv">$rollback_environment</span><span class="s2">"</span>
    
    switch_traffic <span class="nv">$rollback_environment</span>
    
    log <span class="s2">"✅ Rollback completed"</span>
<span class="o">}</span>

<span class="c"># 메인 배포 로직</span>
main<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$NEW_VERSION</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> &lt;new-version&gt;"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"=== AWS EC2 Blue-Green Deployment Started ==="</span>
    log <span class="s2">"Application: </span><span class="nv">$APP_NAME</span><span class="s2">"</span>
    log <span class="s2">"New Version: </span><span class="nv">$NEW_VERSION</span><span class="s2">"</span>
    log <span class="s2">"Region: </span><span class="nv">$AWS_REGION</span><span class="s2">"</span>
    
    <span class="c"># 1. 현재 활성 환경 확인</span>
    <span class="nb">local </span><span class="nv">active_env</span><span class="o">=</span><span class="si">$(</span>get_active_environment<span class="si">)</span>
    <span class="nb">local </span>inactive_env
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$active_env</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"blue"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">inactive_env</span><span class="o">=</span><span class="s2">"green"</span>
    <span class="k">else
        </span><span class="nv">inactive_env</span><span class="o">=</span><span class="s2">"blue"</span>
    <span class="k">fi
    
    </span>log <span class="s2">"Current active environment: </span><span class="nv">$active_env</span><span class="s2">"</span>
    log <span class="s2">"Deploying to inactive environment: </span><span class="nv">$inactive_env</span><span class="s2">"</span>
    
    <span class="c"># 2. 새 AMI ID 가져오기 (이미 빌드된 AMI 사용)</span>
    <span class="nb">local </span><span class="nv">new_ami</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-images <span class="se">\</span>
        <span class="nt">--filters</span> <span class="s2">"Name=tag:Version,Values=</span><span class="nv">$NEW_VERSION</span><span class="s2">"</span> <span class="s2">"Name=tag:Application,Values=</span><span class="nv">$APP_NAME</span><span class="s2">"</span> <span class="se">\</span>
        <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="se">\</span>
        <span class="nt">--query</span> <span class="s1">'Images[0].ImageId'</span> <span class="se">\</span>
        <span class="nt">--output</span> text<span class="si">)</span>
    
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$new_ami</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"None"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$new_ami</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"❌ AMI for version </span><span class="nv">$NEW_VERSION</span><span class="s2"> not found"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"Using AMI: </span><span class="nv">$new_ami</span><span class="s2"> for version </span><span class="nv">$NEW_VERSION</span><span class="s2">"</span>
    
    <span class="c"># 3. 비활성 환경에 새 버전 배포</span>
    <span class="k">if</span> <span class="o">!</span> update_asg_launch_template <span class="nv">$inactive_env</span> <span class="nv">$new_ami</span><span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"❌ Failed to update launch template"</span>
        <span class="nb">exit </span>1
    <span class="k">fi
    
    if</span> <span class="o">!</span> perform_instance_refresh <span class="nv">$inactive_env</span><span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"❌ Failed to refresh instances"</span>
        <span class="nb">exit </span>1
    <span class="k">fi</span>
    
    <span class="c"># 4. 비활성 환경 헬스체크</span>
    <span class="k">if</span> <span class="o">!</span> health_check_environment <span class="nv">$inactive_env</span><span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"❌ Health check failed for </span><span class="nv">$inactive_env</span><span class="s2"> environment"</span>
        <span class="nb">exit </span>1
    <span class="k">fi</span>
    
    <span class="c"># 5. 트래픽 전환</span>
    <span class="k">if</span> <span class="o">!</span> switch_traffic <span class="nv">$inactive_env</span><span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"❌ Failed to switch traffic"</span>
        rollback_deployment
        <span class="nb">exit </span>1
    <span class="k">fi</span>
    
    <span class="c"># 6. 배포 검증</span>
    <span class="nb">sleep </span>60  <span class="c"># 트래픽 안정화 대기</span>
    
    <span class="k">if</span> <span class="o">!</span> validate_deployment <span class="nv">$inactive_env</span><span class="p">;</span> <span class="k">then
        </span>error <span class="s2">"❌ Deployment validation failed"</span>
        rollback_deployment
        <span class="nb">exit </span>1
    <span class="k">fi
    
    </span>log <span class="s2">"🎉 Blue-Green deployment completed successfully!"</span>
    log <span class="s2">"New active environment: </span><span class="nv">$inactive_env</span><span class="s2">"</span>
    log <span class="s2">"Previous environment (</span><span class="nv">$active_env</span><span class="s2">) is now inactive and ready for next deployment"</span>
<span class="o">}</span>

<span class="c"># 유틸리티 함수</span>
log<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[</span><span class="si">$(</span><span class="nb">date</span> +<span class="s1">'%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2">] </span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

error<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"[</span><span class="si">$(</span><span class="nb">date</span> +<span class="s1">'%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2">] ERROR: </span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;2
<span class="o">}</span>

<span class="c"># 스크립트 실행</span>
main <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="정리-및-모범-사례">정리 및 모범 사례</h2>

<h3 id="-배포-전략-선택-가이드">📊 배포 전략 선택 가이드</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 배포 전략 선택 매트릭스</span>
상황                     | 권장 전략        | 이유
<span class="o">====================</span>|<span class="o">===============</span>|<span class="o">==============================</span>
개발/테스트 환경         | Recreate      | 단순함, 리소스 절약
스테이지 환경           | Rolling       | 프로덕션과 유사한 환경
프로덕션 <span class="o">(</span>위험 높음<span class="o">)</span>     | Blue-Green    | 즉시 롤백, 완전한 검증
프로덕션 <span class="o">(</span>위험 보통<span class="o">)</span>     | Canary        | 점진적 검증, 리스크 분산
프로덕션 <span class="o">(</span>위험 낮음<span class="o">)</span>     | Rolling       | 효율적, 리소스 최적화
레거시 시스템           | Blue-Green    | 안전성 우선
마이크로서비스          | Canary        | 서비스별 독립 배포
</code></pre></div></div>

<h3 id="-모범-사례">🔧 모범 사례</h3>

<h4 id="1-배포-준비">1. 배포 준비</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 배포 전 체크리스트</span>
✅ 백업 완료
✅ 롤백 계획 수립
✅ 모니터링 준비
✅ 팀 커뮤니케이션
✅ 헬스체크 엔드포인트 구현
✅ 설정 검증
</code></pre></div></div>

<h4 id="2-모니터링-및-알람">2. 모니터링 및 알람</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 핵심 메트릭</span>
- 에러율 <span class="o">(</span>&lt; 1%<span class="o">)</span>
- 응답 시간 <span class="o">(</span>&lt; 500ms<span class="o">)</span>
- 처리량 <span class="o">(</span>baseline 대비<span class="o">)</span>
- 리소스 사용률 <span class="o">(</span>&lt; 80%<span class="o">)</span>
- 가용성 <span class="o">(&gt;</span> 99.9%<span class="o">)</span>
</code></pre></div></div>

<h4 id="3-자동화-원칙">3. 자동화 원칙</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 모든 것을 자동화</span>
1. 빌드 프로세스
2. 테스트 실행
3. 배포 프로세스
4. 헬스체크
5. 롤백 절차
6. 알림 및 로깅
</code></pre></div></div>

<p>현대적인 배포 전략을 마스터하셨나요? 안정적이고 효율적인 배포로 서비스 품질을 한 단계 높여보세요! 🚀</p>]]></content><author><name>DevOps Engineer</name></author><category term="DevOps" /><category term="Deployment" /><category term="deployment" /><category term="ci-cd" /><category term="blue-green" /><category term="canary" /><category term="rolling-update" /><category term="kubernetes" /><category term="aws" /><category term="automation" /><summary type="html"><![CDATA[현대적인 소프트웨어 개발에서 배포는 단순히 코드를 서버에 올리는 것이 아닙니다. 안정적이고 예측 가능한 배포 전략을 통해 서비스 중단을 최소화하고 사용자 경험을 보장하는 것이 핵심입니다. 3-1 배포 | Deployment 3-1-1 배포 자동화 | Deployment Automation 배포 자동화는 소프트웨어 릴리스 과정을 체계화하고 인간의 실수를 최소화하여 안정적인 서비스 운영을 보장합니다. 🚀 배포 자동화의 핵심 개념 # 배포 자동화 구성 요소 1. 소스 코드 관리 (SCM) - Git, SVN - 브랜치 전략 (Git Flow, GitHub Flow) 2. 빌드 자동화 - 컴파일, 패키징 - 테스트 실행 - 아티팩트 생성 3. 배포 파이프라인 - 단계별 배포 (Dev → Staging → Production) - 승인 프로세스 - 롤백 메커니즘 4. 인프라 자동화 - IaC (Infrastructure as Code) - 컨테이너화 - 오케스트레이션 CI/CD 파이프라인 설계 # .gitlab-ci.yml - GitLab CI/CD 파이프라인 stages: - build - test - security - deploy-staging - deploy-production variables: DOCKER_DRIVER: overlay2 DOCKER_HOST: tcp://docker:2376 DOCKER_TLS_CERTDIR: "/certs" before_script: - echo "Pipeline started at $(date)" - docker info # 빌드 단계 build: stage: build image: node:16-alpine script: - npm ci --only=production - npm run build - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA . - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA artifacts: paths: - dist/ expire_in: 1 hour only: - main - develop # 테스트 단계 unit-test: stage: test image: node:16-alpine script: - npm ci - npm run test:unit - npm run test:coverage artifacts: reports: junit: junit.xml coverage_report: coverage_format: cobertura path: coverage/cobertura-coverage.xml coverage: '/Lines\s*:\s*(\d+\.\d+)%/' integration-test: stage: test services: - postgres:13 - redis:6 variables: POSTGRES_DB: testdb POSTGRES_USER: test POSTGRES_PASSWORD: test script: - npm run test:integration only: - main # 보안 스캔 security-scan: stage: security image: owasp/zap2docker-stable script: - zap-baseline.py -t http://localhost:3000 -J zap-report.json - npm audit --audit-level high artifacts: reports: sast: zap-report.json allow_failure: true # 스테이징 배포 deploy-staging: stage: deploy-staging image: alpine/helm:3.8.0 script: - helm upgrade --install myapp-staging ./helm-chart --namespace staging --set image.tag=$CI_COMMIT_SHA --set ingress.host=staging.myapp.com --wait environment: name: staging url: https://staging.myapp.com only: - develop # 프로덕션 배포 (수동 승인 필요) deploy-production: stage: deploy-production image: alpine/helm:3.8.0 script: - helm upgrade --install myapp-prod ./helm-chart --namespace production --set image.tag=$CI_COMMIT_SHA --set ingress.host=myapp.com --set replicas=3 --wait environment: name: production url: https://myapp.com when: manual only: - main Jenkins 파이프라인 구성 // Jenkinsfile - Jenkins 선언적 파이프라인 pipeline { agent any environment { DOCKER_REGISTRY = 'your-registry.com' APP_NAME = 'myapp' KUBECONFIG = credentials('kubeconfig-prod') } stages { stage('Checkout') { steps { checkout scm script { env.GIT_COMMIT_SHORT = sh( script: 'git rev-parse --short HEAD', returnStdout: true ).trim() } } } stage('Build &amp; Test') { parallel { stage('Unit Tests') { steps { sh 'npm ci' sh 'npm run test:unit' } post { always { publishTestResults testResultsPattern: 'test-results.xml' publishCoverage adapters: [ coberturaAdapter('coverage/cobertura-coverage.xml') ] } } } stage('Security Scan') { steps { sh 'npm audit' sh 'docker run --rm -v $(pwd):/app clair-scanner --ip $(hostname -i) myapp:latest' } } } } stage('Build Docker Image') { steps { script { def image = docker.build("${DOCKER_REGISTRY}/${APP_NAME}:${env.GIT_COMMIT_SHORT}") docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-registry-credentials') { image.push() image.push('latest') } } } } stage('Deploy to Staging') { steps { sh """ helm upgrade --install ${APP_NAME}-staging ./helm-chart \\ --namespace staging \\ --set image.tag=${env.GIT_COMMIT_SHORT} \\ --wait --timeout=600s """ } } stage('Integration Tests') { steps { sh 'npm run test:integration -- --env=staging' } } stage('Deploy to Production') { when { branch 'main' } input { message "Deploy to production?" ok "Deploy" parameters { choice(name: 'DEPLOYMENT_STRATEGY', choices: ['rolling', 'blue-green', 'canary']) } } steps { script { switch(params.DEPLOYMENT_STRATEGY) { case 'blue-green': sh './scripts/blue-green-deploy.sh ${env.GIT_COMMIT_SHORT}' break case 'canary': sh './scripts/canary-deploy.sh ${env.GIT_COMMIT_SHORT}' break default: sh """ helm upgrade --install ${APP_NAME}-prod ./helm-chart \\ --namespace production \\ --set image.tag=${env.GIT_COMMIT_SHORT} \\ --wait --timeout=600s """ } } } } } post { failure { script { slackSend( channel: '#deployments', color: 'danger', message: "❌ Deployment failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}" ) } } success { script { slackSend( channel: '#deployments', color: 'good', message: "✅ Deployment successful: ${env.JOB_NAME} ${env.BUILD_NUMBER}" ) } } } } 3-1-2 배포 자동화 도구 선택 | Deployment Automation Tools 🛠️ 도구 비교 매트릭스 # CI/CD 플랫폼 비교 GitLab CI Jenkins GitHub Actions Azure DevOps AWS CodePipeline 설정 복잡도 낮음 중간 낮음 중간 높음 클라우드 통합 우수 보통 우수 우수 우수 온프레미스 지원 우수 우수 제한적 우수 불가 비용 무료/유료 오픈소스 무료/유료 유료 사용량기반 확장성 우수 우수 우수 우수 우수 커뮤니티 지원 우수 최고 우수 보통 보통 # 컨테이너 오케스트레이션 Kubernetes Docker Swarm OpenShift Nomad ECS/Fargate 학습 곡선 가파름 완만 중간 완만 완만 기능 풍부함 최고 기본 우수 기본 기본 클라우드 지원 우수 보통 우수 보통 AWS전용 커뮤니티 최고 감소 보통 성장 AWS생태계 GitHub Actions 워크플로우 # .github/workflows/deploy.yml name: Deploy Application on: push: branches: [main, develop] pull_request: branches: [main] env: REGISTRY: ghcr.io IMAGE_NAME: $ jobs: test: runs-on: ubuntu-latest strategy: matrix: node-version: [16.x, 18.x] steps: - uses: actions/checkout@v3 - name: Setup Node.js $ uses: actions/setup-node@v3 with: node-version: $ cache: 'npm' - name: Install dependencies run: npm ci - name: Run tests run: | npm run test:unit npm run test:integration - name: Upload coverage reports uses: codecov/codecov-action@v3 with: file: ./coverage/lcov.info build: needs: test runs-on: ubuntu-latest outputs: image: $ digest: $ steps: - name: Checkout repository uses: actions/checkout@v3 - name: Setup Docker Buildx uses: docker/setup-buildx-action@v2 - name: Log in to Container Registry uses: docker/login-action@v2 with: registry: $ username: $ password: $ - name: Extract metadata id: meta uses: docker/metadata-action@v4 with: images: $/$ tags: | type=ref,event=branch type=ref,event=pr type=sha,prefix=- - name: Build and push Docker image id: build uses: docker/build-push-action@v4 with: context: . push: true tags: $ labels: $ cache-from: type=gha cache-to: type=gha,mode=max deploy-staging: if: github.ref == 'refs/heads/develop' needs: build runs-on: ubuntu-latest environment: staging steps: - name: Deploy to staging uses: azure/k8s-deploy@v1 with: manifests: | k8s/staging/deployment.yaml k8s/staging/service.yaml images: $@$ namespace: staging deploy-production: if: github.ref == 'refs/heads/main' needs: build runs-on: ubuntu-latest environment: production steps: - name: Deploy to production uses: azure/k8s-deploy@v1 with: manifests: | k8s/production/deployment.yaml k8s/production/service.yaml images: $@$ namespace: production strategy: blue-green ArgoCD GitOps 워크플로우 # argocd-app.yaml - ArgoCD Application 정의 apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: myapp-production namespace: argocd finalizers: - resources-finalizer.argocd.argoproj.io spec: project: default source: repoURL: https://github.com/company/myapp-k8s-manifests targetRevision: HEAD path: overlays/production destination: server: https://kubernetes.default.svc namespace: production syncPolicy: automated: prune: true selfHeal: true allowEmpty: false syncOptions: - CreateNamespace=true - PrunePropagationPolicy=foreground - PruneLast=true revisionHistoryLimit: 10 # Health checks ignoreDifferences: - group: apps kind: Deployment jsonPointers: - /spec/replicas --- # kustomization.yaml - Kustomize 설정 apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization namespace: production resources: - ../../base patchesStrategicMerge: - deployment-patch.yaml - service-patch.yaml images: - name: myapp newTag: v1.2.3 replicas: - name: myapp-deployment count: 3 configMapGenerator: - name: myapp-config files: - config/production.yaml secretGenerator: - name: myapp-secrets files: - secrets/database.env 3-2 배포 전략 | Deployment Strategies 3-2-1 가장 간단한 배포 | Recreate Deployment Recreate 배포는 기존 버전을 완전히 중단한 후 새 버전을 시작하는 가장 단순한 배포 방식입니다. 📋 Recreate 배포 특징 # 장점 - 구현이 간단함 - 리소스 사용량이 적음 - 버전 간 충돌 없음 - 데이터베이스 마이그레이션에 유리 # 단점 - 서비스 중단 시간 발생 - 사용자 경험 저하 - 롤백 시간이 김 Kubernetes Recreate 배포 # recreate-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: myapp-recreate namespace: default spec: replicas: 3 strategy: type: Recreate # Recreate 전략 사용 selector: matchLabels: app: myapp template: metadata: labels: app: myapp version: v2.0.0 spec: containers: - name: myapp image: myapp:v2.0.0 ports: - containerPort: 8080 # 헬스체크 설정 livenessProbe: httpGet: path: /health port: 8080 initialDelaySeconds: 30 periodSeconds: 10 readinessProbe: httpGet: path: /ready port: 8080 initialDelaySeconds: 5 periodSeconds: 5 resources: requests: memory: "256Mi" cpu: "250m" limits: memory: "512Mi" cpu: "500m" Recreate 배포 스크립트 #!/bin/bash # recreate-deploy.sh set -e APP_NAME="myapp" NEW_VERSION="$1" NAMESPACE="production" if [ -z "$NEW_VERSION" ]; then echo "Usage: $0 &lt;new-version&gt;" exit 1 fi echo "=== Recreate Deployment Started ===" echo "App: $APP_NAME" echo "New Version: $NEW_VERSION" echo "Namespace: $NAMESPACE" echo "Time: $(date)" # 1. 현재 배포 상태 확인 echo "Current deployment status:" kubectl get deployment $APP_NAME -n $NAMESPACE # 2. 헬스체크 엔드포인트 확인 echo "Checking current health status..." kubectl get pods -n $NAMESPACE -l app=$APP_NAME # 3. 트래픽 중단 (로드밸런서에서 제거) echo "Removing from load balancer..." kubectl patch service $APP_NAME -n $NAMESPACE -p '{"spec":{"selector":{"app":"maintenance"}}}' # 4. 기존 파드 종료 대기 echo "Stopping existing pods..." kubectl delete pods -n $NAMESPACE -l app=$APP_NAME --grace-period=30 # 5. 새 버전으로 업데이트 echo "Updating to new version: $NEW_VERSION" kubectl set image deployment/$APP_NAME -n $NAMESPACE container=$APP_NAME:$NEW_VERSION # 6. 배포 완료 대기 echo "Waiting for deployment to complete..." kubectl rollout status deployment/$APP_NAME -n $NAMESPACE --timeout=300s # 7. 헬스체크 확인 echo "Performing health checks..." sleep 30 READY_REPLICAS=$(kubectl get deployment $APP_NAME -n $NAMESPACE -o jsonpath='{.status.readyReplicas}') DESIRED_REPLICAS=$(kubectl get deployment $APP_NAME -n $NAMESPACE -o jsonpath='{.spec.replicas}') if [ "$READY_REPLICAS" = "$DESIRED_REPLICAS" ]; then echo "Health check passed: $READY_REPLICAS/$DESIRED_REPLICAS pods ready" else echo "Health check failed: $READY_REPLICAS/$DESIRED_REPLICAS pods ready" exit 1 fi # 8. 트래픽 복원 echo "Restoring traffic..." kubectl patch service $APP_NAME -n $NAMESPACE -p '{"spec":{"selector":{"app":"'$APP_NAME'"}}}' echo "=== Recreate Deployment Completed Successfully ===" 3-2-2 롤링 업데이트 | Rolling Update 롤링 업데이트는 서비스 중단 없이 점진적으로 새 버전을 배포하는 방식입니다. 🔄 롤링 업데이트 원리 # rolling-update-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: myapp-rolling spec: replicas: 6 strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 1 # 최대 1개 파드 중단 허용 maxSurge: 2 # 최대 2개 추가 파드 생성 허용 selector: matchLabels: app: myapp template: metadata: labels: app: myapp spec: containers: - name: myapp image: myapp:v2.1.0 ports: - containerPort: 8080 # 점진적 종료를 위한 설정 lifecycle: preStop: exec: command: ["/bin/sh", "-c", "sleep 15"] # 빠른 시작을 위한 헬스체크 readinessProbe: httpGet: path: /ready port: 8080 initialDelaySeconds: 10 periodSeconds: 2 timeoutSeconds: 1 successThreshold: 1 failureThreshold: 3 livenessProbe: httpGet: path: /health port: 8080 initialDelaySeconds: 30 periodSeconds: 10 고급 롤링 업데이트 스크립트 #!/bin/bash # advanced-rolling-update.sh set -e APP_NAME="myapp" NEW_VERSION="$1" NAMESPACE="production" MAX_ROLLBACK_REVISION=5 # 컬러 출력을 위한 함수 RED='\033[0;31m' GREEN='\033[0;32m' YELLOW='\033[1;33m' NC='\033[0m' # No Color log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" } warn() { echo -e "${YELLOW}[WARNING]${NC} $1" } error() { echo -e "${RED}[ERROR]${NC} $1" } # 사전 점검 pre_deployment_checks() { log "Performing pre-deployment checks..." # 1. 새 이미지 존재 확인 if ! docker pull $APP_NAME:$NEW_VERSION &gt; /dev/null 2&gt;&amp;1; then error "Image $APP_NAME:$NEW_VERSION not found" exit 1 fi # 2. 클러스터 상태 확인 if ! kubectl cluster-info &gt; /dev/null 2&gt;&amp;1; then error "Cannot connect to Kubernetes cluster" exit 1 fi # 3. 네임스페이스 존재 확인 if ! kubectl get namespace $NAMESPACE &gt; /dev/null 2&gt;&amp;1; then error "Namespace $NAMESPACE does not exist" exit 1 fi # 4. 현재 배포 상태 확인 CURRENT_REPLICAS=$(kubectl get deployment $APP_NAME -n $NAMESPACE -o jsonpath='{.status.readyReplicas}' 2&gt;/dev/null || echo "0") DESIRED_REPLICAS=$(kubectl get deployment $APP_NAME -n $NAMESPACE -o jsonpath='{.spec.replicas}' 2&gt;/dev/null || echo "0") if [ "$CURRENT_REPLICAS" != "$DESIRED_REPLICAS" ]; then warn "Current deployment is not healthy: $CURRENT_REPLICAS/$DESIRED_REPLICAS pods ready" read -p "Continue anyway? (y/N): " -n 1 -r echo if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit 1 fi fi log "Pre-deployment checks completed successfully" } # 배포 실행 perform_rolling_update() { log "Starting rolling update to version $NEW_VERSION" # 현재 이미지 태그 저장 (롤백용) CURRENT_IMAGE=$(kubectl get deployment $APP_NAME -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}') # 배포 히스토리 기록 kubectl annotate deployment $APP_NAME -n $NAMESPACE \ deployment.kubernetes.io/revision-history="Previous: $CURRENT_IMAGE, New: $APP_NAME:$NEW_VERSION, Time: $(date)" # 새 버전 배포 kubectl set image deployment/$APP_NAME -n $NAMESPACE $APP_NAME=$APP_NAME:$NEW_VERSION # 배포 상태 모니터링 log "Monitoring rollout progress..." # 타임아웃과 함께 롤아웃 상태 확인 if timeout 600 kubectl rollout status deployment/$APP_NAME -n $NAMESPACE; then log "Rolling update completed successfully" else error "Rolling update timed out" return 1 fi } # 배포 후 검증 post_deployment_validation() { log "Performing post-deployment validation..." # 1. 파드 상태 확인 sleep 30 READY_REPLICAS=$(kubectl get deployment $APP_NAME -n $NAMESPACE -o jsonpath='{.status.readyReplicas}') DESIRED_REPLICAS=$(kubectl get deployment $APP_NAME -n $NAMESPACE -o jsonpath='{.spec.replicas}') if [ "$READY_REPLICAS" != "$DESIRED_REPLICAS" ]; then error "Pod readiness check failed: $READY_REPLICAS/$DESIRED_REPLICAS" return 1 fi # 2. 애플리케이션 헬스체크 SERVICE_IP=$(kubectl get service $APP_NAME -n $NAMESPACE -o jsonpath='{.spec.clusterIP}') for i in {1..10}; do if curl -f -s http://$SERVICE_IP:8080/health &gt; /dev/null; then log "Application health check passed" break else warn "Health check attempt $i failed, retrying..." sleep 5 fi if [ $i -eq 10 ]; then error "Application health check failed after 10 attempts" return 1 fi done # 3. 메모리 및 CPU 사용률 확인 log "Checking resource usage..." kubectl top pods -n $NAMESPACE -l app=$APP_NAME log "Post-deployment validation completed successfully" } # 롤백 함수 rollback_deployment() { local rollback_reason="$1" error "Rolling back deployment due to: $rollback_reason" kubectl rollout undo deployment/$APP_NAME -n $NAMESPACE log "Waiting for rollback to complete..." kubectl rollout status deployment/$APP_NAME -n $NAMESPACE --timeout=300s error "Rollback completed" } # 메인 실행 로직 main() { if [ -z "$NEW_VERSION" ]; then echo "Usage: $0 &lt;new-version&gt;" exit 1 fi log "=== Rolling Update Started ===" log "App: $APP_NAME" log "New Version: $NEW_VERSION" log "Namespace: $NAMESPACE" # 단계별 실행 if ! pre_deployment_checks; then error "Pre-deployment checks failed" exit 1 fi if ! perform_rolling_update; then rollback_deployment "Rolling update failed" exit 1 fi if ! post_deployment_validation; then rollback_deployment "Post-deployment validation failed" exit 1 fi log "=== Rolling Update Completed Successfully ===" } main "$@" 3-2-3 블루그린 배포 | Blue-Green Deployment 블루그린 배포는 두 개의 동일한 환경을 운영하여 무중단 배포와 즉시 롤백을 가능하게 하는 전략입니다. 🔵🟢 블루그린 배포 개념 # 블루그린 배포 환경 구성 Production Traffic → Load Balancer → Blue Environment (현재 버전) → Green Environment (새 버전, 대기) # 배포 과정 1. Green 환경에 새 버전 배포 2. Green 환경 테스트 및 검증 3. 로드밸런서 트래픽을 Blue → Green으로 전환 4. Blue 환경을 새로운 Green으로 준비 Kubernetes 블루그린 배포 # blue-green-service.yaml - 트래픽 라우팅 서비스 apiVersion: v1 kind: Service metadata: name: myapp-service namespace: production spec: selector: app: myapp version: blue # blue 또는 green으로 전환 ports: - name: http port: 80 targetPort: 8080 protocol: TCP type: LoadBalancer --- # blue-deployment.yaml - Blue 환경 apiVersion: apps/v1 kind: Deployment metadata: name: myapp-blue namespace: production labels: app: myapp version: blue spec: replicas: 3 selector: matchLabels: app: myapp version: blue template: metadata: labels: app: myapp version: blue spec: containers: - name: myapp image: myapp:v1.0.0 ports: - containerPort: 8080 resources: requests: memory: "256Mi" cpu: "250m" limits: memory: "512Mi" cpu: "500m" --- # green-deployment.yaml - Green 환경 apiVersion: apps/v1 kind: Deployment metadata: name: myapp-green namespace: production labels: app: myapp version: green spec: replicas: 3 selector: matchLabels: app: myapp version: green template: metadata: labels: app: myapp version: green spec: containers: - name: myapp image: myapp:v2.0.0 # 새 버전 ports: - containerPort: 8080 resources: requests: memory: "256Mi" cpu: "250m" limits: memory: "512Mi" cpu: "500m" 3-2-4 카나리 배포 | Canary Deployment 카나리 배포는 새 버전을 일부 트래픽에만 점진적으로 노출하여 리스크를 최소화하는 배포 전략입니다. 🐤 카나리 배포 구현 # canary-istio.yaml - Istio를 이용한 카나리 배포 apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata: name: myapp-canary namespace: production spec: hosts: - myapp.company.com http: - match: - headers: canary: exact: "true" route: - destination: host: myapp-service subset: v2 weight: 100 - route: - destination: host: myapp-service subset: v1 weight: 90 # 90% 기존 버전 - destination: host: myapp-service subset: v2 weight: 10 # 10% 새 버전 --- apiVersion: networking.istio.io/v1alpha3 kind: DestinationRule metadata: name: myapp-destination namespace: production spec: host: myapp-service subsets: - name: v1 labels: version: v1.0.0 - name: v2 labels: version: v2.0.0 점진적 카나리 배포 스크립트 #!/bin/bash # progressive-canary.sh set -e APP_NAME="myapp" NEW_VERSION="$1" NAMESPACE="production" # 트래픽 분배 단계 (%) CANARY_STAGES=(5 10 25 50 75 100) log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" } # 메트릭 수집 함수 collect_metrics() { local version=$1 local duration=$2 log "Collecting metrics for version $version over $duration seconds" # Prometheus 메트릭 쿼리 local error_rate=$(curl -s "http://prometheus:9090/api/v1/query" \ --data-urlencode "query=rate(http_requests_total{version=\"$version\",status=~\"5..\"}[${duration}s]) / rate(http_requests_total{version=\"$version\"}[${duration}s]) * 100") local response_time=$(curl -s "http://prometheus:9090/api/v1/query" \ --data-urlencode "query=histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{version=\"$version\"}[${duration}s]))") local cpu_usage=$(curl -s "http://prometheus:9090/api/v1/query" \ --data-urlencode "query=avg(rate(container_cpu_usage_seconds_total{pod=~\"$APP_NAME-.*\",container=\"$APP_NAME\"}[${duration}s])) by (version)") # JSON 파싱 (jq 필요) local error_rate_value=$(echo $error_rate | jq -r '.data.result[0].value[1] // "0"') local response_time_value=$(echo $response_time | jq -r '.data.result[0].value[1] // "0"') local cpu_usage_value=$(echo $cpu_usage | jq -r '.data.result[0].value[1] // "0"') echo "$error_rate_value,$response_time_value,$cpu_usage_value" } # SLI/SLO 체크 check_slo() { local metrics=$1 local version=$2 IFS=',' read -r error_rate response_time cpu_usage &lt;&lt;&lt; "$metrics" log "SLO Check for $version - Error Rate: $error_rate%, Response Time: ${response_time}s, CPU: $cpu_usage" # SLO 임계값 local max_error_rate=1.0 local max_response_time=0.5 local max_cpu_usage=0.8 if (( $(echo "$error_rate &gt; $max_error_rate" | bc -l) )); then log "❌ Error rate SLO violated: $error_rate% &gt; $max_error_rate%" return 1 fi if (( $(echo "$response_time &gt; $max_response_time" | bc -l) )); then log "❌ Response time SLO violated: ${response_time}s &gt; ${max_response_time}s" return 1 fi if (( $(echo "$cpu_usage &gt; $max_cpu_usage" | bc -l) )); then log "❌ CPU usage SLO violated: $cpu_usage &gt; $max_cpu_usage" return 1 fi log "✅ All SLOs passed for version $version" return 0 } # 트래픽 가중치 업데이트 update_traffic_weight() { local canary_weight=$1 local stable_weight=$((100 - canary_weight)) log "Updating traffic weights - Stable: $stable_weight%, Canary: $canary_weight%" kubectl patch virtualservice $APP_NAME-canary -n $NAMESPACE --type='json' -p="[ {\"op\": \"replace\", \"path\": \"/spec/http/1/route/0/weight\", \"value\": $stable_weight}, {\"op\": \"replace\", \"path\": \"/spec/http/1/route/1/weight\", \"value\": $canary_weight} ]" } # 카나리 배포 실행 perform_canary_deployment() { log "Starting canary deployment for version $NEW_VERSION" # 1. 카나리 버전 배포 (0% 트래픽) kubectl set image deployment/$APP_NAME-canary -n $NAMESPACE $APP_NAME=$APP_NAME:$NEW_VERSION kubectl rollout status deployment/$APP_NAME-canary -n $NAMESPACE --timeout=300s # 2. 단계별 트래픽 증가 for stage in "${CANARY_STAGES[@]}"; do log "=== Canary Stage: $stage% traffic ===" # 트래픽 가중치 업데이트 update_traffic_weight $stage # 안정화 대기 log "Waiting for traffic stabilization..." sleep 60 # 메트릭 수집 및 분석 (5분간) local canary_metrics=$(collect_metrics "v$NEW_VERSION" 300) local stable_metrics=$(collect_metrics "v$(get_current_version)" 300) # SLO 체크 if ! check_slo "$canary_metrics" "canary"; then log "❌ Canary version failed SLO check, rolling back..." rollback_canary return 1 fi # 비교 분석 log "Comparing canary vs stable metrics..." if ! compare_versions "$canary_metrics" "$stable_metrics"; then log "❌ Canary version performance degraded, rolling back..." rollback_canary return 1 fi log "✅ Stage $stage% completed successfully" # 마지막 단계가 아니면 대기 if [ "$stage" != "100" ]; then log "Waiting before next stage..." sleep 300 # 5분 대기 fi done log "🎉 Canary deployment completed successfully" } # 롤백 함수 rollback_canary() { log "Rolling back canary deployment..." update_traffic_weight 0 log "Traffic rolled back to stable version" } main() { if [ -z "$NEW_VERSION" ]; then echo "Usage: $0 &lt;new-version&gt;" exit 1 fi log "=== Progressive Canary Deployment Started ===" log "App: $APP_NAME, New Version: $NEW_VERSION" if ! perform_canary_deployment; then log "❌ Canary deployment failed" exit 1 fi log "=== Canary Deployment Completed Successfully ===" } main "$@" 실습: AWS EC2 기반의 블루그린 배포 🏗️ AWS 인프라 구성 # 1. VPC 및 서브넷 생성 aws ec2 create-vpc --cidr-block 10.0.0.0/16 --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=BlueGreen-VPC}]' VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=BlueGreen-VPC" --query 'Vpcs[0].VpcId' --output text) # 퍼블릭 서브넷 생성 (2개 AZ) aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --availability-zone us-west-2a --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=Public-Subnet-1}]' aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.2.0/24 --availability-zone us-west-2b --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=Public-Subnet-2}]' # 프라이빗 서브넷 생성 (2개 AZ) aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.11.0/24 --availability-zone us-west-2a --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=Private-Subnet-1}]' aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.12.0/24 --availability-zone us-west-2b --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=Private-Subnet-2}]' # 인터넷 게이트웨이 생성 및 연결 aws ec2 create-internet-gateway --tag-specifications 'ResourceType=internet-gateway,Tags=[{Key=Name,Value=BlueGreen-IGW}]' IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=tag:Name,Values=BlueGreen-IGW" --query 'InternetGateways[0].InternetGatewayId' --output text) aws ec2 attach-internet-gateway --vpc-id $VPC_ID --internet-gateway-id $IGW_ID Application Load Balancer 구성 { "LoadBalancerName": "myapp-bluegreen-alb", "Scheme": "internet-facing", "Type": "application", "IpAddressType": "ipv4", "Subnets": [ "subnet-12345678", "subnet-87654321" ], "SecurityGroups": [ "sg-12345678" ], "Tags": [ { "Key": "Name", "Value": "MyApp-BlueGreen-ALB" }, { "Key": "Environment", "Value": "Production" } ] } 블루그린 배포 자동화 스크립트 #!/bin/bash # aws-bluegreen-deploy.sh set -e # 설정 변수 APP_NAME="myapp" NEW_VERSION="$1" AWS_REGION="us-west-2" VPC_ID="vpc-12345678" ALB_ARN="arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/myapp-alb/1234567890123456" BLUE_TG_ARN="arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/myapp-blue/1234567890123456" GREEN_TG_ARN="arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/myapp-green/1234567890123456" LISTENER_ARN="arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/myapp-alb/1234567890123456/1234567890123456" # 현재 활성 환경 확인 get_active_environment() { local listener_rules=$(aws elbv2 describe-rules --listener-arn $LISTENER_ARN --region $AWS_REGION) local active_target_group=$(echo $listener_rules | jq -r '.Rules[] | select(.Priority == "100") | .Actions[0].TargetGroupArn') if [[ "$active_target_group" == "$BLUE_TG_ARN" ]]; then echo "blue" else echo "green" fi } # Auto Scaling Group에 새 Launch Template 적용 update_asg_launch_template() { local environment=$1 local new_ami=$2 local asg_name="${APP_NAME}-${environment}-asg" local lt_name="${APP_NAME}-${environment}-lt" # 새 Launch Template 버전 생성 aws ec2 create-launch-template-version \ --launch-template-name $lt_name \ --source-version '$Latest' \ --launch-template-data "{\"ImageId\":\"$new_ami\"}" \ --region $AWS_REGION # ASG에 새 Launch Template 버전 적용 local latest_version=$(aws ec2 describe-launch-template-versions \ --launch-template-name $lt_name \ --region $AWS_REGION \ --query 'LaunchTemplateVersions[0].VersionNumber' \ --output text) aws autoscaling update-auto-scaling-group \ --auto-scaling-group-name $asg_name \ --launch-template LaunchTemplateName=$lt_name,Version=$latest_version \ --region $AWS_REGION log "Updated ASG $asg_name with Launch Template version $latest_version" } # 인스턴스 교체 (Rolling Replacement) perform_instance_refresh() { local environment=$1 local asg_name="${APP_NAME}-${environment}-asg" log "Starting instance refresh for $asg_name" local refresh_id=$(aws autoscaling start-instance-refresh \ --auto-scaling-group-name $asg_name \ --preferences '{ "InstanceWarmup": 300, "MinHealthyPercentage": 50, "CheckpointPercentages": [20, 50, 100], "CheckpointDelay": 600 }' \ --region $AWS_REGION \ --query 'InstanceRefreshId' \ --output text) log "Instance refresh started with ID: $refresh_id" # 인스턴스 교체 완료 대기 while true; do local status=$(aws autoscaling describe-instance-refreshes \ --auto-scaling-group-name $asg_name \ --instance-refresh-ids $refresh_id \ --region $AWS_REGION \ --query 'InstanceRefreshes[0].Status' \ --output text) log "Instance refresh status: $status" case $status in "Successful") log "✅ Instance refresh completed successfully" break ;; "Failed"|"Cancelled") error "❌ Instance refresh failed with status: $status" return 1 ;; "InProgress"|"Pending") log "Instance refresh in progress, waiting..." sleep 60 ;; esac done } # 헬스체크 수행 health_check_environment() { local environment=$1 local target_group_arn if [ "$environment" = "blue" ]; then target_group_arn=$BLUE_TG_ARN else target_group_arn=$GREEN_TG_ARN fi log "Performing health check for $environment environment" local max_attempts=30 local attempt=1 while [ $attempt -le $max_attempts ]; do local healthy_targets=$(aws elbv2 describe-target-health \ --target-group-arn $target_group_arn \ --region $AWS_REGION \ --query 'TargetHealthDescriptions[?TargetHealth.State==`healthy`] | length(@)') local total_targets=$(aws elbv2 describe-target-health \ --target-group-arn $target_group_arn \ --region $AWS_REGION \ --query 'TargetHealthDescriptions | length(@)') log "Health check attempt $attempt: $healthy_targets/$total_targets targets healthy" if [ "$healthy_targets" -gt 0 ] &amp;&amp; [ "$healthy_targets" -eq "$total_targets" ]; then log "✅ All targets are healthy in $environment environment" return 0 fi sleep 30 ((attempt++)) done error "❌ Health check failed for $environment environment after $max_attempts attempts" return 1 } # 트래픽 전환 switch_traffic() { local target_environment=$1 local target_group_arn if [ "$target_environment" = "blue" ]; then target_group_arn=$BLUE_TG_ARN else target_group_arn=$GREEN_TG_ARN fi log "Switching traffic to $target_environment environment" aws elbv2 modify-rule \ --rule-arn $(aws elbv2 describe-rules --listener-arn $LISTENER_ARN --region $AWS_REGION --query 'Rules[?Priority==`100`].RuleArn' --output text) \ --actions Type=forward,TargetGroupArn=$target_group_arn \ --region $AWS_REGION log "✅ Traffic switched to $target_environment environment" } # 배포 검증 validate_deployment() { local environment=$1 log "Validating deployment in $environment environment" # ALB DNS 이름 가져오기 local alb_dns=$(aws elbv2 describe-load-balancers \ --load-balancer-arns $ALB_ARN \ --region $AWS_REGION \ --query 'LoadBalancers[0].DNSName' \ --output text) # 애플리케이션 버전 확인 local app_version=$(curl -s -f http://$alb_dns/version 2&gt;/dev/null || echo "unknown") if [ "$app_version" = "$NEW_VERSION" ]; then log "✅ Application version validated: $app_version" else error "❌ Version mismatch. Expected: $NEW_VERSION, Got: $app_version" return 1 fi # 기본 기능 테스트 local health_status=$(curl -s -o /dev/null -w "%{http_code}" http://$alb_dns/health) if [ "$health_status" = "200" ]; then log "✅ Application health check passed" else error "❌ Application health check failed. Status code: $health_status" return 1 fi log "✅ Deployment validation completed successfully" } # 롤백 수행 rollback_deployment() { local current_environment=$(get_active_environment) local rollback_environment if [ "$current_environment" = "blue" ]; then rollback_environment="green" else rollback_environment="blue" fi log "Rolling back from $current_environment to $rollback_environment" switch_traffic $rollback_environment log "✅ Rollback completed" } # 메인 배포 로직 main() { if [ -z "$NEW_VERSION" ]; then echo "Usage: $0 &lt;new-version&gt;" exit 1 fi log "=== AWS EC2 Blue-Green Deployment Started ===" log "Application: $APP_NAME" log "New Version: $NEW_VERSION" log "Region: $AWS_REGION" # 1. 현재 활성 환경 확인 local active_env=$(get_active_environment) local inactive_env if [ "$active_env" = "blue" ]; then inactive_env="green" else inactive_env="blue" fi log "Current active environment: $active_env" log "Deploying to inactive environment: $inactive_env" # 2. 새 AMI ID 가져오기 (이미 빌드된 AMI 사용) local new_ami=$(aws ec2 describe-images \ --filters "Name=tag:Version,Values=$NEW_VERSION" "Name=tag:Application,Values=$APP_NAME" \ --region $AWS_REGION \ --query 'Images[0].ImageId' \ --output text) if [ "$new_ami" = "None" ] || [ -z "$new_ami" ]; then error "❌ AMI for version $NEW_VERSION not found" exit 1 fi log "Using AMI: $new_ami for version $NEW_VERSION" # 3. 비활성 환경에 새 버전 배포 if ! update_asg_launch_template $inactive_env $new_ami; then error "❌ Failed to update launch template" exit 1 fi if ! perform_instance_refresh $inactive_env; then error "❌ Failed to refresh instances" exit 1 fi # 4. 비활성 환경 헬스체크 if ! health_check_environment $inactive_env; then error "❌ Health check failed for $inactive_env environment" exit 1 fi # 5. 트래픽 전환 if ! switch_traffic $inactive_env; then error "❌ Failed to switch traffic" rollback_deployment exit 1 fi # 6. 배포 검증 sleep 60 # 트래픽 안정화 대기 if ! validate_deployment $inactive_env; then error "❌ Deployment validation failed" rollback_deployment exit 1 fi log "🎉 Blue-Green deployment completed successfully!" log "New active environment: $inactive_env" log "Previous environment ($active_env) is now inactive and ready for next deployment" } # 유틸리티 함수 log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" } error() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1" &gt;&amp;2 } # 스크립트 실행 main "$@" 정리 및 모범 사례 📊 배포 전략 선택 가이드 # 배포 전략 선택 매트릭스 상황 | 권장 전략 | 이유 ====================|===============|============================== 개발/테스트 환경 | Recreate | 단순함, 리소스 절약 스테이지 환경 | Rolling | 프로덕션과 유사한 환경 프로덕션 (위험 높음) | Blue-Green | 즉시 롤백, 완전한 검증 프로덕션 (위험 보통) | Canary | 점진적 검증, 리스크 분산 프로덕션 (위험 낮음) | Rolling | 효율적, 리소스 최적화 레거시 시스템 | Blue-Green | 안전성 우선 마이크로서비스 | Canary | 서비스별 독립 배포 🔧 모범 사례 1. 배포 준비 # 배포 전 체크리스트 ✅ 백업 완료 ✅ 롤백 계획 수립 ✅ 모니터링 준비 ✅ 팀 커뮤니케이션 ✅ 헬스체크 엔드포인트 구현 ✅ 설정 검증 2. 모니터링 및 알람 # 핵심 메트릭 - 에러율 (&lt; 1%) - 응답 시간 (&lt; 500ms) - 처리량 (baseline 대비) - 리소스 사용률 (&lt; 80%) - 가용성 (&gt; 99.9%) 3. 자동화 원칙 # 모든 것을 자동화 1. 빌드 프로세스 2. 테스트 실행 3. 배포 프로세스 4. 헬스체크 5. 롤백 절차 6. 알림 및 로깅 현대적인 배포 전략을 마스터하셨나요? 안정적이고 효율적인 배포로 서비스 품질을 한 단계 높여보세요! 🚀]]></summary></entry><entry><title type="html">네트워킹 완전 가이드 3편 - 라우팅과 스위칭 심화 | Complete Network Guide Part 3 - Advanced Routing &amp;amp; Switching</title><link href="https://leeyonghe.github.io/infra-blog/blog/2024/11/03/networking-guide-part3.html" rel="alternate" type="text/html" title="네트워킹 완전 가이드 3편 - 라우팅과 스위칭 심화 | Complete Network Guide Part 3 - Advanced Routing &amp;amp; Switching" /><published>2024-11-03T02:00:00+00:00</published><updated>2024-11-03T02:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2024/11/03/networking-guide-part3</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2024/11/03/networking-guide-part3.html"><![CDATA[<p>네트워크의 핵심인 라우팅과 스위칭 기술을 심화 학습하여 대규모 네트워크 운영 능력을 갖춰보겠습니다.</p>

<h2 id="라우팅-프로토콜--routing-protocols">라우팅 프로토콜 | Routing Protocols</h2>

<h3 id="️-라우팅-기본-개념">🗺️ 라우팅 기본 개념</h3>

<p>라우팅은 패킷이 목적지까지 가는 최적의 경로를 찾는 과정입니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 라우팅 테이블 구성 요소</span>
목적지 네트워크 | 서브넷 마스크 | 게이트웨이 | 인터페이스 | 메트릭
192.168.1.0    | /24          | 직접연결    | eth0      | 0
10.0.0.0       | /8           | 192.168.1.1| eth0      | 1
0.0.0.0        | /0           | 192.168.1.1| eth0      | 1 <span class="o">(</span>기본경로<span class="o">)</span>
</code></pre></div></div>

<h3 id="-라우팅-프로토콜-분류">📊 라우팅 프로토콜 분류</h3>

<h4 id="distance-vector-vs-link-state">Distance Vector vs Link State</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Distance Vector (거리 벡터):
- RIP (Routing Information Protocol)
- 벨만-포드 알고리즘 사용
- 홉 카운트 기반 메트릭
- 단순하지만 수렴 속도 느림

Link State (링크 상태):  
- OSPF (Open Shortest Path First)
- 다익스트라 알고리즘 사용
- 대역폭 기반 메트릭
- 빠른 수렴, 확장성 좋음
</code></pre></div></div>

<h4 id="igp-vs-egp">IGP vs EGP</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IGP (Interior Gateway Protocol):
- 같은 자율 시스템(AS) 내부
- RIP, OSPF, EIGRP

EGP (Exterior Gateway Protocol):
- 서로 다른 AS 간
- BGP (Border Gateway Protocol)
</code></pre></div></div>

<h3 id="-rip-routing-information-protocol">🔄 RIP (Routing Information Protocol)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Cisco 라우터 RIP 설정</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># router rip</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># version 2</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># network 192.168.1.0</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># network 10.0.0.0</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># no auto-summary</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># passive-interface fastethernet 0/0</span>

<span class="c"># Linux Quagga/FRR RIP 설정</span>
router rip
 version 2
 network 192.168.1.0/24
 network 10.0.0.0/8
 redistribute connected
 redistribute static

<span class="c"># RIP 정보 확인</span>
show ip route rip
show ip rip database
debug ip rip
</code></pre></div></div>

<h4 id="rip의-특징과-한계">RIP의 특징과 한계</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>장점:
- 구성이 간단함
- 소규모 네트워크에 적합
- 표준 프로토콜

단점:
- 홉 카운트 제한 (15홉)
- 느린 수렴 속도
- 대역폭 고려하지 않음
- 루프 방지 메커니즘 제한적
</code></pre></div></div>

<h3 id="-ospf-open-shortest-path-first">🌐 OSPF (Open Shortest Path First)</h3>

<p>OSPF는 대규모 네트워크에서 가장 널리 사용되는 링크 상태 라우팅 프로토콜입니다.</p>

<h4 id="ospf-기본-개념">OSPF 기본 개념</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># OSPF 용어</span>
Area: 라우터들의 논리적 그룹
ABR <span class="o">(</span>Area Border Router<span class="o">)</span>: Area 경계 라우터
ASBR <span class="o">(</span>Autonomous System Boundary Router<span class="o">)</span>: AS 경계 라우터  
DR <span class="o">(</span>Designated Router<span class="o">)</span>: 대표 라우터
BDR <span class="o">(</span>Backup Designated Router<span class="o">)</span>: 백업 대표 라우터

<span class="c"># LSA (Link State Advertisement) 유형</span>
LSA Type 1: Router LSA <span class="o">(</span>라우터 정보<span class="o">)</span>
LSA Type 2: Network LSA <span class="o">(</span>네트워크 정보<span class="o">)</span>
LSA Type 3: Summary LSA <span class="o">(</span>Area 간 요약<span class="o">)</span>
LSA Type 4: ASBR Summary LSA
LSA Type 5: External LSA <span class="o">(</span>외부 라우트<span class="o">)</span>
</code></pre></div></div>

<h4 id="ospf-설정-실습">OSPF 설정 실습</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Cisco 라우터 OSPF 설정</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># router ospf 1</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># router-id 1.1.1.1</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># network 192.168.1.0 0.0.0.255 area 0</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># network 10.0.0.0 0.255.255.255 area 1</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># area 1 stub</span>

<span class="c"># 인터페이스별 OSPF 설정</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># interface fastethernet 0/0</span>
Router<span class="o">(</span>config-if<span class="o">)</span><span class="c"># ip ospf cost 100</span>
Router<span class="o">(</span>config-if<span class="o">)</span><span class="c"># ip ospf priority 255</span>
Router<span class="o">(</span>config-if<span class="o">)</span><span class="c"># ip ospf hello-interval 5</span>
Router<span class="o">(</span>config-if<span class="o">)</span><span class="c"># ip ospf dead-interval 20</span>

<span class="c"># Linux FRR OSPF 설정</span>
router ospf
 ospf router-id 1.1.1.1
 network 192.168.1.0/24 area 0.0.0.0
 network 10.0.0.0/8 area 0.0.0.1
 area 0.0.0.1 stub

<span class="c"># OSPF 정보 확인</span>
show ip ospf neighbor
show ip ospf database  
show ip ospf interface
show ip route ospf
</code></pre></div></div>

<h4 id="ospf-area-설계">OSPF Area 설계</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Multi-Area OSPF 설계 예시</span>
Area 0 <span class="o">(</span>Backbone<span class="o">)</span>: 10.0.0.0/24
├── Area 1 <span class="o">(</span>Sales<span class="o">)</span>: 10.1.0.0/16
├── Area 2 <span class="o">(</span>Engineering<span class="o">)</span>: 10.2.0.0/16  
└── Area 3 <span class="o">(</span>Guest<span class="o">)</span>: 10.3.0.0/16

<span class="c"># Area 유형</span>
Standard Area: 모든 LSA 허용
Stub Area: Type 5 LSA 차단, 기본 경로 주입
Totally Stub: Type 3,4,5 LSA 차단
NSSA: Type 5 LSA를 Type 7로 변환
</code></pre></div></div>

<h3 id="-bgp-border-gateway-protocol">🌍 BGP (Border Gateway Protocol)</h3>

<p>BGP는 인터넷의 라우팅을 담당하는 경로 벡터 프로토콜입니다.</p>

<h4 id="bgp-기본-개념">BGP 기본 개념</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># BGP 속성</span>
AS-Path: AS 번호 경로
Next-Hop: 다음 홉 주소  
Local Preference: 로컬 우선순위 <span class="o">(</span>높을수록 선호<span class="o">)</span>
MED: Multi-Exit Discriminator <span class="o">(</span>낮을수록 선호<span class="o">)</span>
Origin: 경로 발생지 <span class="o">(</span>IGP <span class="o">&gt;</span> EGP <span class="o">&gt;</span> Incomplete<span class="o">)</span>
Community: 라우팅 정책 태그
</code></pre></div></div>

<h4 id="bgp-설정-예시">BGP 설정 예시</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Cisco 라우터 BGP 설정</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># router bgp 65001</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># bgp router-id 1.1.1.1</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># neighbor 203.0.113.1 remote-as 65002</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># neighbor 203.0.113.1 description "ISP-A Connection"</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># network 192.168.0.0 mask 255.255.0.0</span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># aggregate-address 192.168.0.0 255.255.0.0 summary-only</span>

<span class="c"># BGP 경로 정책 설정</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># ip prefix-list ALLOW-CUSTOMERS seq 10 permit 192.168.0.0/16 le 24</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># route-map CUSTOMER-IN permit 10</span>
Router<span class="o">(</span>config-route-map<span class="o">)</span><span class="c"># match ip address prefix-list ALLOW-CUSTOMERS</span>
Router<span class="o">(</span>config-route-map<span class="o">)</span><span class="c"># set local-preference 200</span>

Router<span class="o">(</span>config<span class="o">)</span><span class="c"># router bgp 65001  </span>
Router<span class="o">(</span>config-router<span class="o">)</span><span class="c"># neighbor 203.0.113.1 route-map CUSTOMER-IN in</span>

<span class="c"># Linux FRR BGP 설정</span>
router bgp 65001
 bgp router-id 1.1.1.1
 neighbor 203.0.113.1 remote-as 65002
 neighbor 203.0.113.1 description ISP-A
 address-family ipv4 unicast
  network 192.168.0.0/16
  neighbor 203.0.113.1 activate
</code></pre></div></div>

<h2 id="스위칭-기술--switching-technology">스위칭 기술 | Switching Technology</h2>

<h3 id="-이더넷-스위칭-기본">🔌 이더넷 스위칭 기본</h3>

<h4 id="mac-주소-학습-과정">MAC 주소 학습 과정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1단계: MAC 주소 테이블이 비어있음</span>
Switch# show mac address-table
          Mac Address Table
<span class="nt">-------------------------------------------</span>
Vlan    Mac Address       Type        Ports
<span class="nt">----</span>    <span class="nt">-----------</span>       <span class="nt">--------</span>    <span class="nt">-----</span>

<span class="c"># 2단계: PC-A(00:11:22:33:44:AA)에서 PC-B로 프레임 전송</span>
<span class="c"># 스위치가 포트 1에서 수신, MAC 주소 학습</span>

<span class="c"># 3단계: MAC 주소 테이블 업데이트  </span>
Switch# show mac address-table
          Mac Address Table
<span class="nt">-------------------------------------------</span>
Vlan    Mac Address       Type        Ports
<span class="nt">----</span>    <span class="nt">-----------</span>       <span class="nt">--------</span>    <span class="nt">-----</span>
   1    0011.2233.44aa    DYNAMIC     Fa0/1

<span class="c"># 4단계: 목적지 MAC 주소를 모르므로 플러딩</span>
<span class="c"># 5단계: PC-B가 응답하면 포트 2에서 학습</span>
</code></pre></div></div>

<h4 id="스위치-포트-설정">스위치 포트 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 액세스 포트 설정 (단일 VLAN)</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface fastethernet 0/1</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport mode access</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport access vlan 10</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport port-security</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport port-security maximum 2</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport port-security violation shutdown</span>

<span class="c"># 트렁크 포트 설정 (다중 VLAN)</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface fastethernet 0/24</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport mode trunk</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport trunk encapsulation dot1q</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport trunk allowed vlan 10,20,30</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport trunk native vlan 1</span>
</code></pre></div></div>

<h3 id="️-vlan-virtual-local-area-network">🏷️ VLAN (Virtual Local Area Network)</h3>

<p>VLAN은 물리적 위치와 관계없이 논리적으로 네트워크를 분할하는 기술입니다.</p>

<h4 id="vlan-설정-및-관리">VLAN 설정 및 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># VLAN 생성</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># vlan 10</span>
Switch<span class="o">(</span>config-vlan<span class="o">)</span><span class="c"># name SALES</span>
Switch<span class="o">(</span>config-vlan<span class="o">)</span><span class="c"># vlan 20  </span>
Switch<span class="o">(</span>config-vlan<span class="o">)</span><span class="c"># name ENGINEERING</span>
Switch<span class="o">(</span>config-vlan<span class="o">)</span><span class="c"># vlan 30</span>
Switch<span class="o">(</span>config-vlan<span class="o">)</span><span class="c"># name GUEST</span>

<span class="c"># VLAN 정보 확인</span>
Switch# show vlan brief
VLAN Name                             Status    Ports
<span class="nt">----</span> <span class="nt">--------------------------------</span> <span class="nt">---------</span> <span class="nt">-------------------------------</span>
1    default                          active    Fa0/5, Fa0/6, Fa0/7, Fa0/8
10   SALES                           active    Fa0/1, Fa0/2
20   ENGINEERING                     active    Fa0/3, Fa0/4  
30   GUEST                           active    
999  UNUSED                          active    

<span class="c"># 동적 VLAN 할당 (VMPS)</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># vmps server 192.168.1.100</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface range fastethernet 0/1-20</span>
Switch<span class="o">(</span>config-if-range<span class="o">)</span><span class="c"># switchport mode dynamic desirable</span>
</code></pre></div></div>

<h4 id="inter-vlan-라우팅">Inter-VLAN 라우팅</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 라우터의 서브인터페이스 설정 (Router-on-a-Stick)</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># interface fastethernet 0/0</span>
Router<span class="o">(</span>config-if<span class="o">)</span><span class="c"># no shutdown</span>
Router<span class="o">(</span>config-if<span class="o">)</span><span class="c"># interface fastethernet 0/0.10</span>
Router<span class="o">(</span>config-subif<span class="o">)</span><span class="c"># encapsulation dot1Q 10</span>
Router<span class="o">(</span>config-subif<span class="o">)</span><span class="c"># ip address 192.168.10.1 255.255.255.0</span>
Router<span class="o">(</span>config-subif<span class="o">)</span><span class="c"># interface fastethernet 0/0.20</span>
Router<span class="o">(</span>config-subif<span class="o">)</span><span class="c"># encapsulation dot1Q 20  </span>
Router<span class="o">(</span>config-subif<span class="o">)</span><span class="c"># ip address 192.168.20.1 255.255.255.0</span>

<span class="c"># SVI (Switched Virtual Interface) 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># ip routing</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface vlan 10</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># ip address 192.168.10.1 255.255.255.0</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># no shutdown</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># interface vlan 20</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># ip address 192.168.20.1 255.255.255.0</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># no shutdown</span>
</code></pre></div></div>

<h3 id="-stp-spanning-tree-protocol">🌳 STP (Spanning Tree Protocol)</h3>

<p>STP는 스위치 네트워크에서 루프를 방지하고 이중화를 제공하는 프로토콜입니다.</p>

<h4 id="stp-기본-개념">STP 기본 개념</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># STP 포트 상태</span>
Disabled: 포트 비활성화
Blocking: 데이터 전송 차단, BPDU 수신만
Listening: BPDU 송수신, MAC 주소 학습하지 않음
Learning: MAC 주소 학습, 데이터 전송하지 않음  
Forwarding: 정상 데이터 전송

<span class="c"># STP 포트 역할</span>
Root Port: 루트 브리지로 가는 최단 경로
Designated Port: 세그먼트의 대표 포트
Alternate Port: 루트 포트의 백업
Backup Port: 같은 스위치의 다른 포트 백업
</code></pre></div></div>

<h4 id="stp-설정-및-최적화">STP 설정 및 최적화</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 루트 브리지 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># spanning-tree vlan 1 root primary</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># spanning-tree vlan 1 priority 4096</span>

<span class="c"># 포트 우선순위 및 비용 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface fastethernet 0/1  </span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># spanning-tree vlan 1 port-priority 128</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># spanning-tree vlan 1 cost 19</span>

<span class="c"># RSTP (Rapid Spanning Tree) 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># spanning-tree mode rapid-pvst</span>

<span class="c"># 포트 최적화</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface range fastethernet 0/1-20</span>
Switch<span class="o">(</span>config-if-range<span class="o">)</span><span class="c"># spanning-tree portfast</span>
Switch<span class="o">(</span>config-if-range<span class="o">)</span><span class="c"># spanning-tree bpduguard enable</span>

<span class="c"># STP 정보 확인</span>
Switch# show spanning-tree
Switch# show spanning-tree vlan 1
Switch# show spanning-tree interface fastethernet 0/1
</code></pre></div></div>

<h4 id="mst-multiple-spanning-tree">MST (Multiple Spanning Tree)</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># MST 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># spanning-tree mode mst</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># spanning-tree mst configuration</span>
Switch<span class="o">(</span>config-mst<span class="o">)</span><span class="c"># name COMPANY  </span>
Switch<span class="o">(</span>config-mst<span class="o">)</span><span class="c"># revision 1</span>
Switch<span class="o">(</span>config-mst<span class="o">)</span><span class="c"># instance 1 vlan 10,20</span>
Switch<span class="o">(</span>config-mst<span class="o">)</span><span class="c"># instance 2 vlan 30,40</span>
Switch<span class="o">(</span>config-mst<span class="o">)</span><span class="c"># exit</span>

<span class="c"># MST 루트 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># spanning-tree mst 1 root primary</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># spanning-tree mst 2 root secondary</span>
</code></pre></div></div>

<h2 id="고급-네트워킹-기술--advanced-networking">고급 네트워킹 기술 | Advanced Networking</h2>

<h3 id="-link-aggregation-etherchannel">🔗 Link Aggregation (EtherChannel)</h3>

<p>여러 물리적 링크를 논리적으로 묶어 대역폭을 증가시키고 이중화를 제공합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># LACP (Link Aggregation Control Protocol) 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface range fastethernet 0/1-2</span>
Switch<span class="o">(</span>config-if-range<span class="o">)</span><span class="c"># channel-group 1 mode active</span>
Switch<span class="o">(</span>config-if-range<span class="o">)</span><span class="c"># exit</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface port-channel 1</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport mode trunk</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport trunk allowed vlan 10,20,30</span>

<span class="c"># PAgP (Port Aggregation Protocol) 설정  </span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface range fastethernet 0/3-4</span>
Switch<span class="o">(</span>config-if-range<span class="o">)</span><span class="c"># channel-group 2 mode desirable</span>

<span class="c"># 정적 EtherChannel 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface range fastethernet 0/5-6  </span>
Switch<span class="o">(</span>config-if-range<span class="o">)</span><span class="c"># channel-group 3 mode on</span>

<span class="c"># EtherChannel 확인</span>
Switch# show etherchannel summary
Switch# show etherchannel port-channel
</code></pre></div></div>

<h3 id="-vxlan-virtual-extensible-lan">🌐 VXLAN (Virtual Extensible LAN)</h3>

<p>클라우드 환경에서 L2 오버레이 네트워크를 구현하는 기술입니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Linux에서 VXLAN 설정</span>
<span class="c"># VXLAN 인터페이스 생성</span>
ip <span class="nb">link </span>add vxlan10 <span class="nb">type </span>vxlan <span class="nb">id </span>10 remote 192.168.1.2 <span class="nb">local </span>192.168.1.1 dev eth0 dstport 4789

<span class="c"># VXLAN을 브리지에 연결</span>
ip <span class="nb">link </span>add br0 <span class="nb">type </span>bridge
ip <span class="nb">link set </span>vxlan10 master br0
ip <span class="nb">link set </span>eth1 master br0

<span class="c"># 인터페이스 활성화</span>
ip <span class="nb">link set </span>vxlan10 up
ip <span class="nb">link set </span>br0 up

<span class="c"># 멀티캐스트 VXLAN</span>
ip <span class="nb">link </span>add vxlan20 <span class="nb">type </span>vxlan <span class="nb">id </span>20 group 239.1.1.1 dev eth0 dstport 4789

<span class="c"># VXLAN 정보 확인</span>
bridge fdb show dev vxlan10
ip <span class="nt">-d</span> <span class="nb">link </span>show vxlan10
</code></pre></div></div>

<h3 id="️-로드-밸런싱">⚖️ 로드 밸런싱</h3>

<h4 id="haproxy-설정">HAProxy 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># HAProxy 설정 파일 (/etc/haproxy/haproxy.cfg)</span>
global
    daemon
    maxconn 4096
    log 127.0.0.1:514 local0

defaults
    mode http
    <span class="nb">timeout </span>connect 5000ms
    <span class="nb">timeout </span>client 50000ms
    <span class="nb">timeout </span>server 50000ms
    option httplog

frontend web_frontend
    <span class="nb">bind</span> <span class="k">*</span>:80
    <span class="nb">bind</span> <span class="k">*</span>:443 ssl crt /etc/ssl/certs/website.pem
    redirect scheme https <span class="k">if</span> <span class="o">!{</span> ssl_fc <span class="o">}</span>
    default_backend web_servers

backend web_servers
    balance roundrobin
    option httpchk GET /health
    server web1 192.168.1.10:80 check
    server web2 192.168.1.11:80 check
    server web3 192.168.1.12:80 check backup

<span class="c"># 통계 페이지</span>
listen stats
    <span class="nb">bind</span> <span class="k">*</span>:8080
    stats <span class="nb">enable
    </span>stats uri /stats
    stats refresh 30s
</code></pre></div></div>

<h4 id="nginx-로드-밸런싱">NGINX 로드 밸런싱</h4>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># /etc/nginx/nginx.conf</span>
<span class="k">upstream</span> <span class="s">backend</span> <span class="p">{</span>
    <span class="kn">least_conn</span><span class="p">;</span>  <span class="c1"># 로드 밸런싱 방법</span>
    <span class="kn">server</span> <span class="nf">192.168.1.10</span><span class="p">:</span><span class="mi">80</span> <span class="s">max_fails=3</span> <span class="s">fail_timeout=30s</span><span class="p">;</span>
    <span class="kn">server</span> <span class="nf">192.168.1.11</span><span class="p">:</span><span class="mi">80</span> <span class="s">max_fails=3</span> <span class="s">fail_timeout=30s</span><span class="p">;</span>
    <span class="kn">server</span> <span class="nf">192.168.1.12</span><span class="p">:</span><span class="mi">80</span> <span class="s">backup</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">proxy_pass</span> <span class="s">http://backend</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
        
        <span class="c1"># 헬스 체크</span>
        <span class="kn">proxy_connect_timeout</span> <span class="s">1s</span><span class="p">;</span>
        <span class="kn">proxy_send_timeout</span> <span class="s">1s</span><span class="p">;</span>
        <span class="kn">proxy_read_timeout</span> <span class="s">1s</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="-네트워크-보안-심화">🔐 네트워크 보안 심화</h3>

<h4 id="포트-보안-port-security">포트 보안 (Port Security)</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># MAC 주소 기반 포트 보안</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface fastethernet 0/1</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport port-security</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport port-security maximum 2</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport port-security mac-address sticky</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># switchport port-security violation restrict</span>

<span class="c"># 802.1X 인증 설정</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># aaa new-model</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># aaa authentication dot1x default group radius</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># dot1x system-auth-control</span>
Switch<span class="o">(</span>config<span class="o">)</span><span class="c"># interface fastethernet 0/1</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># authentication port-control auto</span>
Switch<span class="o">(</span>config-if<span class="o">)</span><span class="c"># dot1x pae authenticator</span>
</code></pre></div></div>

<h4 id="acl-access-control-list-심화">ACL (Access Control List) 심화</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 확장 ACL</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># ip access-list extended BLOCK_SOCIAL</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># deny tcp any host 23.35.67.140 eq 80</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># deny tcp any host 23.35.67.141 eq 443  </span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># permit ip any any</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># exit</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># interface fastethernet 0/1</span>
Router<span class="o">(</span>config-if<span class="o">)</span><span class="c"># ip access-group BLOCK_SOCIAL out</span>

<span class="c"># 시간 기반 ACL</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># time-range WORK_HOURS</span>
Router<span class="o">(</span>config-time-range<span class="o">)</span><span class="c"># periodic weekdays 09:00 to 18:00</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># ip access-list extended TIME_BASED</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># permit tcp 192.168.1.0 0.0.0.255 any eq 80 time-range WORK_HOURS</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># deny tcp 192.168.1.0 0.0.0.255 any eq 80</span>

<span class="c"># 반사형 ACL (Reflexive ACL)</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># ip access-list extended OUTBOUND</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># permit tcp 192.168.1.0 0.0.0.255 any reflect TCP_TRAFFIC</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># permit icmp 192.168.1.0 0.0.0.255 any reflect ICMP_TRAFFIC</span>

Router<span class="o">(</span>config<span class="o">)</span><span class="c"># ip access-list extended INBOUND  </span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># evaluate TCP_TRAFFIC</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># evaluate ICMP_TRAFFIC</span>
Router<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c"># deny ip any any</span>
</code></pre></div></div>

<h2 id="네트워크-모니터링-및-문제-해결--network-monitoring--troubleshooting">네트워크 모니터링 및 문제 해결 | Network Monitoring &amp; Troubleshooting</h2>

<h3 id="-snmp-simple-network-management-protocol">📊 SNMP (Simple Network Management Protocol)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SNMP v3 설정 (Cisco)</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># snmp-server view READONLY iso included</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># snmp-server group ADMIN v3 auth read READONLY  </span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># snmp-server user admin ADMIN v3 auth sha password123 priv aes 128 password456</span>
Router<span class="o">(</span>config<span class="o">)</span><span class="c"># snmp-server host 192.168.1.100 version 3 auth admin</span>

<span class="c"># Linux SNMP 클라이언트</span>
<span class="c"># OID를 이용한 정보 조회</span>
snmpwalk <span class="nt">-v3</span> <span class="nt">-u</span> admin <span class="nt">-a</span> SHA <span class="nt">-A</span> password123 <span class="nt">-x</span> AES <span class="nt">-X</span> password456 <span class="nt">-l</span> authPriv 192.168.1.1 1.3.6.1.2.1.1

<span class="c"># 인터페이스 통계 조회</span>
snmpwalk <span class="nt">-v3</span> <span class="nt">-u</span> admin <span class="nt">-a</span> SHA <span class="nt">-A</span> password123 <span class="nt">-x</span> AES <span class="nt">-X</span> password456 <span class="nt">-l</span> authPriv 192.168.1.1 1.3.6.1.2.1.2.2.1.10
</code></pre></div></div>

<h3 id="-네트워크-분석-도구">🔍 네트워크 분석 도구</h3>

<h4 id="wireshark-고급-필터">Wireshark 고급 필터</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 프로토콜별 필터</span>
tcp.port <span class="o">==</span> 80                    <span class="c"># HTTP 트래픽</span>
tcp.flags.syn <span class="o">==</span> 1 and tcp.flags.ack <span class="o">==</span> 0  <span class="c"># TCP SYN 패킷</span>
icmp.type <span class="o">==</span> 8                    <span class="c"># ICMP Echo Request</span>
dns.qry.name contains <span class="s2">"google"</span>    <span class="c"># DNS 쿼리</span>

<span class="c"># 네트워크별 필터</span>
ip.src <span class="o">==</span> 192.168.1.0/24          <span class="c"># 소스 네트워크</span>
ip.dst <span class="o">==</span> 10.0.0.0/8             <span class="c"># 목적지 네트워크</span>
eth.addr <span class="o">==</span> 00:11:22:33:44:55     <span class="c"># MAC 주소</span>

<span class="c"># 성능 분석</span>
tcp.analysis.retransmission       <span class="c"># TCP 재전송</span>
tcp.analysis.duplicate_ack        <span class="c"># 중복 ACK</span>
tcp.analysis.zero_window          <span class="c"># 제로 윈도우</span>
</code></pre></div></div>

<h4 id="네트워크-성능-측정">네트워크 성능 측정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 대역폭 측정 (iperf3)</span>
<span class="c"># 서버 모드</span>
iperf3 <span class="nt">-s</span> <span class="nt">-p</span> 5201

<span class="c"># 클라이언트 모드  </span>
iperf3 <span class="nt">-c</span> 192.168.1.100 <span class="nt">-p</span> 5201 <span class="nt">-t</span> 60 <span class="nt">-P</span> 4

<span class="c"># UDP 측정</span>
iperf3 <span class="nt">-c</span> 192.168.1.100 <span class="nt">-u</span> <span class="nt">-b</span> 100M

<span class="c"># 지연 시간 측정 (hping3)</span>
hping3 <span class="nt">-S</span> <span class="nt">-p</span> 80 <span class="nt">-c</span> 10 google.com
hping3 <span class="nt">-1</span> <span class="nt">-c</span> 100 <span class="nt">-i</span> u1000 192.168.1.1  <span class="c"># 마이크로초 간격</span>

<span class="c"># MTU 경로 발견</span>
tracepath google.com
ping <span class="nt">-M</span> <span class="k">do</span> <span class="nt">-s</span> 1472 google.com
</code></pre></div></div>

<h2 id="2-3-iac-infrastructure-as-code--코드형-인프라">2-3 IaC (Infrastructure as Code) | 코드형 인프라</h2>

<h3 id="2-3-1-iac-종류--types-of-iac">2-3-1 IaC 종류 | Types of IaC</h3>

<p>IaC는 인프라를 코드로 정의하고 관리하는 방법론으로, 네트워크 인프라 구축과 관리를 자동화합니다.</p>

<h4 id="️-주요-iac-도구-분류">🛠️ 주요 IaC 도구 분류</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 선언적 vs 명령적</span>
선언적 <span class="o">(</span>Declarative<span class="o">)</span>:
- Terraform, CloudFormation, Ansible <span class="o">(</span>일부<span class="o">)</span>
- 최종 상태를 정의
- 더 안정적이고 예측 가능

명령적 <span class="o">(</span>Imperative<span class="o">)</span>:  
- Shell Scripts, Python Scripts
- 실행 단계를 정의
- 더 유연하지만 복잡함

<span class="c"># 에이전트 기반 vs 에이전트리스</span>
에이전트 기반:
- Puppet, Chef
- 대상 시스템에 에이전트 설치 필요
- 지속적인 상태 관리

에이전트리스:
- Ansible, Terraform
- SSH/WinRM 등을 통한 원격 실행
- 설치 부담 없음
</code></pre></div></div>

<h4 id="terraform">Terraform</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Provider 설정</span>
<span class="nx">terraform</span> <span class="p">{</span>
  <span class="nx">required_version</span> <span class="o">=</span> <span class="s2">"&gt;= 1.0"</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="o">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="o">=</span> <span class="s2">"~&gt; 5.0"</span>
    <span class="p">}</span>
    <span class="nx">cisco</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="o">=</span> <span class="s2">"CiscoDevNet/aci"</span>
      <span class="nx">version</span> <span class="o">=</span> <span class="s2">"~&gt; 2.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># 변수 정의</span>
<span class="nx">variable</span> <span class="s2">"vpc_cidr"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"CIDR block for VPC"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="s2">"10.0.0.0/16"</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"environment"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Environment name"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="s2">"production"</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="ansible">Ansible</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 네트워크 장비 인벤토리 (/etc/ansible/hosts)</span>
<span class="pi">[</span><span class="nv">switches</span><span class="pi">]</span>
<span class="s">switch1 ansible_host=192.168.1.10 ansible_network_os=ios</span>
<span class="s">switch2 ansible_host=192.168.1.11 ansible_network_os=ios</span>

<span class="pi">[</span><span class="nv">routers</span><span class="pi">]</span>  
<span class="s">router1 ansible_host=192.168.1.1 ansible_network_os=ios</span>
<span class="s">router2 ansible_host=192.168.1.2 ansible_network_os=ios</span>

<span class="pi">[</span><span class="nv">network</span><span class="pi">:</span><span class="nv">children</span><span class="pi">]</span>
<span class="s">switches</span>
<span class="s">routers</span>

<span class="pi">[</span><span class="nv">network</span><span class="pi">:</span><span class="nv">vars</span><span class="pi">]</span>
<span class="s">ansible_user=admin</span>
<span class="s">ansible_password=password</span>
<span class="s">ansible_connection=network_cli</span>
<span class="s">ansible_become=yes</span>
<span class="s">ansible_become_method=enable</span>
</code></pre></div></div>

<h4 id="cloudformation-aws">CloudFormation (AWS)</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># AWS 네트워크 인프라 템플릿</span>
<span class="na">AWSTemplateFormatVersion</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2010-09-09'</span>
<span class="na">Description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Network</span><span class="nv"> </span><span class="s">Infrastructure</span><span class="nv"> </span><span class="s">Template'</span>

<span class="na">Parameters</span><span class="pi">:</span>
  <span class="na">EnvironmentName</span><span class="pi">:</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">Environment name prefix</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">String</span>
    <span class="na">Default</span><span class="pi">:</span> <span class="s">Production</span>

<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">VPC</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::EC2::VPC</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">CidrBlock</span><span class="pi">:</span> <span class="s">10.0.0.0/16</span>
      <span class="na">EnableDnsHostnames</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">EnableDnsSupport</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">Tags</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">Key</span><span class="pi">:</span> <span class="s">Name</span>
          <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Sub</span> <span class="s">${EnvironmentName}-VPC</span>
</code></pre></div></div>

<h4 id="pulumi">Pulumi</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python을 이용한 IaC
</span><span class="kn">import</span> <span class="n">pulumi</span>
<span class="kn">import</span> <span class="n">pulumi_aws</span> <span class="k">as</span> <span class="n">aws</span>

<span class="c1"># VPC 생성
</span><span class="n">vpc</span> <span class="o">=</span> <span class="n">aws</span><span class="p">.</span><span class="n">ec2</span><span class="p">.</span><span class="nc">Vpc</span><span class="p">(</span><span class="sh">"</span><span class="s">main-vpc</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">cidr_block</span><span class="o">=</span><span class="sh">"</span><span class="s">10.0.0.0/16</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">enable_dns_hostnames</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">enable_dns_support</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">tags</span><span class="o">=</span><span class="p">{</span>
        <span class="sh">"</span><span class="s">Name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">main-vpc</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Environment</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">production</span><span class="sh">"</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="c1"># 서브넷 생성
</span><span class="n">public_subnet</span> <span class="o">=</span> <span class="n">aws</span><span class="p">.</span><span class="n">ec2</span><span class="p">.</span><span class="nc">Subnet</span><span class="p">(</span><span class="sh">"</span><span class="s">public-subnet</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">vpc_id</span><span class="o">=</span><span class="n">vpc</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
    <span class="n">cidr_block</span><span class="o">=</span><span class="sh">"</span><span class="s">10.0.1.0/24</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">availability_zone</span><span class="o">=</span><span class="sh">"</span><span class="s">us-west-2a</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">map_public_ip_on_launch</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">tags</span><span class="o">=</span><span class="p">{</span>
        <span class="sh">"</span><span class="s">Name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">public-subnet</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Public</span><span class="sh">"</span>
    <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="cdk-cloud-development-kit">CDK (Cloud Development Kit)</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// TypeScript를 이용한 AWS CDK</span>
<span class="k">import</span> <span class="o">*</span> <span class="kd">as </span><span class="nx">cdk</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">aws-cdk-lib</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="kd">as </span><span class="nx">ec2</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">aws-cdk-lib/aws-ec2</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nc">NetworkStack</span> <span class="kd">extends</span> <span class="nc">cdk</span><span class="p">.</span><span class="nx">Stack</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">App</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">props</span><span class="p">?:</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">StackProps</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">props</span><span class="p">);</span>

    <span class="c1">// VPC 생성</span>
    <span class="kd">const</span> <span class="nx">vpc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ec2</span><span class="p">.</span><span class="nc">Vpc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">MainVpc</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">maxAzs</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
      <span class="na">cidr</span><span class="p">:</span> <span class="dl">'</span><span class="s1">10.0.0.0/16</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">subnetConfiguration</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="na">cidrMask</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span>
          <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Public</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">subnetType</span><span class="p">:</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">SubnetType</span><span class="p">.</span><span class="nx">PUBLIC</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">cidrMask</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span>
          <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Private</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">subnetType</span><span class="p">:</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">SubnetType</span><span class="p">.</span><span class="nx">PRIVATE_WITH_EGRESS</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-3-2-테라폼으로-환경-구성--environment-setup-with-terraform">2-3-2 테라폼으로 환경 구성 | Environment Setup with Terraform</h3>

<p>Terraform을 사용하여 완전한 네트워크 환경을 구성해보겠습니다.</p>

<h4 id="️-프로젝트-구조-설계">🏗️ 프로젝트 구조 설계</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 디렉토리 구조</span>
terraform-network/
├── environments/
│   ├── dev/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── terraform.tfvars
│   ├── staging/
│   └── production/
├── modules/
│   ├── vpc/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   ├── security-groups/
│   └── load-balancer/
├── global/
│   └── iam/
└── shared/
    └── data.tf
</code></pre></div></div>

<h4 id="vpc-모듈-구현">VPC 모듈 구현</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># modules/vpc/main.tf</span>
<span class="nx">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"main"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span>           <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">cidr_block</span>
  <span class="nx">enable_dns_hostnames</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">enable_dns_hostnames</span>
  <span class="nx">enable_dns_support</span>   <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">enable_dns_support</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-vpc"</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1"># 인터넷 게이트웨이</span>
<span class="nx">resource</span> <span class="s2">"aws_internet_gateway"</span> <span class="s2">"main"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="o">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">id</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-igw"</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1"># 가용 영역별 퍼블릭 서브넷</span>
<span class="nx">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"public"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">length</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">public_subnets</span><span class="p">)</span>

  <span class="nx">vpc_id</span>                  <span class="o">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span>              <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">public_subnets</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
  <span class="nx">availability_zone</span>       <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">availability_zones</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
  <span class="nx">map_public_ip_on_launch</span> <span class="o">=</span> <span class="kc">true</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-public-${count.index + 1}"</span>
    <span class="nx">Type</span> <span class="o">=</span> <span class="s2">"Public"</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1"># 프라이빗 서브넷</span>
<span class="nx">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"private"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">length</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">private_subnets</span><span class="p">)</span>

  <span class="nx">vpc_id</span>            <span class="o">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span>        <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">private_subnets</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
  <span class="nx">availability_zone</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">availability_zones</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-private-${count.index + 1}"</span>
    <span class="nx">Type</span> <span class="o">=</span> <span class="s2">"Private"</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1"># NAT 게이트웨이를 위한 EIP</span>
<span class="nx">resource</span> <span class="s2">"aws_eip"</span> <span class="s2">"nat"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">enable_nat_gateway</span> <span class="o">?</span> <span class="nx">length</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">public_subnets</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span>

  <span class="nx">domain</span> <span class="o">=</span> <span class="s2">"vpc"</span>
  <span class="nx">depends_on</span> <span class="o">=</span> <span class="p">[</span><span class="nx">aws_internet_gateway</span><span class="p">.</span><span class="nx">main</span><span class="p">]</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-nat-eip-${count.index + 1}"</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1"># NAT 게이트웨이</span>
<span class="nx">resource</span> <span class="s2">"aws_nat_gateway"</span> <span class="s2">"main"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">enable_nat_gateway</span> <span class="o">?</span> <span class="nx">length</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">public_subnets</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span>

  <span class="nx">allocation_id</span> <span class="o">=</span> <span class="nx">aws_eip</span><span class="p">.</span><span class="nx">nat</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">].</span><span class="nx">id</span>
  <span class="nx">subnet_id</span>     <span class="o">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">public</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">].</span><span class="nx">id</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-nat-gw-${count.index + 1}"</span>
  <span class="p">})</span>

  <span class="nx">depends_on</span> <span class="o">=</span> <span class="p">[</span><span class="nx">aws_internet_gateway</span><span class="p">.</span><span class="nx">main</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1"># 퍼블릭 라우트 테이블</span>
<span class="nx">resource</span> <span class="s2">"aws_route_table"</span> <span class="s2">"public"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="o">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">id</span>

  <span class="nx">route</span> <span class="p">{</span>
    <span class="nx">cidr_block</span> <span class="o">=</span> <span class="s2">"0.0.0.0/0"</span>
    <span class="nx">gateway_id</span> <span class="o">=</span> <span class="nx">aws_internet_gateway</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">id</span>
  <span class="p">}</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-public-rt"</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1"># 프라이빗 라우트 테이블</span>
<span class="nx">resource</span> <span class="s2">"aws_route_table"</span> <span class="s2">"private"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">enable_nat_gateway</span> <span class="o">?</span> <span class="nx">length</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">private_subnets</span><span class="p">)</span> <span class="o">:</span> <span class="mi">1</span>

  <span class="nx">vpc_id</span> <span class="o">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">id</span>

  <span class="nx">dynamic</span> <span class="s2">"route"</span> <span class="p">{</span>
    <span class="nx">for_each</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">enable_nat_gateway</span> <span class="o">?</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="p">[]</span>
    <span class="nx">content</span> <span class="p">{</span>
      <span class="nx">cidr_block</span>     <span class="o">=</span> <span class="s2">"0.0.0.0/0"</span>
      <span class="nx">nat_gateway_id</span> <span class="o">=</span> <span class="nx">aws_nat_gateway</span><span class="p">.</span><span class="nx">main</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">].</span><span class="nx">id</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-private-rt-${count.index + 1}"</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1"># 라우트 테이블 연결</span>
<span class="nx">resource</span> <span class="s2">"aws_route_table_association"</span> <span class="s2">"public"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">length</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">public_subnets</span><span class="p">)</span>

  <span class="nx">subnet_id</span>      <span class="o">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">public</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">].</span><span class="nx">id</span>
  <span class="nx">route_table_id</span> <span class="o">=</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">public</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>

<span class="nx">resource</span> <span class="s2">"aws_route_table_association"</span> <span class="s2">"private"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">length</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">private_subnets</span><span class="p">)</span>

  <span class="nx">subnet_id</span>      <span class="o">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">private</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">].</span><span class="nx">id</span>
  <span class="nx">route_table_id</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">enable_nat_gateway</span> <span class="o">?</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">private</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">].</span><span class="nx">id</span> <span class="o">:</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">private</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="vpc-모듈-변수">VPC 모듈 변수</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># modules/vpc/variables.tf</span>
<span class="nx">variable</span> <span class="s2">"name_prefix"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Name prefix for all resources"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"cidr_block"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"CIDR block for the VPC"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"public_subnets"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"List of public subnet CIDR blocks"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"private_subnets"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"List of private subnet CIDR blocks"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"availability_zones"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"List of availability zones"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"enable_nat_gateway"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Enable NAT Gateway for private subnets"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">bool</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"enable_dns_hostnames"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Enable DNS hostnames in the VPC"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">bool</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"enable_dns_support"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Enable DNS support in the VPC"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">bool</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"tags"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Tags to apply to all resources"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="vpc-모듈-출력">VPC 모듈 출력</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># modules/vpc/outputs.tf</span>
<span class="nx">output</span> <span class="s2">"vpc_id"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"ID of the VPC"</span>
  <span class="nx">value</span>       <span class="o">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>

<span class="nx">output</span> <span class="s2">"vpc_cidr_block"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"CIDR block of the VPC"</span>
  <span class="nx">value</span>       <span class="o">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">cidr_block</span>
<span class="p">}</span>

<span class="nx">output</span> <span class="s2">"public_subnet_ids"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"IDs of the public subnets"</span>
  <span class="nx">value</span>       <span class="o">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">public</span><span class="p">[*].</span><span class="nx">id</span>
<span class="p">}</span>

<span class="nx">output</span> <span class="s2">"private_subnet_ids"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"IDs of the private subnets"</span>
  <span class="nx">value</span>       <span class="o">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">private</span><span class="p">[*].</span><span class="nx">id</span>
<span class="p">}</span>

<span class="nx">output</span> <span class="s2">"internet_gateway_id"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"ID of the Internet Gateway"</span>
  <span class="nx">value</span>       <span class="o">=</span> <span class="nx">aws_internet_gateway</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>

<span class="nx">output</span> <span class="s2">"nat_gateway_ids"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"IDs of the NAT Gateways"</span>
  <span class="nx">value</span>       <span class="o">=</span> <span class="nx">aws_nat_gateway</span><span class="p">.</span><span class="nx">main</span><span class="p">[*].</span><span class="nx">id</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="보안-그룹-모듈">보안 그룹 모듈</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># modules/security-groups/main.tf</span>
<span class="c1"># 웹 서버 보안 그룹</span>
<span class="nx">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="nx">name_prefix</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-web-"</span>
  <span class="nx">vpc_id</span>      <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">vpc_id</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Security group for web servers"</span>

  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">description</span> <span class="o">=</span> <span class="s2">"HTTP"</span>
    <span class="nx">from_port</span>   <span class="o">=</span> <span class="mi">80</span>
    <span class="nx">to_port</span>     <span class="o">=</span> <span class="mi">80</span>
    <span class="nx">protocol</span>    <span class="o">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">description</span> <span class="o">=</span> <span class="s2">"HTTPS"</span>
    <span class="nx">from_port</span>   <span class="o">=</span> <span class="mi">443</span>
    <span class="nx">to_port</span>     <span class="o">=</span> <span class="mi">443</span>
    <span class="nx">protocol</span>    <span class="o">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">description</span>     <span class="o">=</span> <span class="s2">"SSH from management"</span>
    <span class="nx">from_port</span>       <span class="o">=</span> <span class="mi">22</span>
    <span class="nx">to_port</span>         <span class="o">=</span> <span class="mi">22</span>
    <span class="nx">protocol</span>        <span class="o">=</span> <span class="s2">"tcp"</span>
    <span class="nx">security_groups</span> <span class="o">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">management</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="nx">egress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="o">=</span> <span class="mi">0</span>
    <span class="nx">to_port</span>     <span class="o">=</span> <span class="mi">0</span>
    <span class="nx">protocol</span>    <span class="o">=</span> <span class="s2">"-1"</span>
    <span class="nx">cidr_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-web-sg"</span>
  <span class="p">})</span>

  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">create_before_destroy</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># 데이터베이스 보안 그룹</span>
<span class="nx">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"database"</span> <span class="p">{</span>
  <span class="nx">name_prefix</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-db-"</span>
  <span class="nx">vpc_id</span>      <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">vpc_id</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Security group for database servers"</span>

  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">description</span>     <span class="o">=</span> <span class="s2">"MySQL/MariaDB"</span>
    <span class="nx">from_port</span>       <span class="o">=</span> <span class="mi">3306</span>
    <span class="nx">to_port</span>         <span class="o">=</span> <span class="mi">3306</span>
    <span class="nx">protocol</span>        <span class="o">=</span> <span class="s2">"tcp"</span>
    <span class="nx">security_groups</span> <span class="o">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">web</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">description</span>     <span class="o">=</span> <span class="s2">"PostgreSQL"</span>
    <span class="nx">from_port</span>       <span class="o">=</span> <span class="mi">5432</span>
    <span class="nx">to_port</span>         <span class="o">=</span> <span class="mi">5432</span>
    <span class="nx">protocol</span>        <span class="o">=</span> <span class="s2">"tcp"</span>
    <span class="nx">security_groups</span> <span class="o">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">web</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-db-sg"</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="c1"># 관리 보안 그룹</span>
<span class="nx">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"management"</span> <span class="p">{</span>
  <span class="nx">name_prefix</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-mgmt-"</span>
  <span class="nx">vpc_id</span>      <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">vpc_id</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Security group for management access"</span>

  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">description</span> <span class="o">=</span> <span class="s2">"SSH"</span>
    <span class="nx">from_port</span>   <span class="o">=</span> <span class="mi">22</span>
    <span class="nx">to_port</span>     <span class="o">=</span> <span class="mi">22</span>
    <span class="nx">protocol</span>    <span class="o">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="o">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">management_cidr_blocks</span>
  <span class="p">}</span>

  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">description</span> <span class="o">=</span> <span class="s2">"RDP"</span>
    <span class="nx">from_port</span>   <span class="o">=</span> <span class="mi">3389</span>
    <span class="nx">to_port</span>     <span class="o">=</span> <span class="mi">3389</span>
    <span class="nx">protocol</span>    <span class="o">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="o">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">management_cidr_blocks</span>
  <span class="p">}</span>

  <span class="nx">egress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="o">=</span> <span class="mi">0</span>
    <span class="nx">to_port</span>     <span class="o">=</span> <span class="mi">0</span>
    <span class="nx">protocol</span>    <span class="o">=</span> <span class="s2">"-1"</span>
    <span class="nx">cidr_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">var</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-mgmt-sg"</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="메인-환경-설정">메인 환경 설정</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># environments/production/main.tf</span>
<span class="nx">terraform</span> <span class="p">{</span>
  <span class="nx">required_version</span> <span class="o">=</span> <span class="s2">"&gt;= 1.0"</span>
  
  <span class="nx">backend</span> <span class="s2">"s3"</span> <span class="p">{</span>
    <span class="nx">bucket</span>         <span class="o">=</span> <span class="s2">"company-terraform-state"</span>
    <span class="nx">key</span>            <span class="o">=</span> <span class="s2">"network/production/terraform.tfstate"</span>
    <span class="nx">region</span>         <span class="o">=</span> <span class="s2">"us-west-2"</span>
    <span class="nx">encrypt</span>        <span class="o">=</span> <span class="kc">true</span>
    <span class="nx">dynamodb_table</span> <span class="o">=</span> <span class="s2">"terraform-locks"</span>
  <span class="p">}</span>

  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="o">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="o">=</span> <span class="s2">"~&gt; 5.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">aws_region</span>
  
  <span class="nx">default_tags</span> <span class="p">{</span>
    <span class="nx">tags</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">Environment</span>   <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">environment</span>
      <span class="nx">Project</span>       <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">project_name</span>
      <span class="nx">ManagedBy</span>     <span class="o">=</span> <span class="s2">"Terraform"</span>
      <span class="nx">CreatedBy</span>     <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">created_by</span>
      <span class="nx">CostCenter</span>    <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">cost_center</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># 데이터 소스</span>
<span class="nx">data</span> <span class="s2">"aws_availability_zones"</span> <span class="s2">"available"</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="s2">"available"</span>
<span class="p">}</span>

<span class="c1"># VPC 모듈 호출</span>
<span class="nx">module</span> <span class="s2">"vpc"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="o">=</span> <span class="s2">"../../modules/vpc"</span>

  <span class="nx">name_prefix</span>        <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">name_prefix</span>
  <span class="nx">cidr_block</span>         <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">vpc_cidr</span>
  <span class="nx">public_subnets</span>     <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">public_subnet_cidrs</span>
  <span class="nx">private_subnets</span>    <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">private_subnet_cidrs</span>
  <span class="nx">availability_zones</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">aws_availability_zones</span><span class="p">.</span><span class="nx">available</span><span class="p">.</span><span class="nx">names</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
  <span class="nx">enable_nat_gateway</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">enable_nat_gateway</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">local</span><span class="p">.</span><span class="nx">common_tags</span>
<span class="p">}</span>

<span class="c1"># 보안 그룹 모듈 호출</span>
<span class="nx">module</span> <span class="s2">"security_groups"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="o">=</span> <span class="s2">"../../modules/security-groups"</span>

  <span class="nx">name_prefix</span>             <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">name_prefix</span>
  <span class="nx">vpc_id</span>                  <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">vpc</span><span class="p">.</span><span class="nx">vpc_id</span>
  <span class="nx">management_cidr_blocks</span>  <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">management_cidr_blocks</span>

  <span class="nx">tags</span> <span class="o">=</span> <span class="nx">local</span><span class="p">.</span><span class="nx">common_tags</span>
<span class="p">}</span>

<span class="c1"># 로컬 값</span>
<span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">common_tags</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">Environment</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">environment</span>
    <span class="nx">Project</span>     <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">project_name</span>
    <span class="nx">ManagedBy</span>   <span class="o">=</span> <span class="s2">"Terraform"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="환경별-변수-파일">환경별 변수 파일</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># environments/production/variables.tf</span>
<span class="nx">variable</span> <span class="s2">"aws_region"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"AWS region"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="s2">"us-west-2"</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"environment"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Environment name"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="s2">"production"</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"project_name"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Project name"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"name_prefix"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Name prefix for resources"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"vpc_cidr"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"CIDR block for VPC"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"public_subnet_cidrs"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"CIDR blocks for public subnets"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"private_subnet_cidrs"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"CIDR blocks for private subnets"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"enable_nat_gateway"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Enable NAT Gateway"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">bool</span>
  <span class="nx">default</span>     <span class="o">=</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"management_cidr_blocks"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"CIDR blocks allowed for management access"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"created_by"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Creator of the infrastructure"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="nx">variable</span> <span class="s2">"cost_center"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="o">=</span> <span class="s2">"Cost center for billing"</span>
  <span class="nx">type</span>        <span class="o">=</span> <span class="nx">string</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="terraform-실행-값">Terraform 실행 값</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># environments/production/terraform.tfvars</span>
<span class="nx">project_name</span> <span class="o">=</span> <span class="s2">"company-web-app"</span>
<span class="nx">name_prefix</span>  <span class="o">=</span> <span class="s2">"prod-webapp"</span>

<span class="nx">vpc_cidr</span> <span class="o">=</span> <span class="s2">"10.0.0.0/16"</span>

<span class="nx">public_subnet_cidrs</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">"10.0.1.0/24"</span><span class="p">,</span>
  <span class="s2">"10.0.2.0/24"</span><span class="p">,</span> 
  <span class="s2">"10.0.3.0/24"</span>
<span class="p">]</span>

<span class="nx">private_subnet_cidrs</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">"10.0.11.0/24"</span><span class="p">,</span>
  <span class="s2">"10.0.12.0/24"</span><span class="p">,</span>
  <span class="s2">"10.0.13.0/24"</span>
<span class="p">]</span>

<span class="nx">enable_nat_gateway</span> <span class="o">=</span> <span class="kc">true</span>

<span class="nx">management_cidr_blocks</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">"203.0.113.0/24"</span><span class="p">,</span>  <span class="c1"># 회사 사무실</span>
  <span class="s2">"198.51.100.0/24"</span>  <span class="c1"># VPN 네트워크</span>
<span class="p">]</span>

<span class="nx">created_by</span>   <span class="o">=</span> <span class="s2">"devops-team"</span>
<span class="nx">cost_center</span>  <span class="o">=</span> <span class="s2">"engineering"</span>
</code></pre></div></div>

<h4 id="terraform-실행-및-관리">Terraform 실행 및 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 초기화</span>
terraform init

<span class="c"># 계획 확인  </span>
terraform plan <span class="nt">-var-file</span><span class="o">=</span><span class="s2">"terraform.tfvars"</span>

<span class="c"># 적용</span>
terraform apply <span class="nt">-var-file</span><span class="o">=</span><span class="s2">"terraform.tfvars"</span>

<span class="c"># 상태 확인</span>
terraform show
terraform state list

<span class="c"># 리소스 확인</span>
terraform state show module.vpc.aws_vpc.main

<span class="c"># 출력 값 확인</span>
terraform output

<span class="c"># 리소스 삭제</span>
terraform destroy <span class="nt">-var-file</span><span class="o">=</span><span class="s2">"terraform.tfvars"</span>

<span class="c"># 워크스페이스 관리</span>
terraform workspace new staging
terraform workspace <span class="k">select </span>production
terraform workspace list
</code></pre></div></div>

<h4 id="고급-terraform-기능">고급 Terraform 기능</h4>
<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 조건부 리소스 생성</span>
<span class="nx">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">environment</span> <span class="o">==</span> <span class="s2">"production"</span> <span class="o">?</span> <span class="mi">3</span> <span class="o">:</span> <span class="mi">1</span>
  
  <span class="nx">ami</span>           <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">amazon_linux</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">instance_type</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">environment</span> <span class="o">==</span> <span class="s2">"production"</span> <span class="o">?</span> <span class="s2">"t3.medium"</span> <span class="o">:</span> <span class="s2">"t3.micro"</span>
  
  <span class="nx">tags</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-web-${count.index + 1}"</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># 동적 블록</span>
<span class="nx">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="nx">name_prefix</span> <span class="o">=</span> <span class="s2">"${var.name_prefix}-web-"</span>
  <span class="nx">vpc_id</span>      <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">vpc_id</span>

  <span class="nx">dynamic</span> <span class="s2">"ingress"</span> <span class="p">{</span>
    <span class="nx">for_each</span> <span class="o">=</span> <span class="nx">var</span><span class="p">.</span><span class="nx">ingress_rules</span>
    <span class="nx">content</span> <span class="p">{</span>
      <span class="nx">from_port</span>   <span class="o">=</span> <span class="nx">ingress</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">from_port</span>
      <span class="nx">to_port</span>     <span class="o">=</span> <span class="nx">ingress</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">to_port</span>
      <span class="nx">protocol</span>    <span class="o">=</span> <span class="nx">ingress</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">protocol</span>
      <span class="nx">cidr_blocks</span> <span class="o">=</span> <span class="nx">ingress</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">cidr_blocks</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># 데이터 소스 활용</span>
<span class="nx">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"amazon_linux"</span> <span class="p">{</span>
  <span class="nx">most_recent</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="nx">owners</span>      <span class="o">=</span> <span class="p">[</span><span class="s2">"amazon"</span><span class="p">]</span>

  <span class="nx">filter</span> <span class="p">{</span>
    <span class="nx">name</span>   <span class="o">=</span> <span class="s2">"name"</span>
    <span class="nx">values</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"amzn2-ami-hvm-*-x86_64-gp2"</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># 원격 상태 참조</span>
<span class="nx">data</span> <span class="s2">"terraform_remote_state"</span> <span class="s2">"vpc"</span> <span class="p">{</span>
  <span class="nx">backend</span> <span class="o">=</span> <span class="s2">"s3"</span>
  <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">bucket</span> <span class="o">=</span> <span class="s2">"company-terraform-state"</span>
    <span class="nx">key</span>    <span class="o">=</span> <span class="s2">"network/production/terraform.tfstate"</span>
    <span class="nx">region</span> <span class="o">=</span> <span class="s2">"us-west-2"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-4-단일-장애-지점-제거--eliminating-single-points-of-failure">2-4 단일 장애 지점 제거 | Eliminating Single Points of Failure</h2>

<h3 id="2-4-1-spof-찾기--identifying-spof">2-4-1 SPOF 찾기 | Identifying SPOF</h3>

<p>단일 장애 지점(SPOF)은 시스템의 한 구성 요소가 실패할 때 전체 시스템이 작동을 멈추게 되는 지점을 말합니다. 네트워크 인프라에서 SPOF를 식별하고 제거하는 것은 고가용성 확보의 핵심입니다.</p>

<h4 id="-spof-식별-방법론">🔍 SPOF 식별 방법론</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SPOF 분석 체크리스트</span>
1. 네트워크 토폴로지 분석
   - 단일 연결점 확인
   - 백업 경로 존재 여부
   - 대역폭 병목 지점

2. 하드웨어 구성 요소 점검
   - 단일 스위치/라우터 의존성
   - 전원 공급 장치
   - 케이블링 경로

3. 서비스 의존성 분석
   - DNS 서버
   - DHCP 서버  
   - 인증 서버 <span class="o">(</span>RADIUS/LDAP<span class="o">)</span>

4. 외부 연결 검토
   - ISP 연결
   - WAN 회선
   - 클라우드 연결
</code></pre></div></div>

<h4 id="네트워크-토폴로지-spof-분석">네트워크 토폴로지 SPOF 분석</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 현재 네트워크 상태 확인</span>
<span class="c"># Linux 환경에서 네트워크 경로 분석</span>
ip route show table main
traceroute <span class="nt">-n</span> 8.8.8.8
mtr <span class="nt">--report</span> <span class="nt">--report-cycles</span><span class="o">=</span>100 google.com

<span class="c"># 라우팅 테이블 분석</span>
netstat <span class="nt">-rn</span>
route <span class="nt">-n</span>

<span class="c"># 인터페이스 상태 확인</span>
ip <span class="nb">link </span>show
ip addr show
ethtool eth0  <span class="c"># 링크 상태, 속도 확인</span>

<span class="c"># Cisco 장비에서 SPOF 분석</span>
show ip route
show interface summary  
show spanning-tree root
show etherchannel summary
show redundancy

<span class="c"># 대역폭 사용률 모니터링</span>
show interface fastethernet 0/1 | include rate
show processes cpu sorted
show memory summary
</code></pre></div></div>

<h4 id="일반적인-네트워크-spof-패턴">일반적인 네트워크 SPOF 패턴</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 단일 업링크 (Single Uplink)</span>
문제: 하나의 업스트림 연결만 존재
영향: 해당 연결 실패 시 전체 네트워크 단절
해결: 이중 업링크 + 로드밸런싱

<span class="c"># 2. 단일 코어 스위치 (Single Core Switch)  </span>
문제: 모든 액세스 스위치가 하나의 코어에 연결
영향: 코어 스위치 실패 시 전체 네트워크 마비
해결: 이중 코어 스위치 + HSRP/VRRP

<span class="c"># 3. 단일 VLAN (Single VLAN)</span>
문제: 브로드캐스트 도메인 과부하
영향: 네트워크 성능 저하, 장애 전파
해결: VLAN 분할 + Inter-VLAN 라우팅

<span class="c"># 4. 단일 ISP (Single ISP)</span>
문제: 하나의 인터넷 서비스 제공업체
영향: ISP 장애 시 인터넷 연결 불가
해결: 멀티 ISP + BGP 라우팅
</code></pre></div></div>

<h4 id="spof-탐지-도구와-스크립트">SPOF 탐지 도구와 스크립트</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
# spof_detector.py - 네트워크 SPOF 탐지 도구
</span>
<span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">import</span> <span class="n">networkx</span> <span class="k">as</span> <span class="n">nx</span>

<span class="k">class</span> <span class="nc">SPOFDetector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">network_graph</span> <span class="o">=</span> <span class="n">nx</span><span class="p">.</span><span class="nc">Graph</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">devices</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">links</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">def</span> <span class="nf">scan_network_topology</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">network_range</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">네트워크 토폴로지 스캔</span><span class="sh">"""</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Scanning network range: </span><span class="si">{</span><span class="n">network_range</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># SNMP을 통한 네트워크 디스커버리
</span>        <span class="n">devices</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">discover_devices</span><span class="p">(</span><span class="n">network_range</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">devices</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">analyze_device</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">identify_spof</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">discover_devices</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">network_range</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">SNMP를 통한 네트워크 장비 발견</span><span class="sh">"""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">nmap -sn </span><span class="si">{</span><span class="n">network_range</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="n">devices</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">):</span>
            <span class="k">if</span> <span class="sh">'</span><span class="s">Nmap scan report</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
                <span class="n">ip</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">devices</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">devices</span>
    
    <span class="k">def</span> <span class="nf">analyze_device</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">device_ip</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">개별 장비 분석</span><span class="sh">"""</span>
        <span class="n">device_info</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">device_ip</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">detect_device_type</span><span class="p">(</span><span class="n">device_ip</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">interfaces</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_interfaces</span><span class="p">(</span><span class="n">device_ip</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">neighbors</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_neighbors</span><span class="p">(</span><span class="n">device_ip</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">redundancy</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">check_redundancy</span><span class="p">(</span><span class="n">device_ip</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">devices</span><span class="p">[</span><span class="n">device_ip</span><span class="p">]</span> <span class="o">=</span> <span class="n">device_info</span>
        <span class="n">self</span><span class="p">.</span><span class="n">network_graph</span><span class="p">.</span><span class="nf">add_node</span><span class="p">(</span><span class="n">device_ip</span><span class="p">,</span> <span class="o">**</span><span class="n">device_info</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">detect_device_type</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">device_ip</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">장비 유형 감지 (라우터/스위치/방화벽)</span><span class="sh">"""</span>
        <span class="c1"># SNMP OID를 통한 장비 유형 확인
</span>        <span class="n">snmp_cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">snmpget -v2c -c public </span><span class="si">{</span><span class="n">device_ip</span><span class="si">}</span><span class="s"> 1.3.6.1.2.1.1.1.0</span><span class="sh">"</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">snmp_cmd</span><span class="p">.</span><span class="nf">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="sh">'</span><span class="s">cisco</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="k">if</span> <span class="sh">'</span><span class="s">router</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">router</span><span class="sh">'</span>
            <span class="k">elif</span> <span class="sh">'</span><span class="s">switch</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
                <span class="k">return</span> <span class="sh">'</span><span class="s">switch</span><span class="sh">'</span>
        
        <span class="k">return</span> <span class="sh">'</span><span class="s">unknown</span><span class="sh">'</span>
    
    <span class="k">def</span> <span class="nf">get_interfaces</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">device_ip</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">인터페이스 정보 수집</span><span class="sh">"""</span>
        <span class="c1"># SNMP를 통한 인터페이스 상태 확인
</span>        <span class="n">interfaces</span> <span class="o">=</span> <span class="p">{}</span>
        
        <span class="c1"># 인터페이스 이름 (1.3.6.1.2.1.2.2.1.2)
</span>        <span class="c1"># 인터페이스 상태 (1.3.6.1.2.1.2.2.1.8)
</span>        <span class="c1"># 인터페이스 속도 (1.3.6.1.2.1.2.2.1.5)
</span>        
        <span class="k">return</span> <span class="n">interfaces</span>
    
    <span class="k">def</span> <span class="nf">get_neighbors</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">device_ip</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">인접 장비 정보 수집 (CDP/LLDP)</span><span class="sh">"""</span>
        <span class="n">neighbors</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># CDP 정보 수집 (1.3.6.1.4.1.9.9.23.1.2.1.1.6)
</span>        <span class="c1"># LLDP 정보 수집 (1.0.8802.1.1.2.1.4.1.1.9)
</span>        
        <span class="k">return</span> <span class="n">neighbors</span>
    
    <span class="k">def</span> <span class="nf">check_redundancy</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">device_ip</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">이중화 구성 확인</span><span class="sh">"""</span>
        <span class="n">redundancy_info</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">power_supplies</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">check_power_supplies</span><span class="p">(</span><span class="n">device_ip</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">uplinks</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">check_uplinks</span><span class="p">(</span><span class="n">device_ip</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">protocols</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">check_redundancy_protocols</span><span class="p">(</span><span class="n">device_ip</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">redundancy_info</span>
    
    <span class="k">def</span> <span class="nf">identify_spof</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">SPOF 식별</span><span class="sh">"""</span>
        <span class="n">spof_list</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># 1. 연결성 분석 - 단일 연결점 찾기
</span>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">network_graph</span><span class="p">.</span><span class="nf">nodes</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">network_graph</span><span class="p">.</span><span class="nf">degree</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">spof_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">single_connection</span><span class="sh">'</span><span class="p">,</span>
                    <span class="sh">'</span><span class="s">device</span><span class="sh">'</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span>
                    <span class="sh">'</span><span class="s">risk</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">high</span><span class="sh">'</span><span class="p">,</span>
                    <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">Device </span><span class="si">{</span><span class="n">node</span><span class="si">}</span><span class="s"> has only one connection</span><span class="sh">'</span>
                <span class="p">})</span>
        
        <span class="c1"># 2. 브리지 포인트 분석
</span>        <span class="n">bridges</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">nx</span><span class="p">.</span><span class="nf">bridges</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">network_graph</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">bridge</span> <span class="ow">in</span> <span class="n">bridges</span><span class="p">:</span>
            <span class="n">spof_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">bridge_link</span><span class="sh">'</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">link</span><span class="sh">'</span><span class="p">:</span> <span class="n">bridge</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">risk</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">critical</span><span class="sh">'</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">Link between </span><span class="si">{</span><span class="n">bridge</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s"> and </span><span class="si">{</span><span class="n">bridge</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s"> is critical</span><span class="sh">'</span>
            <span class="p">})</span>
        
        <span class="c1"># 3. 절단점 분석 (Articulation Points)
</span>        <span class="n">articulation_points</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">nx</span><span class="p">.</span><span class="nf">articulation_points</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">network_graph</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">articulation_points</span><span class="p">:</span>
            <span class="n">spof_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">articulation_point</span><span class="sh">'</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">device</span><span class="sh">'</span><span class="p">:</span> <span class="n">point</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">risk</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">critical</span><span class="sh">'</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">Device </span><span class="si">{</span><span class="n">point</span><span class="si">}</span><span class="s"> is a critical junction point</span><span class="sh">'</span>
            <span class="p">})</span>
        
        <span class="k">return</span> <span class="n">spof_list</span>
    
    <span class="k">def</span> <span class="nf">generate_report</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">spof_list</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">SPOF 분석 보고서 생성</span><span class="sh">"""</span>
        <span class="n">report</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">stdout</span><span class="p">.</span><span class="nf">strip</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">total_devices</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">devices</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">total_spof_issues</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">spof_list</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">critical_issues</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">([</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">spof_list</span> <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="sh">'</span><span class="s">risk</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">critical</span><span class="sh">'</span><span class="p">]),</span>
            <span class="sh">'</span><span class="s">high_issues</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">([</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">spof_list</span> <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="sh">'</span><span class="s">risk</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">high</span><span class="sh">'</span><span class="p">]),</span>
            <span class="sh">'</span><span class="s">spof_details</span><span class="sh">'</span><span class="p">:</span> <span class="n">spof_list</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">recommendations</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">generate_recommendations</span><span class="p">(</span><span class="n">spof_list</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">report</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Usage: python3 spof_detector.py &lt;network_range&gt;</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Example: python3 spof_detector.py 192.168.1.0/24</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">network_range</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">detector</span> <span class="o">=</span> <span class="nc">SPOFDetector</span><span class="p">()</span>
    
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Starting SPOF detection...</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">spof_list</span> <span class="o">=</span> <span class="n">detector</span><span class="p">.</span><span class="nf">scan_network_topology</span><span class="p">(</span><span class="n">network_range</span><span class="p">)</span>
    
    <span class="n">report</span> <span class="o">=</span> <span class="n">detector</span><span class="p">.</span><span class="nf">generate_report</span><span class="p">(</span><span class="n">spof_list</span><span class="p">)</span>
    
    <span class="c1"># JSON 형태로 결과 출력
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">report</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    
    <span class="c1"># 요약 출력
</span>    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== SPOF Detection Summary ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Total devices scanned: </span><span class="si">{</span><span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">total_devices</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">SPOF issues found: </span><span class="si">{</span><span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">total_spof_issues</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Critical issues: </span><span class="si">{</span><span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">critical_issues</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">High risk issues: </span><span class="si">{</span><span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">high_issues</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="ansible을-이용한-spof-점검-자동화">Ansible을 이용한 SPOF 점검 자동화</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="c1"># spof_check.yml - SPOF 점검 플레이북</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Network SPOF Assessment</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">network_devices</span>
  <span class="na">gather_facts</span><span class="pi">:</span> <span class="s">no</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">spof_report</span><span class="pi">:</span> <span class="pi">[]</span>
    
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check device redundancy status</span>
      <span class="na">ios_command</span><span class="pi">:</span>
        <span class="na">commands</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">show redundancy</span>
          <span class="pi">-</span> <span class="s">show environment power</span>
          <span class="pi">-</span> <span class="s">show interface summary</span>
          <span class="pi">-</span> <span class="s">show spanning-tree root</span>
          <span class="pi">-</span> <span class="s">show etherchannel summary</span>
      <span class="na">register</span><span class="pi">:</span> <span class="s">device_status</span>
      
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Analyze redundancy configuration</span>
      <span class="na">set_fact</span><span class="pi">:</span>
        <span class="na">redundancy_analysis</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check for single uplinks</span>
      <span class="na">ios_command</span><span class="pi">:</span>
        <span class="na">commands</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">show cdp neighbors</span>
          <span class="pi">-</span> <span class="s">show interface trunk</span>
      <span class="na">register</span><span class="pi">:</span> <span class="s">uplink_status</span>
      
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Identify SPOF risks</span>
      <span class="na">set_fact</span><span class="pi">:</span>
        <span class="na">spof_risks</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
      <span class="na">loop</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">Single</span><span class="nv"> </span><span class="s">uplink</span><span class="nv"> </span><span class="s">detected"</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">No</span><span class="nv"> </span><span class="s">redundant</span><span class="nv"> </span><span class="s">power"</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">No</span><span class="nv"> </span><span class="s">EtherChannel"</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">uplink_count</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        <span class="na">power_supplies</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        <span class="na">etherchannel_count</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Generate SPOF report</span>
      <span class="na">template</span><span class="pi">:</span>
        <span class="na">src</span><span class="pi">:</span> <span class="s">spof_report.j2</span>
        <span class="na">dest</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/tmp/spof_report_.html"</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">device_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        <span class="na">check_date</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send SPOF alert if critical issues found</span>
      <span class="na">mail</span><span class="pi">:</span>
        <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
        <span class="na">subject</span><span class="pi">:</span> <span class="s2">"</span><span class="s">CRITICAL:</span><span class="nv"> </span><span class="s">SPOF</span><span class="nv"> </span><span class="s">detected</span><span class="nv"> </span><span class="s">on</span><span class="nv"> </span><span class="s">"</span>
        <span class="na">body</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Critical</span><span class="nv"> </span><span class="s">single</span><span class="nv"> </span><span class="s">points</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">failure</span><span class="nv"> </span><span class="s">detected.</span><span class="nv"> </span><span class="s">See</span><span class="nv"> </span><span class="s">attached</span><span class="nv"> </span><span class="s">report."</span>
        <span class="na">attach</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/tmp/spof_report_.html"</span>
      <span class="na">when</span><span class="pi">:</span> <span class="s2">"</span><span class="s">'Single</span><span class="nv"> </span><span class="s">uplink</span><span class="nv"> </span><span class="s">detected'</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">spof_risks</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">'No</span><span class="nv"> </span><span class="s">redundant</span><span class="nv"> </span><span class="s">power'</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">spof_risks"</span>
</code></pre></div></div>

<h4 id="네트워크-토폴로지-시각화">네트워크 토폴로지 시각화</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Graphviz를 이용한 네트워크 토폴로지 생성</span>
<span class="c">#!/bin/bash</span>
<span class="c"># generate_network_topology.sh</span>

<span class="c"># SNMP를 통한 네트워크 맵 생성</span>
generate_dot_file<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"digraph network {"</span> <span class="o">&gt;</span> network.dot
    <span class="nb">echo</span> <span class="s2">"  rankdir=TB;"</span> <span class="o">&gt;&gt;</span> network.dot
    <span class="nb">echo</span> <span class="s2">"  node [shape=box];"</span> <span class="o">&gt;&gt;</span> network.dot
    
    <span class="c"># 각 장비 정보 수집</span>
    <span class="k">for </span>ip <span class="k">in</span> <span class="si">$(</span>nmap <span class="nt">-sn</span> 192.168.1.0/24 | <span class="nb">grep</span> <span class="s2">"Nmap scan report"</span> | <span class="nb">awk</span> <span class="s1">'{print $5}'</span><span class="si">)</span><span class="p">;</span> <span class="k">do
        </span><span class="nv">device_name</span><span class="o">=</span><span class="si">$(</span>snmpget <span class="nt">-v2c</span> <span class="nt">-c</span> public <span class="nv">$ip</span> 1.3.6.1.2.1.1.5.0 2&gt;/dev/null | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">'"'</span> <span class="nt">-f2</span><span class="si">)</span>
        <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$device_name</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"  </span><span class="se">\"</span><span class="nv">$device_name</span><span class="se">\"</span><span class="s2"> [label=</span><span class="se">\"</span><span class="nv">$device_name</span><span class="se">\\</span><span class="s2">n</span><span class="nv">$ip</span><span class="se">\"</span><span class="s2">];"</span> <span class="o">&gt;&gt;</span> network.dot
            
            <span class="c"># CDP 정보로 연결 관계 확인</span>
            <span class="nv">cdp_neighbors</span><span class="o">=</span><span class="si">$(</span>snmpwalk <span class="nt">-v2c</span> <span class="nt">-c</span> public <span class="nv">$ip</span> 1.3.6.1.4.1.9.9.23.1.2.1.1.6 2&gt;/dev/null<span class="si">)</span>
            <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> neighbor<span class="p">;</span> <span class="k">do
                </span><span class="nv">neighbor_name</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$neighbor</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">'"'</span> <span class="nt">-f2</span><span class="si">)</span>
                <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$neighbor_name</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
                    </span><span class="nb">echo</span> <span class="s2">"  </span><span class="se">\"</span><span class="nv">$device_name</span><span class="se">\"</span><span class="s2"> -&gt; </span><span class="se">\"</span><span class="nv">$neighbor_name</span><span class="se">\"</span><span class="s2">;"</span> <span class="o">&gt;&gt;</span> network.dot
                <span class="k">fi
            done</span> <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$cdp_neighbors</span><span class="s2">"</span>
        <span class="k">fi
    done
    
    </span><span class="nb">echo</span> <span class="s2">"}"</span> <span class="o">&gt;&gt;</span> network.dot
<span class="o">}</span>

<span class="c"># DOT 파일을 이미지로 변환</span>
generate_dot_file
dot <span class="nt">-Tpng</span> network.dot <span class="nt">-o</span> network_topology.png
dot <span class="nt">-Tsvg</span> network.dot <span class="nt">-o</span> network_topology.svg

<span class="nb">echo</span> <span class="s2">"Network topology generated: network_topology.png"</span>

<span class="c"># SPOF 하이라이트 버전 생성</span>
<span class="nb">sed</span> <span class="s1">'s/node \[shape=box\];/node [shape=box]; edge [color=red, penwidth=3];/'</span> network.dot <span class="o">&gt;</span> network_spof.dot
dot <span class="nt">-Tpng</span> network_spof.dot <span class="nt">-o</span> network_spof.png

<span class="nb">echo</span> <span class="s2">"SPOF highlighted topology: network_spof.png"</span>
</code></pre></div></div>

<h4 id="실시간-spof-모니터링">실시간 SPOF 모니터링</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spof_monitor.py - 실시간 SPOF 모니터링
</span><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">import</span> <span class="n">logging</span>
<span class="kn">from</span> <span class="n">prometheus_client</span> <span class="kn">import</span> <span class="n">start_http_server</span><span class="p">,</span> <span class="n">Gauge</span><span class="p">,</span> <span class="n">Counter</span>

<span class="k">class</span> <span class="nc">SPOFMonitor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spof_gauge</span> <span class="o">=</span> <span class="nc">Gauge</span><span class="p">(</span><span class="sh">'</span><span class="s">network_spof_count</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Number of detected SPOFs</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">link_status_gauge</span> <span class="o">=</span> <span class="nc">Gauge</span><span class="p">(</span><span class="sh">'</span><span class="s">network_link_status</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Link status</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="sh">'</span><span class="s">device</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">interface</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spof_alert_counter</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">(</span><span class="sh">'</span><span class="s">network_spof_alerts_total</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Total SPOF alerts</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">monitor_links</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">링크 상태 모니터링</span><span class="sh">"""</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">devices</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_monitored_devices</span><span class="p">()</span>
                
                <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">devices</span><span class="p">:</span>
                    <span class="n">interfaces</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_device_interfaces</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
                    
                    <span class="k">for</span> <span class="n">interface</span> <span class="ow">in</span> <span class="n">interfaces</span><span class="p">:</span>
                        <span class="n">status</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">check_interface_status</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">interface</span><span class="p">)</span>
                        <span class="n">self</span><span class="p">.</span><span class="n">link_status_gauge</span><span class="p">.</span><span class="nf">labels</span><span class="p">(</span>
                            <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">],</span> 
                            <span class="n">interface</span><span class="o">=</span><span class="n">interface</span>
                        <span class="p">).</span><span class="nf">set</span><span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="sh">'</span><span class="s">up</span><span class="sh">'</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
                        
                        <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="sh">'</span><span class="s">down</span><span class="sh">'</span><span class="p">:</span>
                            <span class="n">self</span><span class="p">.</span><span class="nf">check_spof_impact</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">interface</span><span class="p">)</span>
                
                <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>  <span class="c1"># 30초마다 체크
</span>                
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Monitoring error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">check_spof_impact</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">failed_interface</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">장애 발생 시 SPOF 영향 분석</span><span class="sh">"""</span>
        <span class="n">remaining_paths</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">calculate_remaining_paths</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">failed_interface</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">remaining_paths</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="nf">critical</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">SPOF ALERT: </span><span class="si">{</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">failed_interface</span><span class="si">}</span><span class="s"> failure causes network partition</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">spof_alert_counter</span><span class="p">.</span><span class="nf">inc</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">failed_interface</span><span class="p">,</span> <span class="sh">'</span><span class="s">SPOF_CRITICAL</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">remaining_paths</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="nf">warning</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">SPOF WARNING: </span><span class="si">{</span><span class="n">device</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">failed_interface</span><span class="si">}</span><span class="s"> creates single path</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">failed_interface</span><span class="p">,</span> <span class="sh">'</span><span class="s">SPOF_WARNING</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">start_monitoring</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">모니터링 시작</span><span class="sh">"""</span>
        <span class="c1"># Prometheus 메트릭 서버 시작
</span>        <span class="nf">start_http_server</span><span class="p">(</span><span class="mi">8000</span><span class="p">)</span>
        
        <span class="c1"># 링크 모니터링 쓰레드 시작
</span>        <span class="n">monitor_thread</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">monitor_links</span><span class="p">)</span>
        <span class="n">monitor_thread</span><span class="p">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">monitor_thread</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">SPOF monitoring started on port 8000</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># 메인 루프
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Monitoring stopped</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">monitor</span> <span class="o">=</span> <span class="nc">SPOFMonitor</span><span class="p">()</span>
    <span class="n">monitor</span><span class="p">.</span><span class="nf">start_monitoring</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="spof-제거-우선순위-매트릭스">SPOF 제거 우선순위 매트릭스</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SPOF 위험도 평가 매트릭스</span>
위험도 <span class="o">=</span> <span class="o">(</span>영향도 × 발생가능성<span class="o">)</span> / 대응시간

영향도 점수:
- 전체 네트워크 단절: 10
- 부분 네트워크 단절: 7  
- 성능 저하: 4
- 일부 서비스 영향: 2

발생가능성 점수:
- 매우 높음 <span class="o">(</span>월 1회 이상<span class="o">)</span>: 10
- 높음 <span class="o">(</span>분기 1회<span class="o">)</span>: 7
- 보통 <span class="o">(</span>연 2-3회<span class="o">)</span>: 4  
- 낮음 <span class="o">(</span>연 1회 이하<span class="o">)</span>: 2

대응시간 점수:
- 4시간 이상: 1
- 2-4시간: 2
- 1-2시간: 4
- 1시간 이하: 7

<span class="c"># 우선순위 결정</span>
우선순위 1 <span class="o">(</span>즉시<span class="o">)</span>: 위험도 <span class="o">&gt;</span> 35
우선순위 2 <span class="o">(</span>1개월<span class="o">)</span>: 위험도 20-35
우선순위 3 <span class="o">(</span>3개월<span class="o">)</span>: 위험도 10-20  
우선순위 4 <span class="o">(</span>1년<span class="o">)</span>: 위험도 &lt; 10
</code></pre></div></div>]]></content><author><name>DevOps Engineer</name></author><category term="Networking" /><category term="Routing-Switching" /><category term="routing" /><category term="switching" /><category term="vlan" /><category term="stp" /><category term="ospf" /><category term="bgp" /><category term="vxlan" /><category term="network-protocols" /><summary type="html"><![CDATA[네트워크의 핵심인 라우팅과 스위칭 기술을 심화 학습하여 대규모 네트워크 운영 능력을 갖춰보겠습니다. 라우팅 프로토콜 | Routing Protocols 🗺️ 라우팅 기본 개념 라우팅은 패킷이 목적지까지 가는 최적의 경로를 찾는 과정입니다. # 라우팅 테이블 구성 요소 목적지 네트워크 | 서브넷 마스크 | 게이트웨이 | 인터페이스 | 메트릭 192.168.1.0 | /24 | 직접연결 | eth0 | 0 10.0.0.0 | /8 | 192.168.1.1| eth0 | 1 0.0.0.0 | /0 | 192.168.1.1| eth0 | 1 (기본경로) 📊 라우팅 프로토콜 분류 Distance Vector vs Link State Distance Vector (거리 벡터): - RIP (Routing Information Protocol) - 벨만-포드 알고리즘 사용 - 홉 카운트 기반 메트릭 - 단순하지만 수렴 속도 느림 Link State (링크 상태): - OSPF (Open Shortest Path First) - 다익스트라 알고리즘 사용 - 대역폭 기반 메트릭 - 빠른 수렴, 확장성 좋음 IGP vs EGP IGP (Interior Gateway Protocol): - 같은 자율 시스템(AS) 내부 - RIP, OSPF, EIGRP EGP (Exterior Gateway Protocol): - 서로 다른 AS 간 - BGP (Border Gateway Protocol) 🔄 RIP (Routing Information Protocol) # Cisco 라우터 RIP 설정 Router(config)# router rip Router(config-router)# version 2 Router(config-router)# network 192.168.1.0 Router(config-router)# network 10.0.0.0 Router(config-router)# no auto-summary Router(config-router)# passive-interface fastethernet 0/0 # Linux Quagga/FRR RIP 설정 router rip version 2 network 192.168.1.0/24 network 10.0.0.0/8 redistribute connected redistribute static # RIP 정보 확인 show ip route rip show ip rip database debug ip rip RIP의 특징과 한계 장점: - 구성이 간단함 - 소규모 네트워크에 적합 - 표준 프로토콜 단점: - 홉 카운트 제한 (15홉) - 느린 수렴 속도 - 대역폭 고려하지 않음 - 루프 방지 메커니즘 제한적 🌐 OSPF (Open Shortest Path First) OSPF는 대규모 네트워크에서 가장 널리 사용되는 링크 상태 라우팅 프로토콜입니다. OSPF 기본 개념 # OSPF 용어 Area: 라우터들의 논리적 그룹 ABR (Area Border Router): Area 경계 라우터 ASBR (Autonomous System Boundary Router): AS 경계 라우터 DR (Designated Router): 대표 라우터 BDR (Backup Designated Router): 백업 대표 라우터 # LSA (Link State Advertisement) 유형 LSA Type 1: Router LSA (라우터 정보) LSA Type 2: Network LSA (네트워크 정보) LSA Type 3: Summary LSA (Area 간 요약) LSA Type 4: ASBR Summary LSA LSA Type 5: External LSA (외부 라우트) OSPF 설정 실습 # Cisco 라우터 OSPF 설정 Router(config)# router ospf 1 Router(config-router)# router-id 1.1.1.1 Router(config-router)# network 192.168.1.0 0.0.0.255 area 0 Router(config-router)# network 10.0.0.0 0.255.255.255 area 1 Router(config-router)# area 1 stub # 인터페이스별 OSPF 설정 Router(config)# interface fastethernet 0/0 Router(config-if)# ip ospf cost 100 Router(config-if)# ip ospf priority 255 Router(config-if)# ip ospf hello-interval 5 Router(config-if)# ip ospf dead-interval 20 # Linux FRR OSPF 설정 router ospf ospf router-id 1.1.1.1 network 192.168.1.0/24 area 0.0.0.0 network 10.0.0.0/8 area 0.0.0.1 area 0.0.0.1 stub # OSPF 정보 확인 show ip ospf neighbor show ip ospf database show ip ospf interface show ip route ospf OSPF Area 설계 # Multi-Area OSPF 설계 예시 Area 0 (Backbone): 10.0.0.0/24 ├── Area 1 (Sales): 10.1.0.0/16 ├── Area 2 (Engineering): 10.2.0.0/16 └── Area 3 (Guest): 10.3.0.0/16 # Area 유형 Standard Area: 모든 LSA 허용 Stub Area: Type 5 LSA 차단, 기본 경로 주입 Totally Stub: Type 3,4,5 LSA 차단 NSSA: Type 5 LSA를 Type 7로 변환 🌍 BGP (Border Gateway Protocol) BGP는 인터넷의 라우팅을 담당하는 경로 벡터 프로토콜입니다. BGP 기본 개념 # BGP 속성 AS-Path: AS 번호 경로 Next-Hop: 다음 홉 주소 Local Preference: 로컬 우선순위 (높을수록 선호) MED: Multi-Exit Discriminator (낮을수록 선호) Origin: 경로 발생지 (IGP &gt; EGP &gt; Incomplete) Community: 라우팅 정책 태그 BGP 설정 예시 # Cisco 라우터 BGP 설정 Router(config)# router bgp 65001 Router(config-router)# bgp router-id 1.1.1.1 Router(config-router)# neighbor 203.0.113.1 remote-as 65002 Router(config-router)# neighbor 203.0.113.1 description "ISP-A Connection" Router(config-router)# network 192.168.0.0 mask 255.255.0.0 Router(config-router)# aggregate-address 192.168.0.0 255.255.0.0 summary-only # BGP 경로 정책 설정 Router(config)# ip prefix-list ALLOW-CUSTOMERS seq 10 permit 192.168.0.0/16 le 24 Router(config)# route-map CUSTOMER-IN permit 10 Router(config-route-map)# match ip address prefix-list ALLOW-CUSTOMERS Router(config-route-map)# set local-preference 200 Router(config)# router bgp 65001 Router(config-router)# neighbor 203.0.113.1 route-map CUSTOMER-IN in # Linux FRR BGP 설정 router bgp 65001 bgp router-id 1.1.1.1 neighbor 203.0.113.1 remote-as 65002 neighbor 203.0.113.1 description ISP-A address-family ipv4 unicast network 192.168.0.0/16 neighbor 203.0.113.1 activate 스위칭 기술 | Switching Technology 🔌 이더넷 스위칭 기본 MAC 주소 학습 과정 # 1단계: MAC 주소 테이블이 비어있음 Switch# show mac address-table Mac Address Table ------------------------------------------- Vlan Mac Address Type Ports ---- ----------- -------- ----- # 2단계: PC-A(00:11:22:33:44:AA)에서 PC-B로 프레임 전송 # 스위치가 포트 1에서 수신, MAC 주소 학습 # 3단계: MAC 주소 테이블 업데이트 Switch# show mac address-table Mac Address Table ------------------------------------------- Vlan Mac Address Type Ports ---- ----------- -------- ----- 1 0011.2233.44aa DYNAMIC Fa0/1 # 4단계: 목적지 MAC 주소를 모르므로 플러딩 # 5단계: PC-B가 응답하면 포트 2에서 학습 스위치 포트 설정 # 액세스 포트 설정 (단일 VLAN) Switch(config)# interface fastethernet 0/1 Switch(config-if)# switchport mode access Switch(config-if)# switchport access vlan 10 Switch(config-if)# switchport port-security Switch(config-if)# switchport port-security maximum 2 Switch(config-if)# switchport port-security violation shutdown # 트렁크 포트 설정 (다중 VLAN) Switch(config)# interface fastethernet 0/24 Switch(config-if)# switchport mode trunk Switch(config-if)# switchport trunk encapsulation dot1q Switch(config-if)# switchport trunk allowed vlan 10,20,30 Switch(config-if)# switchport trunk native vlan 1 🏷️ VLAN (Virtual Local Area Network) VLAN은 물리적 위치와 관계없이 논리적으로 네트워크를 분할하는 기술입니다. VLAN 설정 및 관리 # VLAN 생성 Switch(config)# vlan 10 Switch(config-vlan)# name SALES Switch(config-vlan)# vlan 20 Switch(config-vlan)# name ENGINEERING Switch(config-vlan)# vlan 30 Switch(config-vlan)# name GUEST # VLAN 정보 확인 Switch# show vlan brief VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/5, Fa0/6, Fa0/7, Fa0/8 10 SALES active Fa0/1, Fa0/2 20 ENGINEERING active Fa0/3, Fa0/4 30 GUEST active 999 UNUSED active # 동적 VLAN 할당 (VMPS) Switch(config)# vmps server 192.168.1.100 Switch(config)# interface range fastethernet 0/1-20 Switch(config-if-range)# switchport mode dynamic desirable Inter-VLAN 라우팅 # 라우터의 서브인터페이스 설정 (Router-on-a-Stick) Router(config)# interface fastethernet 0/0 Router(config-if)# no shutdown Router(config-if)# interface fastethernet 0/0.10 Router(config-subif)# encapsulation dot1Q 10 Router(config-subif)# ip address 192.168.10.1 255.255.255.0 Router(config-subif)# interface fastethernet 0/0.20 Router(config-subif)# encapsulation dot1Q 20 Router(config-subif)# ip address 192.168.20.1 255.255.255.0 # SVI (Switched Virtual Interface) 설정 Switch(config)# ip routing Switch(config)# interface vlan 10 Switch(config-if)# ip address 192.168.10.1 255.255.255.0 Switch(config-if)# no shutdown Switch(config-if)# interface vlan 20 Switch(config-if)# ip address 192.168.20.1 255.255.255.0 Switch(config-if)# no shutdown 🌳 STP (Spanning Tree Protocol) STP는 스위치 네트워크에서 루프를 방지하고 이중화를 제공하는 프로토콜입니다. STP 기본 개념 # STP 포트 상태 Disabled: 포트 비활성화 Blocking: 데이터 전송 차단, BPDU 수신만 Listening: BPDU 송수신, MAC 주소 학습하지 않음 Learning: MAC 주소 학습, 데이터 전송하지 않음 Forwarding: 정상 데이터 전송 # STP 포트 역할 Root Port: 루트 브리지로 가는 최단 경로 Designated Port: 세그먼트의 대표 포트 Alternate Port: 루트 포트의 백업 Backup Port: 같은 스위치의 다른 포트 백업 STP 설정 및 최적화 # 루트 브리지 설정 Switch(config)# spanning-tree vlan 1 root primary Switch(config)# spanning-tree vlan 1 priority 4096 # 포트 우선순위 및 비용 설정 Switch(config)# interface fastethernet 0/1 Switch(config-if)# spanning-tree vlan 1 port-priority 128 Switch(config-if)# spanning-tree vlan 1 cost 19 # RSTP (Rapid Spanning Tree) 설정 Switch(config)# spanning-tree mode rapid-pvst # 포트 최적화 Switch(config)# interface range fastethernet 0/1-20 Switch(config-if-range)# spanning-tree portfast Switch(config-if-range)# spanning-tree bpduguard enable # STP 정보 확인 Switch# show spanning-tree Switch# show spanning-tree vlan 1 Switch# show spanning-tree interface fastethernet 0/1 MST (Multiple Spanning Tree) # MST 설정 Switch(config)# spanning-tree mode mst Switch(config)# spanning-tree mst configuration Switch(config-mst)# name COMPANY Switch(config-mst)# revision 1 Switch(config-mst)# instance 1 vlan 10,20 Switch(config-mst)# instance 2 vlan 30,40 Switch(config-mst)# exit # MST 루트 설정 Switch(config)# spanning-tree mst 1 root primary Switch(config)# spanning-tree mst 2 root secondary 고급 네트워킹 기술 | Advanced Networking 🔗 Link Aggregation (EtherChannel) 여러 물리적 링크를 논리적으로 묶어 대역폭을 증가시키고 이중화를 제공합니다. # LACP (Link Aggregation Control Protocol) 설정 Switch(config)# interface range fastethernet 0/1-2 Switch(config-if-range)# channel-group 1 mode active Switch(config-if-range)# exit Switch(config)# interface port-channel 1 Switch(config-if)# switchport mode trunk Switch(config-if)# switchport trunk allowed vlan 10,20,30 # PAgP (Port Aggregation Protocol) 설정 Switch(config)# interface range fastethernet 0/3-4 Switch(config-if-range)# channel-group 2 mode desirable # 정적 EtherChannel 설정 Switch(config)# interface range fastethernet 0/5-6 Switch(config-if-range)# channel-group 3 mode on # EtherChannel 확인 Switch# show etherchannel summary Switch# show etherchannel port-channel 🌐 VXLAN (Virtual Extensible LAN) 클라우드 환경에서 L2 오버레이 네트워크를 구현하는 기술입니다. # Linux에서 VXLAN 설정 # VXLAN 인터페이스 생성 ip link add vxlan10 type vxlan id 10 remote 192.168.1.2 local 192.168.1.1 dev eth0 dstport 4789 # VXLAN을 브리지에 연결 ip link add br0 type bridge ip link set vxlan10 master br0 ip link set eth1 master br0 # 인터페이스 활성화 ip link set vxlan10 up ip link set br0 up # 멀티캐스트 VXLAN ip link add vxlan20 type vxlan id 20 group 239.1.1.1 dev eth0 dstport 4789 # VXLAN 정보 확인 bridge fdb show dev vxlan10 ip -d link show vxlan10 ⚖️ 로드 밸런싱 HAProxy 설정 # HAProxy 설정 파일 (/etc/haproxy/haproxy.cfg) global daemon maxconn 4096 log 127.0.0.1:514 local0 defaults mode http timeout connect 5000ms timeout client 50000ms timeout server 50000ms option httplog frontend web_frontend bind *:80 bind *:443 ssl crt /etc/ssl/certs/website.pem redirect scheme https if !{ ssl_fc } default_backend web_servers backend web_servers balance roundrobin option httpchk GET /health server web1 192.168.1.10:80 check server web2 192.168.1.11:80 check server web3 192.168.1.12:80 check backup # 통계 페이지 listen stats bind *:8080 stats enable stats uri /stats stats refresh 30s NGINX 로드 밸런싱 # /etc/nginx/nginx.conf upstream backend { least_conn; # 로드 밸런싱 방법 server 192.168.1.10:80 max_fails=3 fail_timeout=30s; server 192.168.1.11:80 max_fails=3 fail_timeout=30s; server 192.168.1.12:80 backup; } server { listen 80; location / { proxy_pass http://backend; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 헬스 체크 proxy_connect_timeout 1s; proxy_send_timeout 1s; proxy_read_timeout 1s; } } 🔐 네트워크 보안 심화 포트 보안 (Port Security) # MAC 주소 기반 포트 보안 Switch(config)# interface fastethernet 0/1 Switch(config-if)# switchport port-security Switch(config-if)# switchport port-security maximum 2 Switch(config-if)# switchport port-security mac-address sticky Switch(config-if)# switchport port-security violation restrict # 802.1X 인증 설정 Switch(config)# aaa new-model Switch(config)# aaa authentication dot1x default group radius Switch(config)# dot1x system-auth-control Switch(config)# interface fastethernet 0/1 Switch(config-if)# authentication port-control auto Switch(config-if)# dot1x pae authenticator ACL (Access Control List) 심화 # 확장 ACL Router(config)# ip access-list extended BLOCK_SOCIAL Router(config-ext-nacl)# deny tcp any host 23.35.67.140 eq 80 Router(config-ext-nacl)# deny tcp any host 23.35.67.141 eq 443 Router(config-ext-nacl)# permit ip any any Router(config-ext-nacl)# exit Router(config)# interface fastethernet 0/1 Router(config-if)# ip access-group BLOCK_SOCIAL out # 시간 기반 ACL Router(config)# time-range WORK_HOURS Router(config-time-range)# periodic weekdays 09:00 to 18:00 Router(config)# ip access-list extended TIME_BASED Router(config-ext-nacl)# permit tcp 192.168.1.0 0.0.0.255 any eq 80 time-range WORK_HOURS Router(config-ext-nacl)# deny tcp 192.168.1.0 0.0.0.255 any eq 80 # 반사형 ACL (Reflexive ACL) Router(config)# ip access-list extended OUTBOUND Router(config-ext-nacl)# permit tcp 192.168.1.0 0.0.0.255 any reflect TCP_TRAFFIC Router(config-ext-nacl)# permit icmp 192.168.1.0 0.0.0.255 any reflect ICMP_TRAFFIC Router(config)# ip access-list extended INBOUND Router(config-ext-nacl)# evaluate TCP_TRAFFIC Router(config-ext-nacl)# evaluate ICMP_TRAFFIC Router(config-ext-nacl)# deny ip any any 네트워크 모니터링 및 문제 해결 | Network Monitoring &amp; Troubleshooting 📊 SNMP (Simple Network Management Protocol) # SNMP v3 설정 (Cisco) Router(config)# snmp-server view READONLY iso included Router(config)# snmp-server group ADMIN v3 auth read READONLY Router(config)# snmp-server user admin ADMIN v3 auth sha password123 priv aes 128 password456 Router(config)# snmp-server host 192.168.1.100 version 3 auth admin # Linux SNMP 클라이언트 # OID를 이용한 정보 조회 snmpwalk -v3 -u admin -a SHA -A password123 -x AES -X password456 -l authPriv 192.168.1.1 1.3.6.1.2.1.1 # 인터페이스 통계 조회 snmpwalk -v3 -u admin -a SHA -A password123 -x AES -X password456 -l authPriv 192.168.1.1 1.3.6.1.2.1.2.2.1.10 🔍 네트워크 분석 도구 Wireshark 고급 필터 # 프로토콜별 필터 tcp.port == 80 # HTTP 트래픽 tcp.flags.syn == 1 and tcp.flags.ack == 0 # TCP SYN 패킷 icmp.type == 8 # ICMP Echo Request dns.qry.name contains "google" # DNS 쿼리 # 네트워크별 필터 ip.src == 192.168.1.0/24 # 소스 네트워크 ip.dst == 10.0.0.0/8 # 목적지 네트워크 eth.addr == 00:11:22:33:44:55 # MAC 주소 # 성능 분석 tcp.analysis.retransmission # TCP 재전송 tcp.analysis.duplicate_ack # 중복 ACK tcp.analysis.zero_window # 제로 윈도우 네트워크 성능 측정 # 대역폭 측정 (iperf3) # 서버 모드 iperf3 -s -p 5201 # 클라이언트 모드 iperf3 -c 192.168.1.100 -p 5201 -t 60 -P 4 # UDP 측정 iperf3 -c 192.168.1.100 -u -b 100M # 지연 시간 측정 (hping3) hping3 -S -p 80 -c 10 google.com hping3 -1 -c 100 -i u1000 192.168.1.1 # 마이크로초 간격 # MTU 경로 발견 tracepath google.com ping -M do -s 1472 google.com 2-3 IaC (Infrastructure as Code) | 코드형 인프라 2-3-1 IaC 종류 | Types of IaC IaC는 인프라를 코드로 정의하고 관리하는 방법론으로, 네트워크 인프라 구축과 관리를 자동화합니다. 🛠️ 주요 IaC 도구 분류 # 선언적 vs 명령적 선언적 (Declarative): - Terraform, CloudFormation, Ansible (일부) - 최종 상태를 정의 - 더 안정적이고 예측 가능 명령적 (Imperative): - Shell Scripts, Python Scripts - 실행 단계를 정의 - 더 유연하지만 복잡함 # 에이전트 기반 vs 에이전트리스 에이전트 기반: - Puppet, Chef - 대상 시스템에 에이전트 설치 필요 - 지속적인 상태 관리 에이전트리스: - Ansible, Terraform - SSH/WinRM 등을 통한 원격 실행 - 설치 부담 없음 Terraform # Provider 설정 terraform { required_version = "&gt;= 1.0" required_providers { aws = { source = "hashicorp/aws" version = "~&gt; 5.0" } cisco = { source = "CiscoDevNet/aci" version = "~&gt; 2.0" } } } # 변수 정의 variable "vpc_cidr" { description = "CIDR block for VPC" type = string default = "10.0.0.0/16" } variable "environment" { description = "Environment name" type = string default = "production" } Ansible # 네트워크 장비 인벤토리 (/etc/ansible/hosts) [switches] switch1 ansible_host=192.168.1.10 ansible_network_os=ios switch2 ansible_host=192.168.1.11 ansible_network_os=ios [routers] router1 ansible_host=192.168.1.1 ansible_network_os=ios router2 ansible_host=192.168.1.2 ansible_network_os=ios [network:children] switches routers [network:vars] ansible_user=admin ansible_password=password ansible_connection=network_cli ansible_become=yes ansible_become_method=enable CloudFormation (AWS) # AWS 네트워크 인프라 템플릿 AWSTemplateFormatVersion: '2010-09-09' Description: 'Network Infrastructure Template' Parameters: EnvironmentName: Description: Environment name prefix Type: String Default: Production Resources: VPC: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsHostnames: true EnableDnsSupport: true Tags: - Key: Name Value: !Sub ${EnvironmentName}-VPC Pulumi # Python을 이용한 IaC import pulumi import pulumi_aws as aws # VPC 생성 vpc = aws.ec2.Vpc("main-vpc", cidr_block="10.0.0.0/16", enable_dns_hostnames=True, enable_dns_support=True, tags={ "Name": "main-vpc", "Environment": "production" } ) # 서브넷 생성 public_subnet = aws.ec2.Subnet("public-subnet", vpc_id=vpc.id, cidr_block="10.0.1.0/24", availability_zone="us-west-2a", map_public_ip_on_launch=True, tags={ "Name": "public-subnet", "Type": "Public" } ) CDK (Cloud Development Kit) // TypeScript를 이용한 AWS CDK import * as cdk from 'aws-cdk-lib'; import * as ec2 from 'aws-cdk-lib/aws-ec2'; export class NetworkStack extends cdk.Stack { constructor(scope: cdk.App, id: string, props?: cdk.StackProps) { super(scope, id, props); // VPC 생성 const vpc = new ec2.Vpc(this, 'MainVpc', { maxAzs: 3, cidr: '10.0.0.0/16', subnetConfiguration: [ { cidrMask: 24, name: 'Public', subnetType: ec2.SubnetType.PUBLIC, }, { cidrMask: 24, name: 'Private', subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS, } ] }); } } 2-3-2 테라폼으로 환경 구성 | Environment Setup with Terraform Terraform을 사용하여 완전한 네트워크 환경을 구성해보겠습니다. 🏗️ 프로젝트 구조 설계 # 디렉토리 구조 terraform-network/ ├── environments/ │ ├── dev/ │ │ ├── main.tf │ │ ├── variables.tf │ │ └── terraform.tfvars │ ├── staging/ │ └── production/ ├── modules/ │ ├── vpc/ │ │ ├── main.tf │ │ ├── variables.tf │ │ └── outputs.tf │ ├── security-groups/ │ └── load-balancer/ ├── global/ │ └── iam/ └── shared/ └── data.tf VPC 모듈 구현 # modules/vpc/main.tf resource "aws_vpc" "main" { cidr_block = var.cidr_block enable_dns_hostnames = var.enable_dns_hostnames enable_dns_support = var.enable_dns_support tags = merge(var.tags, { Name = "${var.name_prefix}-vpc" }) } # 인터넷 게이트웨이 resource "aws_internet_gateway" "main" { vpc_id = aws_vpc.main.id tags = merge(var.tags, { Name = "${var.name_prefix}-igw" }) } # 가용 영역별 퍼블릭 서브넷 resource "aws_subnet" "public" { count = length(var.public_subnets) vpc_id = aws_vpc.main.id cidr_block = var.public_subnets[count.index] availability_zone = var.availability_zones[count.index] map_public_ip_on_launch = true tags = merge(var.tags, { Name = "${var.name_prefix}-public-${count.index + 1}" Type = "Public" }) } # 프라이빗 서브넷 resource "aws_subnet" "private" { count = length(var.private_subnets) vpc_id = aws_vpc.main.id cidr_block = var.private_subnets[count.index] availability_zone = var.availability_zones[count.index] tags = merge(var.tags, { Name = "${var.name_prefix}-private-${count.index + 1}" Type = "Private" }) } # NAT 게이트웨이를 위한 EIP resource "aws_eip" "nat" { count = var.enable_nat_gateway ? length(var.public_subnets) : 0 domain = "vpc" depends_on = [aws_internet_gateway.main] tags = merge(var.tags, { Name = "${var.name_prefix}-nat-eip-${count.index + 1}" }) } # NAT 게이트웨이 resource "aws_nat_gateway" "main" { count = var.enable_nat_gateway ? length(var.public_subnets) : 0 allocation_id = aws_eip.nat[count.index].id subnet_id = aws_subnet.public[count.index].id tags = merge(var.tags, { Name = "${var.name_prefix}-nat-gw-${count.index + 1}" }) depends_on = [aws_internet_gateway.main] } # 퍼블릭 라우트 테이블 resource "aws_route_table" "public" { vpc_id = aws_vpc.main.id route { cidr_block = "0.0.0.0/0" gateway_id = aws_internet_gateway.main.id } tags = merge(var.tags, { Name = "${var.name_prefix}-public-rt" }) } # 프라이빗 라우트 테이블 resource "aws_route_table" "private" { count = var.enable_nat_gateway ? length(var.private_subnets) : 1 vpc_id = aws_vpc.main.id dynamic "route" { for_each = var.enable_nat_gateway ? [1] : [] content { cidr_block = "0.0.0.0/0" nat_gateway_id = aws_nat_gateway.main[count.index].id } } tags = merge(var.tags, { Name = "${var.name_prefix}-private-rt-${count.index + 1}" }) } # 라우트 테이블 연결 resource "aws_route_table_association" "public" { count = length(var.public_subnets) subnet_id = aws_subnet.public[count.index].id route_table_id = aws_route_table.public.id } resource "aws_route_table_association" "private" { count = length(var.private_subnets) subnet_id = aws_subnet.private[count.index].id route_table_id = var.enable_nat_gateway ? aws_route_table.private[count.index].id : aws_route_table.private[0].id } VPC 모듈 변수 # modules/vpc/variables.tf variable "name_prefix" { description = "Name prefix for all resources" type = string } variable "cidr_block" { description = "CIDR block for the VPC" type = string } variable "public_subnets" { description = "List of public subnet CIDR blocks" type = list(string) } variable "private_subnets" { description = "List of private subnet CIDR blocks" type = list(string) } variable "availability_zones" { description = "List of availability zones" type = list(string) } variable "enable_nat_gateway" { description = "Enable NAT Gateway for private subnets" type = bool default = true } variable "enable_dns_hostnames" { description = "Enable DNS hostnames in the VPC" type = bool default = true } variable "enable_dns_support" { description = "Enable DNS support in the VPC" type = bool default = true } variable "tags" { description = "Tags to apply to all resources" type = map(string) default = {} } VPC 모듈 출력 # modules/vpc/outputs.tf output "vpc_id" { description = "ID of the VPC" value = aws_vpc.main.id } output "vpc_cidr_block" { description = "CIDR block of the VPC" value = aws_vpc.main.cidr_block } output "public_subnet_ids" { description = "IDs of the public subnets" value = aws_subnet.public[*].id } output "private_subnet_ids" { description = "IDs of the private subnets" value = aws_subnet.private[*].id } output "internet_gateway_id" { description = "ID of the Internet Gateway" value = aws_internet_gateway.main.id } output "nat_gateway_ids" { description = "IDs of the NAT Gateways" value = aws_nat_gateway.main[*].id } 보안 그룹 모듈 # modules/security-groups/main.tf # 웹 서버 보안 그룹 resource "aws_security_group" "web" { name_prefix = "${var.name_prefix}-web-" vpc_id = var.vpc_id description = "Security group for web servers" ingress { description = "HTTP" from_port = 80 to_port = 80 protocol = "tcp" cidr_blocks = ["0.0.0.0/0"] } ingress { description = "HTTPS" from_port = 443 to_port = 443 protocol = "tcp" cidr_blocks = ["0.0.0.0/0"] } ingress { description = "SSH from management" from_port = 22 to_port = 22 protocol = "tcp" security_groups = [aws_security_group.management.id] } egress { from_port = 0 to_port = 0 protocol = "-1" cidr_blocks = ["0.0.0.0/0"] } tags = merge(var.tags, { Name = "${var.name_prefix}-web-sg" }) lifecycle { create_before_destroy = true } } # 데이터베이스 보안 그룹 resource "aws_security_group" "database" { name_prefix = "${var.name_prefix}-db-" vpc_id = var.vpc_id description = "Security group for database servers" ingress { description = "MySQL/MariaDB" from_port = 3306 to_port = 3306 protocol = "tcp" security_groups = [aws_security_group.web.id] } ingress { description = "PostgreSQL" from_port = 5432 to_port = 5432 protocol = "tcp" security_groups = [aws_security_group.web.id] } tags = merge(var.tags, { Name = "${var.name_prefix}-db-sg" }) } # 관리 보안 그룹 resource "aws_security_group" "management" { name_prefix = "${var.name_prefix}-mgmt-" vpc_id = var.vpc_id description = "Security group for management access" ingress { description = "SSH" from_port = 22 to_port = 22 protocol = "tcp" cidr_blocks = var.management_cidr_blocks } ingress { description = "RDP" from_port = 3389 to_port = 3389 protocol = "tcp" cidr_blocks = var.management_cidr_blocks } egress { from_port = 0 to_port = 0 protocol = "-1" cidr_blocks = ["0.0.0.0/0"] } tags = merge(var.tags, { Name = "${var.name_prefix}-mgmt-sg" }) } 메인 환경 설정 # environments/production/main.tf terraform { required_version = "&gt;= 1.0" backend "s3" { bucket = "company-terraform-state" key = "network/production/terraform.tfstate" region = "us-west-2" encrypt = true dynamodb_table = "terraform-locks" } required_providers { aws = { source = "hashicorp/aws" version = "~&gt; 5.0" } } } provider "aws" { region = var.aws_region default_tags { tags = { Environment = var.environment Project = var.project_name ManagedBy = "Terraform" CreatedBy = var.created_by CostCenter = var.cost_center } } } # 데이터 소스 data "aws_availability_zones" "available" { state = "available" } # VPC 모듈 호출 module "vpc" { source = "../../modules/vpc" name_prefix = var.name_prefix cidr_block = var.vpc_cidr public_subnets = var.public_subnet_cidrs private_subnets = var.private_subnet_cidrs availability_zones = slice(data.aws_availability_zones.available.names, 0, 3) enable_nat_gateway = var.enable_nat_gateway tags = local.common_tags } # 보안 그룹 모듈 호출 module "security_groups" { source = "../../modules/security-groups" name_prefix = var.name_prefix vpc_id = module.vpc.vpc_id management_cidr_blocks = var.management_cidr_blocks tags = local.common_tags } # 로컬 값 locals { common_tags = { Environment = var.environment Project = var.project_name ManagedBy = "Terraform" } } 환경별 변수 파일 # environments/production/variables.tf variable "aws_region" { description = "AWS region" type = string default = "us-west-2" } variable "environment" { description = "Environment name" type = string default = "production" } variable "project_name" { description = "Project name" type = string } variable "name_prefix" { description = "Name prefix for resources" type = string } variable "vpc_cidr" { description = "CIDR block for VPC" type = string } variable "public_subnet_cidrs" { description = "CIDR blocks for public subnets" type = list(string) } variable "private_subnet_cidrs" { description = "CIDR blocks for private subnets" type = list(string) } variable "enable_nat_gateway" { description = "Enable NAT Gateway" type = bool default = true } variable "management_cidr_blocks" { description = "CIDR blocks allowed for management access" type = list(string) } variable "created_by" { description = "Creator of the infrastructure" type = string } variable "cost_center" { description = "Cost center for billing" type = string } Terraform 실행 값 # environments/production/terraform.tfvars project_name = "company-web-app" name_prefix = "prod-webapp" vpc_cidr = "10.0.0.0/16" public_subnet_cidrs = [ "10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24" ] private_subnet_cidrs = [ "10.0.11.0/24", "10.0.12.0/24", "10.0.13.0/24" ] enable_nat_gateway = true management_cidr_blocks = [ "203.0.113.0/24", # 회사 사무실 "198.51.100.0/24" # VPN 네트워크 ] created_by = "devops-team" cost_center = "engineering" Terraform 실행 및 관리 # 초기화 terraform init # 계획 확인 terraform plan -var-file="terraform.tfvars" # 적용 terraform apply -var-file="terraform.tfvars" # 상태 확인 terraform show terraform state list # 리소스 확인 terraform state show module.vpc.aws_vpc.main # 출력 값 확인 terraform output # 리소스 삭제 terraform destroy -var-file="terraform.tfvars" # 워크스페이스 관리 terraform workspace new staging terraform workspace select production terraform workspace list 고급 Terraform 기능 # 조건부 리소스 생성 resource "aws_instance" "web" { count = var.environment == "production" ? 3 : 1 ami = data.aws_ami.amazon_linux.id instance_type = var.environment == "production" ? "t3.medium" : "t3.micro" tags = { Name = "${var.name_prefix}-web-${count.index + 1}" } } # 동적 블록 resource "aws_security_group" "web" { name_prefix = "${var.name_prefix}-web-" vpc_id = var.vpc_id dynamic "ingress" { for_each = var.ingress_rules content { from_port = ingress.value.from_port to_port = ingress.value.to_port protocol = ingress.value.protocol cidr_blocks = ingress.value.cidr_blocks } } } # 데이터 소스 활용 data "aws_ami" "amazon_linux" { most_recent = true owners = ["amazon"] filter { name = "name" values = ["amzn2-ami-hvm-*-x86_64-gp2"] } } # 원격 상태 참조 data "terraform_remote_state" "vpc" { backend = "s3" config = { bucket = "company-terraform-state" key = "network/production/terraform.tfstate" region = "us-west-2" } } 2-4 단일 장애 지점 제거 | Eliminating Single Points of Failure 2-4-1 SPOF 찾기 | Identifying SPOF 단일 장애 지점(SPOF)은 시스템의 한 구성 요소가 실패할 때 전체 시스템이 작동을 멈추게 되는 지점을 말합니다. 네트워크 인프라에서 SPOF를 식별하고 제거하는 것은 고가용성 확보의 핵심입니다. 🔍 SPOF 식별 방법론 # SPOF 분석 체크리스트 1. 네트워크 토폴로지 분석 - 단일 연결점 확인 - 백업 경로 존재 여부 - 대역폭 병목 지점 2. 하드웨어 구성 요소 점검 - 단일 스위치/라우터 의존성 - 전원 공급 장치 - 케이블링 경로 3. 서비스 의존성 분석 - DNS 서버 - DHCP 서버 - 인증 서버 (RADIUS/LDAP) 4. 외부 연결 검토 - ISP 연결 - WAN 회선 - 클라우드 연결 네트워크 토폴로지 SPOF 분석 # 현재 네트워크 상태 확인 # Linux 환경에서 네트워크 경로 분석 ip route show table main traceroute -n 8.8.8.8 mtr --report --report-cycles=100 google.com # 라우팅 테이블 분석 netstat -rn route -n # 인터페이스 상태 확인 ip link show ip addr show ethtool eth0 # 링크 상태, 속도 확인 # Cisco 장비에서 SPOF 분석 show ip route show interface summary show spanning-tree root show etherchannel summary show redundancy # 대역폭 사용률 모니터링 show interface fastethernet 0/1 | include rate show processes cpu sorted show memory summary 일반적인 네트워크 SPOF 패턴 # 1. 단일 업링크 (Single Uplink) 문제: 하나의 업스트림 연결만 존재 영향: 해당 연결 실패 시 전체 네트워크 단절 해결: 이중 업링크 + 로드밸런싱 # 2. 단일 코어 스위치 (Single Core Switch) 문제: 모든 액세스 스위치가 하나의 코어에 연결 영향: 코어 스위치 실패 시 전체 네트워크 마비 해결: 이중 코어 스위치 + HSRP/VRRP # 3. 단일 VLAN (Single VLAN) 문제: 브로드캐스트 도메인 과부하 영향: 네트워크 성능 저하, 장애 전파 해결: VLAN 분할 + Inter-VLAN 라우팅 # 4. 단일 ISP (Single ISP) 문제: 하나의 인터넷 서비스 제공업체 영향: ISP 장애 시 인터넷 연결 불가 해결: 멀티 ISP + BGP 라우팅 SPOF 탐지 도구와 스크립트 #!/usr/bin/env python3 # spof_detector.py - 네트워크 SPOF 탐지 도구 import subprocess import json import sys from collections import defaultdict import networkx as nx class SPOFDetector: def __init__(self): self.network_graph = nx.Graph() self.devices = {} self.links = {} def scan_network_topology(self, network_range): """네트워크 토폴로지 스캔""" print(f"Scanning network range: {network_range}") # SNMP을 통한 네트워크 디스커버리 devices = self.discover_devices(network_range) for device in devices: self.analyze_device(device) return self.identify_spof() def discover_devices(self, network_range): """SNMP를 통한 네트워크 장비 발견""" cmd = f"nmap -sn {network_range}" result = subprocess.run(cmd.split(), capture_output=True, text=True) devices = [] for line in result.stdout.split('\n'): if 'Nmap scan report' in line: ip = line.split()[-1] devices.append(ip) return devices def analyze_device(self, device_ip): """개별 장비 분석""" device_info = { 'ip': device_ip, 'type': self.detect_device_type(device_ip), 'interfaces': self.get_interfaces(device_ip), 'neighbors': self.get_neighbors(device_ip), 'redundancy': self.check_redundancy(device_ip) } self.devices[device_ip] = device_info self.network_graph.add_node(device_ip, **device_info) def detect_device_type(self, device_ip): """장비 유형 감지 (라우터/스위치/방화벽)""" # SNMP OID를 통한 장비 유형 확인 snmp_cmd = f"snmpget -v2c -c public {device_ip} 1.3.6.1.2.1.1.1.0" result = subprocess.run(snmp_cmd.split(), capture_output=True, text=True) if 'cisco' in result.stdout.lower(): if 'router' in result.stdout.lower(): return 'router' elif 'switch' in result.stdout.lower(): return 'switch' return 'unknown' def get_interfaces(self, device_ip): """인터페이스 정보 수집""" # SNMP를 통한 인터페이스 상태 확인 interfaces = {} # 인터페이스 이름 (1.3.6.1.2.1.2.2.1.2) # 인터페이스 상태 (1.3.6.1.2.1.2.2.1.8) # 인터페이스 속도 (1.3.6.1.2.1.2.2.1.5) return interfaces def get_neighbors(self, device_ip): """인접 장비 정보 수집 (CDP/LLDP)""" neighbors = [] # CDP 정보 수집 (1.3.6.1.4.1.9.9.23.1.2.1.1.6) # LLDP 정보 수집 (1.0.8802.1.1.2.1.4.1.1.9) return neighbors def check_redundancy(self, device_ip): """이중화 구성 확인""" redundancy_info = { 'power_supplies': self.check_power_supplies(device_ip), 'uplinks': self.check_uplinks(device_ip), 'protocols': self.check_redundancy_protocols(device_ip) } return redundancy_info def identify_spof(self): """SPOF 식별""" spof_list = [] # 1. 연결성 분석 - 단일 연결점 찾기 for node in self.network_graph.nodes(): if self.network_graph.degree(node) == 1: spof_list.append({ 'type': 'single_connection', 'device': node, 'risk': 'high', 'description': f'Device {node} has only one connection' }) # 2. 브리지 포인트 분석 bridges = list(nx.bridges(self.network_graph)) for bridge in bridges: spof_list.append({ 'type': 'bridge_link', 'link': bridge, 'risk': 'critical', 'description': f'Link between {bridge[0]} and {bridge[1]} is critical' }) # 3. 절단점 분석 (Articulation Points) articulation_points = list(nx.articulation_points(self.network_graph)) for point in articulation_points: spof_list.append({ 'type': 'articulation_point', 'device': point, 'risk': 'critical', 'description': f'Device {point} is a critical junction point' }) return spof_list def generate_report(self, spof_list): """SPOF 분석 보고서 생성""" report = { 'timestamp': subprocess.run(['date'], capture_output=True, text=True).stdout.strip(), 'total_devices': len(self.devices), 'total_spof_issues': len(spof_list), 'critical_issues': len([s for s in spof_list if s['risk'] == 'critical']), 'high_issues': len([s for s in spof_list if s['risk'] == 'high']), 'spof_details': spof_list, 'recommendations': self.generate_recommendations(spof_list) } return report def main(): if len(sys.argv) != 2: print("Usage: python3 spof_detector.py &lt;network_range&gt;") print("Example: python3 spof_detector.py 192.168.1.0/24") sys.exit(1) network_range = sys.argv[1] detector = SPOFDetector() print("Starting SPOF detection...") spof_list = detector.scan_network_topology(network_range) report = detector.generate_report(spof_list) # JSON 형태로 결과 출력 print(json.dumps(report, indent=2)) # 요약 출력 print(f"\n=== SPOF Detection Summary ===") print(f"Total devices scanned: {report['total_devices']}") print(f"SPOF issues found: {report['total_spof_issues']}") print(f"Critical issues: {report['critical_issues']}") print(f"High risk issues: {report['high_issues']}") if __name__ == "__main__": main() Ansible을 이용한 SPOF 점검 자동화 --- # spof_check.yml - SPOF 점검 플레이북 - name: Network SPOF Assessment hosts: network_devices gather_facts: no vars: spof_report: [] tasks: - name: Check device redundancy status ios_command: commands: - show redundancy - show environment power - show interface summary - show spanning-tree root - show etherchannel summary register: device_status - name: Analyze redundancy configuration set_fact: redundancy_analysis: "" - name: Check for single uplinks ios_command: commands: - show cdp neighbors - show interface trunk register: uplink_status - name: Identify SPOF risks set_fact: spof_risks: "" loop: - "Single uplink detected" - "No redundant power" - "No EtherChannel" vars: uplink_count: "" power_supplies: "" etherchannel_count: "" - name: Generate SPOF report template: src: spof_report.j2 dest: "/tmp/spof_report_.html" vars: device_name: "" check_date: "" - name: Send SPOF alert if critical issues found mail: to: "" subject: "CRITICAL: SPOF detected on " body: "Critical single points of failure detected. See attached report." attach: "/tmp/spof_report_.html" when: "'Single uplink detected' in spof_risks or 'No redundant power' in spof_risks" 네트워크 토폴로지 시각화 # Graphviz를 이용한 네트워크 토폴로지 생성 #!/bin/bash # generate_network_topology.sh # SNMP를 통한 네트워크 맵 생성 generate_dot_file() { echo "digraph network {" &gt; network.dot echo " rankdir=TB;" &gt;&gt; network.dot echo " node [shape=box];" &gt;&gt; network.dot # 각 장비 정보 수집 for ip in $(nmap -sn 192.168.1.0/24 | grep "Nmap scan report" | awk '{print $5}'); do device_name=$(snmpget -v2c -c public $ip 1.3.6.1.2.1.1.5.0 2&gt;/dev/null | cut -d'"' -f2) if [ ! -z "$device_name" ]; then echo " \"$device_name\" [label=\"$device_name\\n$ip\"];" &gt;&gt; network.dot # CDP 정보로 연결 관계 확인 cdp_neighbors=$(snmpwalk -v2c -c public $ip 1.3.6.1.4.1.9.9.23.1.2.1.1.6 2&gt;/dev/null) while read -r neighbor; do neighbor_name=$(echo $neighbor | cut -d'"' -f2) if [ ! -z "$neighbor_name" ]; then echo " \"$device_name\" -&gt; \"$neighbor_name\";" &gt;&gt; network.dot fi done &lt;&lt;&lt; "$cdp_neighbors" fi done echo "}" &gt;&gt; network.dot } # DOT 파일을 이미지로 변환 generate_dot_file dot -Tpng network.dot -o network_topology.png dot -Tsvg network.dot -o network_topology.svg echo "Network topology generated: network_topology.png" # SPOF 하이라이트 버전 생성 sed 's/node \[shape=box\];/node [shape=box]; edge [color=red, penwidth=3];/' network.dot &gt; network_spof.dot dot -Tpng network_spof.dot -o network_spof.png echo "SPOF highlighted topology: network_spof.png" 실시간 SPOF 모니터링 # spof_monitor.py - 실시간 SPOF 모니터링 import time import threading import logging from prometheus_client import start_http_server, Gauge, Counter class SPOFMonitor: def __init__(self): self.spof_gauge = Gauge('network_spof_count', 'Number of detected SPOFs') self.link_status_gauge = Gauge('network_link_status', 'Link status', ['device', 'interface']) self.spof_alert_counter = Counter('network_spof_alerts_total', 'Total SPOF alerts') logging.basicConfig(level=logging.INFO) self.logger = logging.getLogger(__name__) def monitor_links(self): """링크 상태 모니터링""" while True: try: devices = self.get_monitored_devices() for device in devices: interfaces = self.get_device_interfaces(device) for interface in interfaces: status = self.check_interface_status(device, interface) self.link_status_gauge.labels( device=device['name'], interface=interface ).set(1 if status == 'up' else 0) if status == 'down': self.check_spof_impact(device, interface) time.sleep(30) # 30초마다 체크 except Exception as e: self.logger.error(f"Monitoring error: {e}") time.sleep(60) def check_spof_impact(self, device, failed_interface): """장애 발생 시 SPOF 영향 분석""" remaining_paths = self.calculate_remaining_paths(device, failed_interface) if remaining_paths == 0: self.logger.critical(f"SPOF ALERT: {device['name']} {failed_interface} failure causes network partition") self.spof_alert_counter.inc() self.send_alert(device, failed_interface, 'SPOF_CRITICAL') elif remaining_paths == 1: self.logger.warning(f"SPOF WARNING: {device['name']} {failed_interface} creates single path") self.send_alert(device, failed_interface, 'SPOF_WARNING') def start_monitoring(self): """모니터링 시작""" # Prometheus 메트릭 서버 시작 start_http_server(8000) # 링크 모니터링 쓰레드 시작 monitor_thread = threading.Thread(target=self.monitor_links) monitor_thread.daemon = True monitor_thread.start() self.logger.info("SPOF monitoring started on port 8000") # 메인 루프 try: while True: time.sleep(1) except KeyboardInterrupt: self.logger.info("Monitoring stopped") if __name__ == "__main__": monitor = SPOFMonitor() monitor.start_monitoring() SPOF 제거 우선순위 매트릭스 # SPOF 위험도 평가 매트릭스 위험도 = (영향도 × 발생가능성) / 대응시간 영향도 점수: - 전체 네트워크 단절: 10 - 부분 네트워크 단절: 7 - 성능 저하: 4 - 일부 서비스 영향: 2 발생가능성 점수: - 매우 높음 (월 1회 이상): 10 - 높음 (분기 1회): 7 - 보통 (연 2-3회): 4 - 낮음 (연 1회 이하): 2 대응시간 점수: - 4시간 이상: 1 - 2-4시간: 2 - 1-2시간: 4 - 1시간 이하: 7 # 우선순위 결정 우선순위 1 (즉시): 위험도 &gt; 35 우선순위 2 (1개월): 위험도 20-35 우선순위 3 (3개월): 위험도 10-20 우선순위 4 (1년): 위험도 &lt; 10]]></summary></entry><entry><title type="html">리눅스 보안 완전 가이드 1편 - 기초 보안 설정 | Linux Security Guide Part 1 - Basic Security Configuration</title><link href="https://leeyonghe.github.io/infra-blog/blog/2024/10/26/linux-security-guide-part1.html" rel="alternate" type="text/html" title="리눅스 보안 완전 가이드 1편 - 기초 보안 설정 | Linux Security Guide Part 1 - Basic Security Configuration" /><published>2024-10-26T00:00:00+00:00</published><updated>2024-10-26T00:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2024/10/26/linux-security-guide-part1</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2024/10/26/linux-security-guide-part1.html"><![CDATA[<p>리눅스 시스템 보안의 첫 번째 단계인 기초 보안 설정을 완벽하게 마스터해보겠습니다. 사용자 계정 관리부터 SSH 보안 강화까지 실무에서 바로 적용할 수 있는 내용으로 구성했습니다.</p>

<h2 id="사용자-계정-보안-강화--user-account-security">사용자 계정 보안 강화 | User Account Security</h2>

<h3 id="-사용자-계정-관리-기초">👤 사용자 계정 관리 기초</h3>

<h4 id="안전한-사용자-생성-및-관리">안전한 사용자 생성 및 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 보안을 고려한 사용자 생성</span>
<span class="c"># 시스템 사용자 (서비스용)</span>
useradd <span class="nt">-r</span> <span class="nt">-s</span> /usr/sbin/nologin <span class="nt">-d</span> /var/lib/myservice <span class="nt">-c</span> <span class="s2">"MyService System User"</span> myservice

<span class="c"># 일반 사용자 생성 (홈 디렉토리 권한 강화)</span>
useradd <span class="nt">-m</span> <span class="nt">-s</span> /bin/bash <span class="nt">-c</span> <span class="s2">"John Doe"</span> <span class="nt">-G</span> <span class="nb">users </span>john
<span class="nb">chmod </span>750 /home/john
<span class="nb">chown </span>john:john /home/john

<span class="c"># 사용자 정보 확인</span>
<span class="nb">id </span>john
<span class="nb">groups </span>john
finger john
last john

<span class="c"># 사용자 계정 잠금/해제</span>
usermod <span class="nt">-L</span> john    <span class="c"># 계정 잠금</span>
usermod <span class="nt">-U</span> john    <span class="c"># 계정 해제</span>
passwd <span class="nt">-l</span> john     <span class="c"># 패스워드 잠금</span>
passwd <span class="nt">-u</span> john     <span class="c"># 패스워드 해제</span>

<span class="c"># 계정 만료 설정</span>
usermod <span class="nt">-e</span> 2024-12-31 john    <span class="c"># 계정 만료일 설정</span>
chage <span class="nt">-E</span> 2024-12-31 john      <span class="c"># 동일한 기능</span>

<span class="c"># 비활성 사용자 계정 찾기</span>
lastlog | <span class="nb">awk</span> <span class="s1">'$2 == "Never" || $2 &lt; "'</span><span class="si">$(</span><span class="nb">date</span> <span class="nt">-d</span> <span class="s1">'90 days ago'</span> <span class="s1">'+%Y-%m-%d'</span><span class="si">)</span><span class="s1">'" {print $1}'</span>

<span class="c"># 불필요한 계정 제거</span>
userdel <span class="nt">-r</span> olduser    <span class="c"># 홈 디렉토리도 함께 삭제</span>
</code></pre></div></div>

<h4 id="강력한-패스워드-정책-구현">강력한 패스워드 정책 구현</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># PAM 기반 패스워드 복잡성 설정</span>
<span class="c"># /etc/pam.d/common-password (Ubuntu/Debian)</span>
password requisite pam_pwquality.so <span class="nv">retry</span><span class="o">=</span>3 <span class="nv">minlen</span><span class="o">=</span>14 <span class="nv">minclass</span><span class="o">=</span>4 <span class="nv">maxrepeat</span><span class="o">=</span>2 <span class="nv">ucredit</span><span class="o">=</span><span class="nt">-2</span> <span class="nv">lcredit</span><span class="o">=</span><span class="nt">-2</span> <span class="nv">dcredit</span><span class="o">=</span><span class="nt">-2</span> <span class="nv">ocredit</span><span class="o">=</span><span class="nt">-2</span> <span class="nv">difok</span><span class="o">=</span>4 <span class="nv">gecoscheck</span><span class="o">=</span>1 <span class="nv">dictcheck</span><span class="o">=</span>1

<span class="c"># /etc/security/pwquality.conf 상세 설정</span>
<span class="c"># 패스워드 길이 및 복잡성</span>
minlen <span class="o">=</span> 14              <span class="c"># 최소 14자</span>
minclass <span class="o">=</span> 4             <span class="c"># 4개 문자 클래스 모두 포함</span>
maxrepeat <span class="o">=</span> 2            <span class="c"># 연속 동일 문자 2개 이하</span>
maxclasssrepeat <span class="o">=</span> 3      <span class="c"># 동일 클래스 연속 3개 이하</span>

<span class="c"># 문자별 최소 개수 (음수는 필수)</span>
ucredit <span class="o">=</span> <span class="nt">-2</span>             <span class="c"># 대문자 최소 2개</span>
lcredit <span class="o">=</span> <span class="nt">-2</span>             <span class="c"># 소문자 최소 2개  </span>
dcredit <span class="o">=</span> <span class="nt">-2</span>             <span class="c"># 숫자 최소 2개</span>
ocredit <span class="o">=</span> <span class="nt">-2</span>             <span class="c"># 특수문자 최소 2개</span>

<span class="c"># 패스워드 품질 검사</span>
difok <span class="o">=</span> 4                <span class="c"># 이전 패스워드와 최소 4글자 차이</span>
gecoscheck <span class="o">=</span> 1           <span class="c"># GECOS 필드(이름 등) 포함 금지</span>
dictcheck <span class="o">=</span> 1            <span class="c"># 사전 단어 사용 금지</span>
usercheck <span class="o">=</span> 1            <span class="c"># 사용자명 포함 금지</span>
enforcing <span class="o">=</span> 1            <span class="c"># 엄격한 정책 적용</span>

<span class="c"># 금지 패스워드 목록</span>
badwords <span class="o">=</span> password 123456 qwerty admin root

<span class="c"># 패스워드 에이징 정책 (고급)</span>
<span class="c"># /etc/login.defs</span>
PASS_MAX_DAYS   60       <span class="c"># 최대 60일 유효</span>
PASS_MIN_DAYS   7        <span class="c"># 최소 7일 후 변경 가능</span>
PASS_MIN_LEN    14       <span class="c"># 최소 14자</span>
PASS_WARN_AGE   7        <span class="c"># 만료 7일 전 경고</span>
ENCRYPT_METHOD  SHA512   <span class="c"># 강력한 해시 알고리즘</span>

<span class="c"># 기존 사용자에게 정책 적용 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="k">for </span>user <span class="k">in</span> <span class="si">$(</span><span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f1</span> /etc/passwd | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"^#"</span> | <span class="nb">sort</span><span class="si">)</span><span class="p">;</span> <span class="k">do</span>
    <span class="c"># 시스템 계정은 제외 (UID 1000 미만)</span>
    <span class="nv">uid</span><span class="o">=</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$user</span><span class="s2">"</span> 2&gt;/dev/null<span class="si">)</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$uid</span> <span class="nt">-ge</span> 1000 <span class="o">&amp;&amp;</span> <span class="nv">$uid</span> <span class="nt">-le</span> 60000 <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Applying password policy to </span><span class="nv">$user</span><span class="s2">..."</span>
        chage <span class="nt">-M</span> 60 <span class="nt">-m</span> 7 <span class="nt">-W</span> 7 <span class="s2">"</span><span class="nv">$user</span><span class="s2">"</span>
        <span class="c"># 다음 로그인 시 패스워드 변경 강제</span>
        chage <span class="nt">-d</span> 0 <span class="s2">"</span><span class="nv">$user</span><span class="s2">"</span>
    <span class="k">fi
done</span>
</code></pre></div></div>

<h4 id="계정-잠금-및-브루트포스-방지">계정 잠금 및 브루트포스 방지</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># PAM 기반 계정 잠금 설정 (최신 방식)</span>
<span class="c"># /etc/pam.d/common-auth</span>
auth required pam_faillock.so preauth silent audit <span class="nv">deny</span><span class="o">=</span>5 <span class="nv">unlock_time</span><span class="o">=</span>900 <span class="nv">fail_interval</span><span class="o">=</span>900
auth <span class="o">[</span><span class="nv">default</span><span class="o">=</span>die] pam_faillock.so authfail audit <span class="nv">deny</span><span class="o">=</span>5 <span class="nv">unlock_time</span><span class="o">=</span>900 <span class="nv">fail_interval</span><span class="o">=</span>900
auth sufficient pam_unix.so nullok_secure
auth <span class="o">[</span><span class="nv">default</span><span class="o">=</span>die] pam_faillock.so authsucc audit <span class="nv">deny</span><span class="o">=</span>5 <span class="nv">unlock_time</span><span class="o">=</span>900 <span class="nv">fail_interval</span><span class="o">=</span>900

<span class="c"># /etc/pam.d/common-account에 추가</span>
account required pam_faillock.so

<span class="c"># faillock 설정 파일</span>
<span class="c"># /etc/security/faillock.conf</span>
<span class="nb">dir</span> <span class="o">=</span> /var/run/faillock
audit
silent
deny <span class="o">=</span> 5
fail_interval <span class="o">=</span> 900      <span class="c"># 15분 간격</span>
unlock_time <span class="o">=</span> 1800       <span class="c"># 30분 잠금</span>
even_deny_root          <span class="c"># 루트도 잠금 적용</span>
root_unlock_time <span class="o">=</span> 60    <span class="c"># 루트는 1분만 잠금</span>

<span class="c"># faillock 관리 명령</span>
faillock <span class="nt">--user</span> john     <span class="c"># 사용자 실패 횟수 확인</span>
faillock <span class="nt">--user</span> john <span class="nt">--reset</span>   <span class="c"># 사용자 잠금 해제</span>
faillock <span class="nt">--reset</span>        <span class="c"># 모든 사용자 잠금 해제</span>

<span class="c"># 실시간 모니터링 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/monitor-auth-failures.sh</span>
<span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">"/var/log/auth.log"</span>
<span class="nv">ALERT_THRESHOLD</span><span class="o">=</span>3

<span class="nb">tail</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span> | <span class="k">while </span><span class="nb">read </span>line<span class="p">;</span> <span class="k">do
    if </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"authentication failure"</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">user</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"user=[^ ]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="o">=</span> <span class="nt">-f2</span><span class="si">)</span>
        <span class="nv">ip</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"rhost=[^ ]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="o">=</span> <span class="nt">-f2</span><span class="si">)</span>
        
        <span class="c"># 최근 5분간 실패 횟수 계산</span>
        <span class="nv">failures</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"authentication failure.*user=</span><span class="nv">$user</span><span class="s2">.*rhost=</span><span class="nv">$ip</span><span class="s2">"</span> <span class="se">\</span>
                  &lt;<span class="o">(</span><span class="nb">tail</span> <span class="nt">-n</span> 1000 <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span> | <span class="se">\</span>
                    <span class="nb">awk</span> <span class="nt">-v</span> <span class="nv">since</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="nt">-d</span> <span class="s1">'5 minutes ago'</span> <span class="s1">'+%b %d %H:%M'</span><span class="si">)</span><span class="s2">"</span> <span class="se">\</span>
                    <span class="s1">'$0 &gt;= since'</span><span class="o">)</span><span class="si">)</span>
        
        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$failures</span> <span class="nt">-ge</span> <span class="nv">$ALERT_THRESHOLD</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">: ALERT - Multiple auth failures for user </span><span class="nv">$user</span><span class="s2"> from </span><span class="nv">$ip</span><span class="s2"> (</span><span class="nv">$failures</span><span class="s2"> attempts)"</span>
            <span class="c"># 알림 발송 (선택사항)</span>
            <span class="c"># echo "Authentication attack detected: $user from $ip" | \</span>
            <span class="c"># mail -s "Security Alert" admin@company.com</span>
        <span class="k">fi
    fi
done</span>
</code></pre></div></div>

<h3 id="-루트-계정-보안-강화">🔐 루트 계정 보안 강화</h3>

<h4 id="루트-접근-제한-및-sudo-구성">루트 접근 제한 및 sudo 구성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 루트 직접 로그인 완전 차단</span>
<span class="c"># /etc/ssh/sshd_config</span>
PermitRootLogin no

<span class="c"># 콘솔 루트 로그인 제한</span>
<span class="c"># /etc/securetty (비어있게 하면 콘솔 로그인 차단)</span>
<span class="o">&gt;</span> /etc/securetty

<span class="c"># 또는 특정 터미널만 허용</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/securetty <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
console
tty1
</span><span class="no">EOF

</span><span class="c"># sudo 권한 세밀한 제어</span>
<span class="c"># /etc/sudoers.d/custom-rules</span>

<span class="c"># 1. 그룹 기반 권한 설정</span>
%wheel <span class="nv">ALL</span><span class="o">=(</span>ALL:ALL<span class="o">)</span> ALL
%admin <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/systemctl restart <span class="k">*</span>, /usr/bin/systemctl reload <span class="k">*</span>

<span class="c"># 2. 사용자별 세부 권한</span>
<span class="c"># 웹 서버 관리자</span>
webadmin <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> /usr/sbin/service apache2 <span class="k">*</span>, /usr/sbin/service nginx <span class="k">*</span>, <span class="se">\</span>
              /usr/bin/systemctl restart apache2, /usr/bin/systemctl reload nginx, <span class="se">\</span>
              /usr/bin/tail <span class="nt">-f</span> /var/log/apache2/<span class="k">*</span>, /usr/bin/tail <span class="nt">-f</span> /var/log/nginx/<span class="k">*</span>

<span class="c"># 데이터베이스 관리자  </span>
dbadmin <span class="nv">ALL</span><span class="o">=(</span>postgres<span class="o">)</span> NOPASSWD: /usr/bin/psql, /usr/bin/pg_dump, /usr/bin/pg_restore
dbadmin <span class="nv">ALL</span><span class="o">=(</span>mysql<span class="o">)</span> NOPASSWD: /usr/bin/mysql, /usr/bin/mysqldump

<span class="c"># 백업 관리자</span>
backup <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/rsync, /bin/tar, /bin/gzip, /usr/bin/find /home <span class="nt">-name</span> <span class="s2">"*"</span>

<span class="c"># 3. 명령 제한 및 인수 제한</span>
developer <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> /usr/bin/systemctl status <span class="k">*</span>, <span class="o">!</span>/usr/bin/systemctl <span class="k">*</span> <span class="nt">--force</span>

<span class="c"># 4. 시간 제한</span>
nightshift <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/systemctl restart <span class="k">*</span> <span class="se">\</span>
    <span class="c"># 야간 근무 시간에만 허용 (예시)</span>

<span class="c"># 5. 호스트 기반 제한</span>
john <span class="nv">server1</span><span class="o">=(</span>ALL<span class="o">)</span> /bin/ls, /bin/cat /var/log/<span class="k">*</span>

<span class="c"># sudo 로깅 강화</span>
<span class="c"># /etc/sudoers에 추가</span>
Defaults    <span class="nv">logfile</span><span class="o">=</span><span class="s2">"/var/log/sudo.log"</span>
Defaults    log_input, log_output      <span class="c"># 입출력 로깅</span>
Defaults    <span class="nv">iolog_dir</span><span class="o">=</span><span class="s2">"/var/log/sudo-io/%{user}/%{time}"</span>
Defaults    <span class="nv">timestamp_timeout</span><span class="o">=</span>0        <span class="c"># 캐시 비활성화</span>
Defaults    <span class="nv">passwd_tries</span><span class="o">=</span>3            <span class="c"># 3회 시도 후 실패</span>
Defaults    <span class="nv">passwd_timeout</span><span class="o">=</span>5          <span class="c"># 5분 타임아웃</span>
Defaults    env_reset                 <span class="c"># 환경변수 초기화</span>
Defaults    mail_badpass              <span class="c"># 잘못된 패스워드 시 메일</span>
Defaults    <span class="nv">secure_path</span><span class="o">=</span><span class="s2">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>

<span class="c"># sudo 세션 모니터링 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/sudo-monitor.sh</span>
<span class="nv">SUDO_LOG</span><span class="o">=</span><span class="s2">"/var/log/sudo.log"</span>
<span class="nv">ALERT_EMAIL</span><span class="o">=</span><span class="s2">"admin@company.com"</span>

<span class="c"># 위험한 명령어 패턴</span>
<span class="nv">DANGEROUS_PATTERNS</span><span class="o">=(</span>
    <span class="s2">"rm -rf /"</span>
    <span class="s2">"dd if="</span>
    <span class="s2">"mkfs</span><span class="se">\.</span><span class="s2">"</span>
    <span class="s2">"fdisk"</span>
    <span class="s2">"parted"</span>
    <span class="s2">"chmod 777"</span>
    <span class="s2">"chown root"</span>
    <span class="s2">"/bin/bash"</span>
    <span class="s2">"/bin/sh"</span>
    <span class="s2">"su -"</span>
    <span class="s2">"passwd root"</span>
    <span class="s2">"userdel"</span>
    <span class="s2">"usermod -u 0"</span>
<span class="o">)</span>

<span class="nb">tail</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$SUDO_LOG</span><span class="s2">"</span> | <span class="k">while </span><span class="nb">read </span>line<span class="p">;</span> <span class="k">do
    for </span>pattern <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">DANGEROUS_PATTERNS</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
        if </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-i</span> <span class="s2">"</span><span class="nv">$pattern</span><span class="s2">"</span> <span class="o">&gt;</span>/dev/null<span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">: DANGEROUS SUDO COMMAND DETECTED: </span><span class="nv">$line</span><span class="s2">"</span>
            <span class="nb">echo</span> <span class="s2">"Dangerous sudo command executed: </span><span class="nv">$line</span><span class="s2">"</span> | <span class="se">\</span>
            mail <span class="nt">-s</span> <span class="s2">"SECURITY ALERT: Dangerous Command"</span> <span class="s2">"</span><span class="nv">$ALERT_EMAIL</span><span class="s2">"</span>
        <span class="k">fi
    done
done</span>
</code></pre></div></div>

<h3 id="-고급-인증-메커니즘">🔑 고급 인증 메커니즘</h3>

<h4 id="다중-인증-요소-mfa-구현">다중 인증 요소 (MFA) 구현</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Google Authenticator (TOTP) 설정</span>
<span class="c"># 1. 패키지 설치</span>
apt-get <span class="nb">install </span>libpam-google-authenticator

<span class="c"># 2. 사용자별 설정 (각 사용자가 실행)</span>
google-authenticator
<span class="c"># - 시간 기반 토큰 사용: y</span>
<span class="c"># - QR 코드 표시 후 앱에 등록</span>
<span class="c"># - 긴급 스크래치 코드 저장</span>
<span class="c"># - 토큰 재사용 방지: y</span>
<span class="c"># - 시간 허용 오차: y</span>

<span class="c"># 3. SSH에서 MFA 활성화</span>
<span class="c"># /etc/pam.d/sshd에 추가 (password 줄 위에)</span>
auth required pam_google_authenticator.so

<span class="c"># /etc/ssh/sshd_config 수정</span>
ChallengeResponseAuthentication <span class="nb">yes
</span>AuthenticationMethods publickey,keyboard-interactive

<span class="c"># 4. sudo에서 MFA 적용</span>
<span class="c"># /etc/pam.d/sudo에 추가</span>
auth required pam_google_authenticator.so

<span class="c"># 5. MFA 백업 및 복구</span>
<span class="c"># 사용자별 설정 백업</span>
<span class="nb">cp</span> ~/.google_authenticator ~/.google_authenticator.backup

<span class="c"># 관리자용 긴급 복구 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/mfa-recovery.sh</span>
<span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Username: "</span> username
<span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Emergency scratch code: "</span> scratch_code

<span class="k">if </span><span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"</span><span class="nv">$scratch_code</span><span class="s2">"</span> <span class="s2">"/home/</span><span class="nv">$username</span><span class="s2">/.google_authenticator"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Valid scratch code. Temporarily disabling MFA..."</span>
    <span class="nb">mv</span> <span class="s2">"/home/</span><span class="nv">$username</span><span class="s2">/.google_authenticator"</span> <span class="s2">"/home/</span><span class="nv">$username</span><span class="s2">/.google_authenticator.disabled"</span>
    <span class="nb">echo</span> <span class="s2">"MFA disabled for </span><span class="nv">$username</span><span class="s2">. Re-enable after password reset."</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"Invalid scratch code."</span>
<span class="k">fi</span>
</code></pre></div></div>

<h4 id="ldapactive-directory-통합-인증">LDAP/Active Directory 통합 인증</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SSSD를 이용한 AD 통합 (Ubuntu/CentOS)</span>
<span class="c"># 1. 필요 패키지 설치</span>
apt-get <span class="nb">install </span>sssd sssd-tools realmd adcli packagekit

<span class="c"># 2. 도메인 발견 및 가입</span>
realm discover company.local
realm <span class="nb">join</span> <span class="nt">-U</span> administrator company.local

<span class="c"># 3. SSSD 구성</span>
<span class="c"># /etc/sssd/sssd.conf</span>
<span class="o">[</span>sssd]
domains <span class="o">=</span> company.local
config_file_version <span class="o">=</span> 2
services <span class="o">=</span> nss, pam

<span class="o">[</span>domain/company.local]
default_shell <span class="o">=</span> /bin/bash
krb5_store_password_if_offline <span class="o">=</span> True
cache_credentials <span class="o">=</span> True
krb5_realm <span class="o">=</span> COMPANY.LOCAL
realmd_tags <span class="o">=</span> manages-system joined-with-adcli
id_provider <span class="o">=</span> ad
fallback_homedir <span class="o">=</span> /home/%u@%d
ad_domain <span class="o">=</span> company.local
use_fully_qualified_names <span class="o">=</span> True
ldap_id_mapping <span class="o">=</span> True
access_provider <span class="o">=</span> ad

<span class="c"># 특정 그룹만 허용</span>
ad_access_filter <span class="o">=</span> <span class="o">(</span><span class="nv">memberOf</span><span class="o">=</span><span class="nv">CN</span><span class="o">=</span>Linux-Users,OU<span class="o">=</span>Groups,DC<span class="o">=</span>company,DC<span class="o">=</span><span class="nb">local</span><span class="o">)</span>

<span class="nb">chmod </span>600 /etc/sssd/sssd.conf
systemctl <span class="nb">enable </span>sssd
systemctl start sssd

<span class="c"># 4. 홈 디렉토리 자동 생성</span>
<span class="c"># /etc/pam.d/common-session에 추가</span>
session required pam_mkhomedir.so <span class="nv">skel</span><span class="o">=</span>/etc/skel <span class="nb">umask</span><span class="o">=</span>0022

<span class="c"># 5. sudo 권한 설정 (AD 그룹 기반)</span>
<span class="c"># /etc/sudoers.d/ad-groups</span>
%domain<span class="se">\ </span>admins@company.local <span class="nv">ALL</span><span class="o">=(</span>ALL:ALL<span class="o">)</span> ALL
%linux-administrators@company.local <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/systemctl <span class="k">*</span>, /usr/sbin/service <span class="k">*</span>

<span class="c"># 6. 연결 테스트</span>
getent passwd user@company.local
<span class="nb">id </span>user@company.local
su - user@company.local
</code></pre></div></div>

<h3 id="-세션-및-로그인-제어">🛂 세션 및 로그인 제어</h3>

<h4 id="고급-로그인-제어-설정">고급 로그인 제어 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/security/access.conf - 액세스 제어</span>
<span class="c"># 형식: 권한:사용자/그룹:터미널/호스트</span>

<span class="c"># 루트는 로컬에서만 로그인 허용</span>
+ : root : LOCAL
- : root : ALL

<span class="c"># admin 그룹은 특정 IP에서만</span>
+ : @admin : 192.168.1.0/24
- : @admin : ALL

<span class="c"># 특정 사용자는 특정 시간에만</span>
+ : nightshift : ALL EXCEPT HOLIDAYS
- : nightshift : Wl0800-1800

<span class="c"># 시간 기반 접근 제어</span>
<span class="c"># /etc/security/time.conf</span>
login<span class="p">;</span><span class="k">*</span><span class="p">;</span><span class="nb">users</span><span class="p">;</span>Al0800-1800
sshd<span class="p">;</span><span class="k">*</span><span class="p">;</span>developers<span class="p">;</span>MoTuWeThFr0900-1800

<span class="c"># 로그인 시도 제한</span>
<span class="c"># /etc/security/limits.conf</span>
<span class="c"># 사용자별 동시 로그인 세션 제한</span>
@users hard maxlogins 2
john hard maxlogins 1

<span class="c"># 프로세스 수 제한 (포크 폭탄 방지)</span>
@users hard <span class="nb">nproc </span>1024
@developers hard <span class="nb">nproc </span>2048

<span class="c"># 메모리 사용량 제한</span>
@users hard as 1048576    <span class="c"># 1GB</span>

<span class="c"># 파일 디스크립터 제한</span>
@users hard nofile 4096

<span class="c"># 코어 덤프 비활성화</span>
<span class="k">*</span> hard core 0

<span class="c"># 로그인 배너 설정</span>
<span class="c"># /etc/issue (콘솔 로그인)</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/issue <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
**********************************************************************
*                        WARNING NOTICE                             *
*                                                                    *
* This system is for authorized users only. All activities may be   *
* monitored and recorded. Unauthorized access is prohibited and     *
* will be prosecuted to the full extent of the law.                *
*                                                                    *
**********************************************************************
</span><span class="no">
EOF

</span><span class="c"># /etc/issue.net (네트워크 로그인)</span>
<span class="nb">cp</span> /etc/issue /etc/issue.net

<span class="c"># /etc/motd (로그인 후 메시지)</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/motd <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
System Information:
- Last system update: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="sh">
- Security policy: https://company.com/security-policy
- Report security incidents: security@company.com
</span><span class="no">
EOF

</span><span class="c"># 동적 MOTD 생성 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /etc/update-motd.d/10-sysinfo</span>
<span class="nb">echo</span> <span class="s2">"System Status as of </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"======================================"</span>
<span class="nb">echo</span> <span class="s2">"Hostname: </span><span class="si">$(</span><span class="nb">hostname</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Kernel: </span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Uptime: </span><span class="si">$(</span><span class="nb">uptime</span> <span class="nt">-p</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Load: </span><span class="si">$(</span><span class="nb">cat</span> /proc/loadavg | <span class="nb">awk</span> <span class="s1">'{print $1", "$2", "$3}'</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Memory: </span><span class="si">$(</span>free <span class="nt">-h</span> | <span class="nb">awk</span> <span class="s1">'NR==2{printf "%.1fG/%.1fG (%.1f%%)", $3/1024, $2/1024, $3*100/$2}'</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Disk: </span><span class="si">$(</span><span class="nb">df</span> <span class="nt">-h</span> / | <span class="nb">awk</span> <span class="s1">'NR==2{printf "%s/%s (%s)", $3, $2, $5}'</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">""</span>

<span class="c"># 보안 상태 확인</span>
<span class="k">if </span>systemctl is-active <span class="nt">--quiet</span> fail2ban<span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"✓ Fail2ban: Active"</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"✗ Fail2ban: Inactive"</span>
<span class="k">fi

if </span>systemctl is-active <span class="nt">--quiet</span> sshd<span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"✓ SSH: Active"</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"✗ SSH: Inactive"</span>  
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"======================================"</span>
<span class="nb">echo</span> <span class="s2">""</span>

<span class="nb">chmod</span> +x /etc/update-motd.d/10-sysinfo
</code></pre></div></div>

<h3 id="-인증-로그-모니터링-및-분석">📊 인증 로그 모니터링 및 분석</h3>

<h4 id="실시간-로그인-모니터링-시스템">실시간 로그인 모니터링 시스템</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
# /usr/local/bin/auth-monitor.py
</span><span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">smtplib</span>
<span class="kn">from</span> <span class="n">email.mime.text</span> <span class="kn">import</span> <span class="n">MIMEText</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span><span class="p">,</span> <span class="n">deque</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>

<span class="k">class</span> <span class="nc">AuthenticationMonitor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">failed_attempts</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="n">deque</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">successful_logins</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="n">deque</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">suspicious_ips</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">alert_threshold</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="n">self</span><span class="p">.</span><span class="n">time_window</span> <span class="o">=</span> <span class="mi">300</span>  <span class="c1"># 5 minutes
</span>        
    <span class="k">def</span> <span class="nf">parse_log_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">line</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">로그 라인 파싱</span><span class="sh">"""</span>
        <span class="n">patterns</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">failed_password</span><span class="sh">'</span><span class="p">:</span> <span class="sa">r</span><span class="sh">'</span><span class="s">(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Failed password for (\w+) from (\d+\.\d+\.\d+\.\d+)</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">accepted_password</span><span class="sh">'</span><span class="p">:</span> <span class="sa">r</span><span class="sh">'</span><span class="s">(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Accepted password for (\w+) from (\d+\.\d+\.\d+\.\d+)</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">invalid_user</span><span class="sh">'</span><span class="p">:</span> <span class="sa">r</span><span class="sh">'</span><span class="s">(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Invalid user (\w+) from (\d+\.\d+\.\d+\.\d+)</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">sudo_command</span><span class="sh">'</span><span class="p">:</span> <span class="sa">r</span><span class="sh">'</span><span class="s">(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*sudo.*USER=(\w+).*COMMAND=(.*)</span><span class="sh">'</span>
        <span class="p">}</span>
        
        <span class="k">for</span> <span class="n">event_type</span><span class="p">,</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="n">patterns</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">event_type</span><span class="p">,</span> <span class="k">match</span><span class="p">.</span><span class="nf">groups</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">is_suspicious_ip</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">ip</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">의심스러운 IP 판별</span><span class="sh">"""</span>
        <span class="c1"># 내부 네트워크 IP는 제외
</span>        <span class="n">internal_ranges</span> <span class="o">=</span> <span class="p">[</span>
            <span class="sh">'</span><span class="s">192.168.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">10.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.16.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.17.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.18.</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">172.19.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.20.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.21.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.22.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.23.</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">172.24.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.25.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.26.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.27.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.28.</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">172.29.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.30.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">172.31.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">127.</span><span class="sh">'</span>
        <span class="p">]</span>
        
        <span class="k">return</span> <span class="ow">not</span> <span class="nf">any</span><span class="p">(</span><span class="n">ip</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span> <span class="k">for</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">internal_ranges</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">check_brute_force</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">ip</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">브루트포스 공격 확인</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        
        <span class="c1"># 오래된 시도 제거
</span>        <span class="nf">while </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">failed_attempts</span><span class="p">[</span><span class="n">ip</span><span class="p">]</span> <span class="ow">and</span> 
               <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">failed_attempts</span><span class="p">[</span><span class="n">ip</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">time_window</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">failed_attempts</span><span class="p">[</span><span class="n">ip</span><span class="p">].</span><span class="nf">popleft</span><span class="p">()</span>
        
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">failed_attempts</span><span class="p">[</span><span class="n">ip</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">alert_threshold</span>
    
    <span class="k">def</span> <span class="nf">send_alert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">alert_type</span><span class="p">,</span> <span class="n">details</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">알림 발송</span><span class="sh">"""</span>
        <span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"""</span><span class="s">
Security Alert: </span><span class="si">{</span><span class="n">alert_type</span><span class="si">}</span><span class="s">

Time: </span><span class="si">{</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%Y-%m-%d %H</span><span class="si">:</span><span class="o">%</span><span class="n">M</span><span class="si">:</span><span class="o">%</span><span class="n">S</span><span class="sh">'</span><span class="s">)</span><span class="si">}</span><span class="s">
Details: </span><span class="si">{</span><span class="n">details</span><span class="si">}</span><span class="s">

System: </span><span class="si">{</span><span class="n">subprocess</span><span class="p">.</span><span class="nf">check_output</span><span class="p">(</span><span class="sh">'</span><span class="s">hostname</span><span class="sh">'</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">decode</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="s">

Please investigate immediately.
        </span><span class="sh">"""</span>
        
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">ALERT: </span><span class="si">{</span><span class="n">alert_type</span><span class="si">}</span><span class="s"> - </span><span class="si">{</span><span class="n">details</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># 이메일 발송 (선택사항)
</span>        <span class="c1"># self.send_email("Security Alert", message)
</span>        
        <span class="c1"># 로그 기록
</span>        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">/var/log/security-alerts.log</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">()</span><span class="si">}</span><span class="s"> - </span><span class="si">{</span><span class="n">alert_type</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">details</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">monitor_log</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">log_file</span><span class="o">=</span><span class="sh">'</span><span class="s">/var/log/auth.log</span><span class="sh">'</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">로그 모니터링 메인 루프</span><span class="sh">"""</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Starting authentication monitoring on </span><span class="si">{</span><span class="n">log_file</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># 기존 로그 처리 (마지막 100줄)
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">log_file</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>
                <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">[</span><span class="o">-</span><span class="mi">100</span><span class="p">:]:</span>
                    <span class="n">self</span><span class="p">.</span><span class="nf">process_line</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Log file </span><span class="si">{</span><span class="n">log_file</span><span class="si">}</span><span class="s"> not found</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>
        
        <span class="c1"># 실시간 모니터링
</span>        <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nc">Popen</span><span class="p">([</span><span class="sh">'</span><span class="s">tail</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">-f</span><span class="sh">'</span><span class="p">,</span> <span class="n">log_file</span><span class="p">],</span> 
                               <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> 
                               <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                               <span class="n">universal_newlines</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nf">iter</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">readline</span><span class="p">,</span> <span class="sh">''</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">process_line</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span>
        <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
            <span class="n">proc</span><span class="p">.</span><span class="nf">terminate</span><span class="p">()</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Monitoring stopped</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">process_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">line</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">로그 라인 처리</span><span class="sh">"""</span>
        <span class="n">event_type</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">parse_log_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="n">event_type</span><span class="p">:</span>
            <span class="k">return</span>
            
        <span class="n">current_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="n">event_type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">failed_password</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">timestamp</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">data</span>
            <span class="n">self</span><span class="p">.</span><span class="n">failed_attempts</span><span class="p">[</span><span class="n">ip</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">current_time</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">is_suspicious_ip</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="nf">check_brute_force</span><span class="p">(</span><span class="n">ip</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span>
                    <span class="sh">"</span><span class="s">Brute Force Attack Detected</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sa">f</span><span class="sh">"</span><span class="s">IP </span><span class="si">{</span><span class="n">ip</span><span class="si">}</span><span class="s"> failed </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">failed_attempts</span><span class="p">[</span><span class="n">ip</span><span class="p">])</span><span class="si">}</span><span class="s"> login attempts for user </span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="sh">"</span>
                <span class="p">)</span>
                <span class="n">self</span><span class="p">.</span><span class="n">suspicious_ips</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span>
        
        <span class="k">elif</span> <span class="n">event_type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">accepted_password</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">timestamp</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">data</span>
            
            <span class="k">if</span> <span class="n">ip</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">suspicious_ips</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span>
                    <span class="sh">"</span><span class="s">Successful Login from Suspicious IP</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sa">f</span><span class="sh">"</span><span class="s">User </span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s"> logged in from previously suspicious IP </span><span class="si">{</span><span class="n">ip</span><span class="si">}</span><span class="sh">"</span>
                <span class="p">)</span>
            
            <span class="c1"># 비정상 시간대 로그인 확인
</span>            <span class="n">current_hour</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="n">hour</span>
            <span class="k">if</span> <span class="n">current_hour</span> <span class="o">&lt;</span> <span class="mi">6</span> <span class="ow">or</span> <span class="n">current_hour</span> <span class="o">&gt;</span> <span class="mi">22</span><span class="p">:</span>  <span class="c1"># 오전 6시 이전, 오후 10시 이후
</span>                <span class="n">self</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span>
                    <span class="sh">"</span><span class="s">Off-Hours Login</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sa">f</span><span class="sh">"</span><span class="s">User </span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s"> logged in from </span><span class="si">{</span><span class="n">ip</span><span class="si">}</span><span class="s"> at unusual time: </span><span class="si">{</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%H</span><span class="si">:</span><span class="o">%</span><span class="n">M</span><span class="sh">'</span><span class="s">)</span><span class="si">}</span><span class="sh">"</span>
                <span class="p">)</span>
        
        <span class="k">elif</span> <span class="n">event_type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">invalid_user</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">timestamp</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">data</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">Invalid User Login Attempt</span><span class="sh">"</span><span class="p">,</span>
                <span class="sa">f</span><span class="sh">"</span><span class="s">Attempt to login as non-existent user </span><span class="sh">'</span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="sh">'</span><span class="s"> from </span><span class="si">{</span><span class="n">ip</span><span class="si">}</span><span class="sh">"</span>
            <span class="p">)</span>
        
        <span class="k">elif</span> <span class="n">event_type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">sudo_command</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">timestamp</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">command</span> <span class="o">=</span> <span class="n">data</span>
            
            <span class="c1"># 위험한 명령어 감지
</span>            <span class="n">dangerous_patterns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">rm -rf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">dd if=</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mkfs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">fdisk</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">passwd root</span><span class="sh">'</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="n">dangerous_patterns</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="n">command</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span>
                        <span class="sh">"</span><span class="s">Dangerous Sudo Command</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sa">f</span><span class="sh">"</span><span class="s">User </span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s"> executed: </span><span class="si">{</span><span class="n">command</span><span class="si">}</span><span class="sh">"</span>
                    <span class="p">)</span>
                    <span class="k">break</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">monitor</span> <span class="o">=</span> <span class="nc">AuthenticationMonitor</span><span class="p">()</span>
    <span class="n">monitor</span><span class="p">.</span><span class="nf">monitor_log</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="로그인-통계-및-분석-도구">로그인 통계 및 분석 도구</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/auth-stats.sh</span>
<span class="c"># 인증 로그 통계 분석 스크립트</span>

<span class="nb">echo</span> <span class="s2">"=== Linux Authentication Statistics Report ==="</span>
<span class="nb">echo</span> <span class="s2">"Generated on: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"=============================================="</span>
<span class="nb">echo</span>

<span class="c"># 1. 최근 성공한 로그인</span>
<span class="nb">echo</span> <span class="s2">"🔑 Recent Successful Logins (Last 24 hours):"</span>
last <span class="nt">-s</span> yesterday | <span class="nb">head</span> <span class="nt">-20</span>
<span class="nb">echo</span>

<span class="c"># 2. 실패한 로그인 시도 통계</span>
<span class="nb">echo</span> <span class="s2">"❌ Failed Login Attempts (Last 7 days):"</span>
<span class="nb">grep</span> <span class="s2">"Failed password"</span> /var/log/auth.log<span class="k">*</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'{print $1, $2, $11}'</span> | <span class="se">\</span>
<span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span> | <span class="nb">head</span> <span class="nt">-10</span>
<span class="nb">echo</span>

<span class="c"># 3. 의심스러운 사용자명 시도</span>
<span class="nb">echo</span> <span class="s2">"👤 Invalid User Attempts:"</span>
<span class="nb">grep</span> <span class="s2">"Invalid user"</span> /var/log/auth.log<span class="k">*</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'{print $8}'</span> | <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span> | <span class="nb">head</span> <span class="nt">-10</span>
<span class="nb">echo</span>

<span class="c"># 4. IP별 접근 시도 통계</span>
<span class="nb">echo</span> <span class="s2">"🌐 Access Attempts by IP:"</span>
<span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"(Failed password|Accepted password)"</span> /var/log/auth.log<span class="k">*</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'{print $NF}'</span> | <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span> | <span class="nb">head</span> <span class="nt">-10</span>
<span class="nb">echo</span>

<span class="c"># 5. 시간대별 로그인 패턴</span>
<span class="nb">echo</span> <span class="s2">"⏰ Login Pattern by Hour:"</span>
<span class="nb">grep</span> <span class="s2">"Accepted password"</span> /var/log/auth.log<span class="k">*</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'{print $3}'</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f1</span> | <span class="nb">sort</span> <span class="nt">-n</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="se">\</span>
<span class="k">while </span><span class="nb">read </span>count hour<span class="p">;</span> <span class="k">do
    </span><span class="nb">printf</span> <span class="s2">"%02d:00 %s %s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$hour</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$count</span><span class="s2">"</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">printf</span> <span class="s2">"%*s"</span> <span class="k">$((</span>count/2<span class="k">))</span> <span class="s2">""</span> | <span class="nb">tr</span> <span class="s2">" "</span> <span class="s2">"▇"</span><span class="si">)</span><span class="s2">"</span>
<span class="k">done
</span><span class="nb">echo</span>

<span class="c"># 6. sudo 사용 통계</span>
<span class="nb">echo</span> <span class="s2">"🔧 Sudo Command Usage:"</span>
<span class="nb">grep</span> <span class="s2">"sudo"</span> /var/log/auth.log<span class="k">*</span> | <span class="se">\</span>
<span class="nb">grep</span> <span class="s2">"COMMAND="</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="nt">-F</span><span class="s1">'COMMAND='</span> <span class="s1">'{print $2}'</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'{print $1}'</span> | <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span> | <span class="nb">head</span> <span class="nt">-10</span>
<span class="nb">echo</span>

<span class="c"># 7. 보안 이벤트 요약</span>
<span class="nb">echo</span> <span class="s2">"🚨 Security Events Summary:"</span>
<span class="nv">total_failed</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"Failed password"</span> /var/log/auth.log<span class="k">*</span><span class="si">)</span>
<span class="nv">total_invalid</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"Invalid user"</span> /var/log/auth.log<span class="k">*</span><span class="si">)</span>
<span class="nv">total_sudo</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s2">"sudo.*COMMAND="</span> /var/log/auth.log<span class="k">*</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"   Failed password attempts: </span><span class="nv">$total_failed</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"   Invalid user attempts: </span><span class="nv">$total_invalid</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"   Sudo commands executed: </span><span class="nv">$total_sudo</span><span class="s2">"</span>

<span class="c"># 8. 추천 보안 조치</span>
<span class="nb">echo
echo</span> <span class="s2">"💡 Security Recommendations:"</span>

<span class="c"># 높은 실패 시도가 있는 IP 확인</span>
<span class="nv">high_fail_ips</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="s2">"Failed password"</span> /var/log/auth.log<span class="k">*</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'{print $NF}'</span> | <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'$1 &gt; 50 {print $2}'</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>

<span class="k">if</span> <span class="o">[</span> <span class="nv">$high_fail_ips</span> <span class="nt">-gt</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"   - Consider blocking IPs with high failure rates"</span>
<span class="k">fi</span>

<span class="c"># 비정상적인 시간대 접근 확인</span>
<span class="nv">night_logins</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="s2">"Accepted password"</span> /var/log/auth.log<span class="k">*</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'{print $3}'</span> | <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f1</span> | <span class="se">\</span>
<span class="nb">awk</span> <span class="s1">'$1 &lt; 6 || $1 &gt; 22'</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>

<span class="k">if</span> <span class="o">[</span> <span class="nv">$night_logins</span> <span class="nt">-gt</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"   - Review off-hours login activity"</span>
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"=============================================="</span>
</code></pre></div></div>

<h2 id="다음-편-예고">다음 편 예고</h2>

<p>다음 포스트에서는 <strong>SSH 고급 보안 설정과 키 관리</strong>를 상세히 다룰 예정입니다:</p>
<ul>
  <li>SSH 키 기반 인증 구축</li>
  <li>SSH Certificate Authority 설정</li>
  <li>포트 포워딩 및 터널링 보안</li>
  <li>SSH 접근 제어 고급 기법</li>
</ul>

<p>리눅스 기초 보안 설정을 완벽하게 마스터하셨나요? 🔐✨</p>]]></content><author><name>DevOps Engineer</name></author><category term="Security" /><category term="Linux" /><category term="linux-security" /><category term="user-management" /><category term="password-policy" /><category term="ssh" /><category term="authentication" /><summary type="html"><![CDATA[리눅스 시스템 보안의 첫 번째 단계인 기초 보안 설정을 완벽하게 마스터해보겠습니다. 사용자 계정 관리부터 SSH 보안 강화까지 실무에서 바로 적용할 수 있는 내용으로 구성했습니다. 사용자 계정 보안 강화 | User Account Security 👤 사용자 계정 관리 기초 안전한 사용자 생성 및 관리 # 보안을 고려한 사용자 생성 # 시스템 사용자 (서비스용) useradd -r -s /usr/sbin/nologin -d /var/lib/myservice -c "MyService System User" myservice # 일반 사용자 생성 (홈 디렉토리 권한 강화) useradd -m -s /bin/bash -c "John Doe" -G users john chmod 750 /home/john chown john:john /home/john # 사용자 정보 확인 id john groups john finger john last john # 사용자 계정 잠금/해제 usermod -L john # 계정 잠금 usermod -U john # 계정 해제 passwd -l john # 패스워드 잠금 passwd -u john # 패스워드 해제 # 계정 만료 설정 usermod -e 2024-12-31 john # 계정 만료일 설정 chage -E 2024-12-31 john # 동일한 기능 # 비활성 사용자 계정 찾기 lastlog | awk '$2 == "Never" || $2 &lt; "'$(date -d '90 days ago' '+%Y-%m-%d')'" {print $1}' # 불필요한 계정 제거 userdel -r olduser # 홈 디렉토리도 함께 삭제 강력한 패스워드 정책 구현 # PAM 기반 패스워드 복잡성 설정 # /etc/pam.d/common-password (Ubuntu/Debian) password requisite pam_pwquality.so retry=3 minlen=14 minclass=4 maxrepeat=2 ucredit=-2 lcredit=-2 dcredit=-2 ocredit=-2 difok=4 gecoscheck=1 dictcheck=1 # /etc/security/pwquality.conf 상세 설정 # 패스워드 길이 및 복잡성 minlen = 14 # 최소 14자 minclass = 4 # 4개 문자 클래스 모두 포함 maxrepeat = 2 # 연속 동일 문자 2개 이하 maxclasssrepeat = 3 # 동일 클래스 연속 3개 이하 # 문자별 최소 개수 (음수는 필수) ucredit = -2 # 대문자 최소 2개 lcredit = -2 # 소문자 최소 2개 dcredit = -2 # 숫자 최소 2개 ocredit = -2 # 특수문자 최소 2개 # 패스워드 품질 검사 difok = 4 # 이전 패스워드와 최소 4글자 차이 gecoscheck = 1 # GECOS 필드(이름 등) 포함 금지 dictcheck = 1 # 사전 단어 사용 금지 usercheck = 1 # 사용자명 포함 금지 enforcing = 1 # 엄격한 정책 적용 # 금지 패스워드 목록 badwords = password 123456 qwerty admin root # 패스워드 에이징 정책 (고급) # /etc/login.defs PASS_MAX_DAYS 60 # 최대 60일 유효 PASS_MIN_DAYS 7 # 최소 7일 후 변경 가능 PASS_MIN_LEN 14 # 최소 14자 PASS_WARN_AGE 7 # 만료 7일 전 경고 ENCRYPT_METHOD SHA512 # 강력한 해시 알고리즘 # 기존 사용자에게 정책 적용 스크립트 #!/bin/bash for user in $(cut -d: -f1 /etc/passwd | grep -v "^#" | sort); do # 시스템 계정은 제외 (UID 1000 미만) uid=$(id -u "$user" 2&gt;/dev/null) if [[ $uid -ge 1000 &amp;&amp; $uid -le 60000 ]]; then echo "Applying password policy to $user..." chage -M 60 -m 7 -W 7 "$user" # 다음 로그인 시 패스워드 변경 강제 chage -d 0 "$user" fi done 계정 잠금 및 브루트포스 방지 # PAM 기반 계정 잠금 설정 (최신 방식) # /etc/pam.d/common-auth auth required pam_faillock.so preauth silent audit deny=5 unlock_time=900 fail_interval=900 auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900 fail_interval=900 auth sufficient pam_unix.so nullok_secure auth [default=die] pam_faillock.so authsucc audit deny=5 unlock_time=900 fail_interval=900 # /etc/pam.d/common-account에 추가 account required pam_faillock.so # faillock 설정 파일 # /etc/security/faillock.conf dir = /var/run/faillock audit silent deny = 5 fail_interval = 900 # 15분 간격 unlock_time = 1800 # 30분 잠금 even_deny_root # 루트도 잠금 적용 root_unlock_time = 60 # 루트는 1분만 잠금 # faillock 관리 명령 faillock --user john # 사용자 실패 횟수 확인 faillock --user john --reset # 사용자 잠금 해제 faillock --reset # 모든 사용자 잠금 해제 # 실시간 모니터링 스크립트 #!/bin/bash # /usr/local/bin/monitor-auth-failures.sh LOG_FILE="/var/log/auth.log" ALERT_THRESHOLD=3 tail -f "$LOG_FILE" | while read line; do if echo "$line" | grep -q "authentication failure"; then user=$(echo "$line" | grep -o "user=[^ ]*" | cut -d= -f2) ip=$(echo "$line" | grep -o "rhost=[^ ]*" | cut -d= -f2) # 최근 5분간 실패 횟수 계산 failures=$(grep -c "authentication failure.*user=$user.*rhost=$ip" \ &lt;(tail -n 1000 "$LOG_FILE" | \ awk -v since="$(date -d '5 minutes ago' '+%b %d %H:%M')" \ '$0 &gt;= since')) if [[ $failures -ge $ALERT_THRESHOLD ]]; then echo "$(date): ALERT - Multiple auth failures for user $user from $ip ($failures attempts)" # 알림 발송 (선택사항) # echo "Authentication attack detected: $user from $ip" | \ # mail -s "Security Alert" admin@company.com fi fi done 🔐 루트 계정 보안 강화 루트 접근 제한 및 sudo 구성 # 루트 직접 로그인 완전 차단 # /etc/ssh/sshd_config PermitRootLogin no # 콘솔 루트 로그인 제한 # /etc/securetty (비어있게 하면 콘솔 로그인 차단) &gt; /etc/securetty # 또는 특정 터미널만 허용 cat &gt; /etc/securetty &lt;&lt; 'EOF' console tty1 EOF # sudo 권한 세밀한 제어 # /etc/sudoers.d/custom-rules # 1. 그룹 기반 권한 설정 %wheel ALL=(ALL:ALL) ALL %admin ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart *, /usr/bin/systemctl reload * # 2. 사용자별 세부 권한 # 웹 서버 관리자 webadmin ALL=(ALL) /usr/sbin/service apache2 *, /usr/sbin/service nginx *, \ /usr/bin/systemctl restart apache2, /usr/bin/systemctl reload nginx, \ /usr/bin/tail -f /var/log/apache2/*, /usr/bin/tail -f /var/log/nginx/* # 데이터베이스 관리자 dbadmin ALL=(postgres) NOPASSWD: /usr/bin/psql, /usr/bin/pg_dump, /usr/bin/pg_restore dbadmin ALL=(mysql) NOPASSWD: /usr/bin/mysql, /usr/bin/mysqldump # 백업 관리자 backup ALL=(ALL) NOPASSWD: /usr/bin/rsync, /bin/tar, /bin/gzip, /usr/bin/find /home -name "*" # 3. 명령 제한 및 인수 제한 developer ALL=(ALL) /usr/bin/systemctl status *, !/usr/bin/systemctl * --force # 4. 시간 제한 nightshift ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart * \ # 야간 근무 시간에만 허용 (예시) # 5. 호스트 기반 제한 john server1=(ALL) /bin/ls, /bin/cat /var/log/* # sudo 로깅 강화 # /etc/sudoers에 추가 Defaults logfile="/var/log/sudo.log" Defaults log_input, log_output # 입출력 로깅 Defaults iolog_dir="/var/log/sudo-io/%{user}/%{time}" Defaults timestamp_timeout=0 # 캐시 비활성화 Defaults passwd_tries=3 # 3회 시도 후 실패 Defaults passwd_timeout=5 # 5분 타임아웃 Defaults env_reset # 환경변수 초기화 Defaults mail_badpass # 잘못된 패스워드 시 메일 Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" # sudo 세션 모니터링 스크립트 #!/bin/bash # /usr/local/bin/sudo-monitor.sh SUDO_LOG="/var/log/sudo.log" ALERT_EMAIL="admin@company.com" # 위험한 명령어 패턴 DANGEROUS_PATTERNS=( "rm -rf /" "dd if=" "mkfs\." "fdisk" "parted" "chmod 777" "chown root" "/bin/bash" "/bin/sh" "su -" "passwd root" "userdel" "usermod -u 0" ) tail -f "$SUDO_LOG" | while read line; do for pattern in "${DANGEROUS_PATTERNS[@]}"; do if echo "$line" | grep -i "$pattern" &gt;/dev/null; then echo "$(date): DANGEROUS SUDO COMMAND DETECTED: $line" echo "Dangerous sudo command executed: $line" | \ mail -s "SECURITY ALERT: Dangerous Command" "$ALERT_EMAIL" fi done done 🔑 고급 인증 메커니즘 다중 인증 요소 (MFA) 구현 # Google Authenticator (TOTP) 설정 # 1. 패키지 설치 apt-get install libpam-google-authenticator # 2. 사용자별 설정 (각 사용자가 실행) google-authenticator # - 시간 기반 토큰 사용: y # - QR 코드 표시 후 앱에 등록 # - 긴급 스크래치 코드 저장 # - 토큰 재사용 방지: y # - 시간 허용 오차: y # 3. SSH에서 MFA 활성화 # /etc/pam.d/sshd에 추가 (password 줄 위에) auth required pam_google_authenticator.so # /etc/ssh/sshd_config 수정 ChallengeResponseAuthentication yes AuthenticationMethods publickey,keyboard-interactive # 4. sudo에서 MFA 적용 # /etc/pam.d/sudo에 추가 auth required pam_google_authenticator.so # 5. MFA 백업 및 복구 # 사용자별 설정 백업 cp ~/.google_authenticator ~/.google_authenticator.backup # 관리자용 긴급 복구 스크립트 #!/bin/bash # /usr/local/bin/mfa-recovery.sh read -p "Username: " username read -p "Emergency scratch code: " scratch_code if grep -q "$scratch_code" "/home/$username/.google_authenticator"; then echo "Valid scratch code. Temporarily disabling MFA..." mv "/home/$username/.google_authenticator" "/home/$username/.google_authenticator.disabled" echo "MFA disabled for $username. Re-enable after password reset." else echo "Invalid scratch code." fi LDAP/Active Directory 통합 인증 # SSSD를 이용한 AD 통합 (Ubuntu/CentOS) # 1. 필요 패키지 설치 apt-get install sssd sssd-tools realmd adcli packagekit # 2. 도메인 발견 및 가입 realm discover company.local realm join -U administrator company.local # 3. SSSD 구성 # /etc/sssd/sssd.conf [sssd] domains = company.local config_file_version = 2 services = nss, pam [domain/company.local] default_shell = /bin/bash krb5_store_password_if_offline = True cache_credentials = True krb5_realm = COMPANY.LOCAL realmd_tags = manages-system joined-with-adcli id_provider = ad fallback_homedir = /home/%u@%d ad_domain = company.local use_fully_qualified_names = True ldap_id_mapping = True access_provider = ad # 특정 그룹만 허용 ad_access_filter = (memberOf=CN=Linux-Users,OU=Groups,DC=company,DC=local) chmod 600 /etc/sssd/sssd.conf systemctl enable sssd systemctl start sssd # 4. 홈 디렉토리 자동 생성 # /etc/pam.d/common-session에 추가 session required pam_mkhomedir.so skel=/etc/skel umask=0022 # 5. sudo 권한 설정 (AD 그룹 기반) # /etc/sudoers.d/ad-groups %domain\ admins@company.local ALL=(ALL:ALL) ALL %linux-administrators@company.local ALL=(ALL) NOPASSWD: /usr/bin/systemctl *, /usr/sbin/service * # 6. 연결 테스트 getent passwd user@company.local id user@company.local su - user@company.local 🛂 세션 및 로그인 제어 고급 로그인 제어 설정 # /etc/security/access.conf - 액세스 제어 # 형식: 권한:사용자/그룹:터미널/호스트 # 루트는 로컬에서만 로그인 허용 + : root : LOCAL - : root : ALL # admin 그룹은 특정 IP에서만 + : @admin : 192.168.1.0/24 - : @admin : ALL # 특정 사용자는 특정 시간에만 + : nightshift : ALL EXCEPT HOLIDAYS - : nightshift : Wl0800-1800 # 시간 기반 접근 제어 # /etc/security/time.conf login;*;users;Al0800-1800 sshd;*;developers;MoTuWeThFr0900-1800 # 로그인 시도 제한 # /etc/security/limits.conf # 사용자별 동시 로그인 세션 제한 @users hard maxlogins 2 john hard maxlogins 1 # 프로세스 수 제한 (포크 폭탄 방지) @users hard nproc 1024 @developers hard nproc 2048 # 메모리 사용량 제한 @users hard as 1048576 # 1GB # 파일 디스크립터 제한 @users hard nofile 4096 # 코어 덤프 비활성화 * hard core 0 # 로그인 배너 설정 # /etc/issue (콘솔 로그인) cat &gt; /etc/issue &lt;&lt; 'EOF' ********************************************************************** * WARNING NOTICE * * * * This system is for authorized users only. All activities may be * * monitored and recorded. Unauthorized access is prohibited and * * will be prosecuted to the full extent of the law. * * * ********************************************************************** EOF # /etc/issue.net (네트워크 로그인) cp /etc/issue /etc/issue.net # /etc/motd (로그인 후 메시지) cat &gt; /etc/motd &lt;&lt; 'EOF' System Information: - Last system update: $(date) - Security policy: https://company.com/security-policy - Report security incidents: security@company.com EOF # 동적 MOTD 생성 스크립트 #!/bin/bash # /etc/update-motd.d/10-sysinfo echo "System Status as of $(date)" echo "======================================" echo "Hostname: $(hostname)" echo "Kernel: $(uname -r)" echo "Uptime: $(uptime -p)" echo "Load: $(cat /proc/loadavg | awk '{print $1", "$2", "$3}')" echo "Memory: $(free -h | awk 'NR==2{printf "%.1fG/%.1fG (%.1f%%)", $3/1024, $2/1024, $3*100/$2}')" echo "Disk: $(df -h / | awk 'NR==2{printf "%s/%s (%s)", $3, $2, $5}')" echo "" # 보안 상태 확인 if systemctl is-active --quiet fail2ban; then echo "✓ Fail2ban: Active" else echo "✗ Fail2ban: Inactive" fi if systemctl is-active --quiet sshd; then echo "✓ SSH: Active" else echo "✗ SSH: Inactive" fi echo "======================================" echo "" chmod +x /etc/update-motd.d/10-sysinfo 📊 인증 로그 모니터링 및 분석 실시간 로그인 모니터링 시스템 #!/usr/bin/env python3 # /usr/local/bin/auth-monitor.py import re import time import subprocess import smtplib from email.mime.text import MIMEText from collections import defaultdict, deque from datetime import datetime, timedelta class AuthenticationMonitor: def __init__(self): self.failed_attempts = defaultdict(deque) self.successful_logins = defaultdict(deque) self.suspicious_ips = set() self.alert_threshold = 5 self.time_window = 300 # 5 minutes def parse_log_line(self, line): """로그 라인 파싱""" patterns = { 'failed_password': r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Failed password for (\w+) from (\d+\.\d+\.\d+\.\d+)', 'accepted_password': r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Accepted password for (\w+) from (\d+\.\d+\.\d+\.\d+)', 'invalid_user': r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Invalid user (\w+) from (\d+\.\d+\.\d+\.\d+)', 'sudo_command': r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*sudo.*USER=(\w+).*COMMAND=(.*)' } for event_type, pattern in patterns.items(): match = re.search(pattern, line) if match: return event_type, match.groups() return None, None def is_suspicious_ip(self, ip): """의심스러운 IP 판별""" # 내부 네트워크 IP는 제외 internal_ranges = [ '192.168.', '10.', '172.16.', '172.17.', '172.18.', '172.19.', '172.20.', '172.21.', '172.22.', '172.23.', '172.24.', '172.25.', '172.26.', '172.27.', '172.28.', '172.29.', '172.30.', '172.31.', '127.' ] return not any(ip.startswith(prefix) for prefix in internal_ranges) def check_brute_force(self, ip): """브루트포스 공격 확인""" now = time.time() # 오래된 시도 제거 while (self.failed_attempts[ip] and now - self.failed_attempts[ip][0] &gt; self.time_window): self.failed_attempts[ip].popleft() return len(self.failed_attempts[ip]) &gt;= self.alert_threshold def send_alert(self, alert_type, details): """알림 발송""" message = f""" Security Alert: {alert_type} Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} Details: {details} System: {subprocess.check_output('hostname', shell=True).decode().strip()} Please investigate immediately. """ print(f"ALERT: {alert_type} - {details}") # 이메일 발송 (선택사항) # self.send_email("Security Alert", message) # 로그 기록 with open('/var/log/security-alerts.log', 'a') as f: f.write(f"{datetime.now().isoformat()} - {alert_type}: {details}\n") def monitor_log(self, log_file='/var/log/auth.log'): """로그 모니터링 메인 루프""" print(f"Starting authentication monitoring on {log_file}") # 기존 로그 처리 (마지막 100줄) try: with open(log_file, 'r') as f: lines = f.readlines() for line in lines[-100:]: self.process_line(line.strip()) except FileNotFoundError: print(f"Log file {log_file} not found") return # 실시간 모니터링 proc = subprocess.Popen(['tail', '-f', log_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True) try: for line in iter(proc.stdout.readline, ''): self.process_line(line.strip()) except KeyboardInterrupt: proc.terminate() print("\nMonitoring stopped") def process_line(self, line): """로그 라인 처리""" event_type, data = self.parse_log_line(line) if not event_type: return current_time = time.time() if event_type == 'failed_password': timestamp, user, ip = data self.failed_attempts[ip].append(current_time) if self.is_suspicious_ip(ip) and self.check_brute_force(ip): self.send_alert( "Brute Force Attack Detected", f"IP {ip} failed {len(self.failed_attempts[ip])} login attempts for user {user}" ) self.suspicious_ips.add(ip) elif event_type == 'accepted_password': timestamp, user, ip = data if ip in self.suspicious_ips: self.send_alert( "Successful Login from Suspicious IP", f"User {user} logged in from previously suspicious IP {ip}" ) # 비정상 시간대 로그인 확인 current_hour = datetime.now().hour if current_hour &lt; 6 or current_hour &gt; 22: # 오전 6시 이전, 오후 10시 이후 self.send_alert( "Off-Hours Login", f"User {user} logged in from {ip} at unusual time: {datetime.now().strftime('%H:%M')}" ) elif event_type == 'invalid_user': timestamp, user, ip = data self.send_alert( "Invalid User Login Attempt", f"Attempt to login as non-existent user '{user}' from {ip}" ) elif event_type == 'sudo_command': timestamp, user, command = data # 위험한 명령어 감지 dangerous_patterns = ['rm -rf', 'dd if=', 'mkfs', 'fdisk', 'passwd root'] for pattern in dangerous_patterns: if pattern in command: self.send_alert( "Dangerous Sudo Command", f"User {user} executed: {command}" ) break if __name__ == '__main__': monitor = AuthenticationMonitor() monitor.monitor_log() 로그인 통계 및 분석 도구 #!/bin/bash # /usr/local/bin/auth-stats.sh # 인증 로그 통계 분석 스크립트 echo "=== Linux Authentication Statistics Report ===" echo "Generated on: $(date)" echo "==============================================" echo # 1. 최근 성공한 로그인 echo "🔑 Recent Successful Logins (Last 24 hours):" last -s yesterday | head -20 echo # 2. 실패한 로그인 시도 통계 echo "❌ Failed Login Attempts (Last 7 days):" grep "Failed password" /var/log/auth.log* | \ awk '{print $1, $2, $11}' | \ sort | uniq -c | sort -nr | head -10 echo # 3. 의심스러운 사용자명 시도 echo "👤 Invalid User Attempts:" grep "Invalid user" /var/log/auth.log* | \ awk '{print $8}' | sort | uniq -c | sort -nr | head -10 echo # 4. IP별 접근 시도 통계 echo "🌐 Access Attempts by IP:" grep -E "(Failed password|Accepted password)" /var/log/auth.log* | \ awk '{print $NF}' | sort | uniq -c | sort -nr | head -10 echo # 5. 시간대별 로그인 패턴 echo "⏰ Login Pattern by Hour:" grep "Accepted password" /var/log/auth.log* | \ awk '{print $3}' | cut -d: -f1 | sort -n | uniq -c | \ while read count hour; do printf "%02d:00 %s %s\n" "$hour" "$count" "$(printf "%*s" $((count/2)) "" | tr " " "▇")" done echo # 6. sudo 사용 통계 echo "🔧 Sudo Command Usage:" grep "sudo" /var/log/auth.log* | \ grep "COMMAND=" | \ awk -F'COMMAND=' '{print $2}' | \ awk '{print $1}' | sort | uniq -c | sort -nr | head -10 echo # 7. 보안 이벤트 요약 echo "🚨 Security Events Summary:" total_failed=$(grep -c "Failed password" /var/log/auth.log*) total_invalid=$(grep -c "Invalid user" /var/log/auth.log*) total_sudo=$(grep -c "sudo.*COMMAND=" /var/log/auth.log*) echo " Failed password attempts: $total_failed" echo " Invalid user attempts: $total_invalid" echo " Sudo commands executed: $total_sudo" # 8. 추천 보안 조치 echo echo "💡 Security Recommendations:" # 높은 실패 시도가 있는 IP 확인 high_fail_ips=$(grep "Failed password" /var/log/auth.log* | \ awk '{print $NF}' | sort | uniq -c | \ awk '$1 &gt; 50 {print $2}' | wc -l) if [ $high_fail_ips -gt 0 ]; then echo " - Consider blocking IPs with high failure rates" fi # 비정상적인 시간대 접근 확인 night_logins=$(grep "Accepted password" /var/log/auth.log* | \ awk '{print $3}' | cut -d: -f1 | \ awk '$1 &lt; 6 || $1 &gt; 22' | wc -l) if [ $night_logins -gt 0 ]; then echo " - Review off-hours login activity" fi echo "==============================================" 다음 편 예고 다음 포스트에서는 SSH 고급 보안 설정과 키 관리를 상세히 다룰 예정입니다: SSH 키 기반 인증 구축 SSH Certificate Authority 설정 포트 포워딩 및 터널링 보안 SSH 접근 제어 고급 기법 리눅스 기초 보안 설정을 완벽하게 마스터하셨나요? 🔐✨]]></summary></entry><entry><title type="html">리눅스 보안 완전 가이드 | Complete Linux Security Guide - 시스템 보안부터 고급 보안 기법까지</title><link href="https://leeyonghe.github.io/infra-blog/blog/2024/09/14/linux-security-guide.html" rel="alternate" type="text/html" title="리눅스 보안 완전 가이드 | Complete Linux Security Guide - 시스템 보안부터 고급 보안 기법까지" /><published>2024-09-14T03:00:00+00:00</published><updated>2024-09-14T03:00:00+00:00</updated><id>https://leeyonghe.github.io/infra-blog/blog/2024/09/14/linux-security-guide</id><content type="html" xml:base="https://leeyonghe.github.io/infra-blog/blog/2024/09/14/linux-security-guide.html"><![CDATA[<p>리눅스 시스템의 보안을 체계적으로 구축하고 관리하는 완전한 가이드입니다. 기초부터 고급 보안 기법까지 실무에 바로 적용할 수 있는 내용으로 구성했습니다.</p>

<h2 id="리눅스-보안-기초--linux-security-fundamentals">리눅스 보안 기초 | Linux Security Fundamentals</h2>

<h3 id="-사용자-계정-보안">🔐 사용자 계정 보안</h3>

<h4 id="패스워드-정책-강화">패스워드 정책 강화</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 패스워드 복잡성 정책 설정</span>
<span class="c"># /etc/pam.d/common-password (Ubuntu/Debian)</span>
password requisite pam_pwquality.so <span class="nv">retry</span><span class="o">=</span>3 <span class="nv">minlen</span><span class="o">=</span>12 <span class="nv">minclass</span><span class="o">=</span>3 <span class="nv">maxrepeat</span><span class="o">=</span>2 <span class="nv">ucredit</span><span class="o">=</span><span class="nt">-1</span> <span class="nv">lcredit</span><span class="o">=</span><span class="nt">-1</span> <span class="nv">dcredit</span><span class="o">=</span><span class="nt">-1</span> <span class="nv">ocredit</span><span class="o">=</span><span class="nt">-1</span>

<span class="c"># /etc/security/pwquality.conf</span>
minlen <span class="o">=</span> 12
minclass <span class="o">=</span> 3
maxrepeat <span class="o">=</span> 2
maxclasssrepeat <span class="o">=</span> 4
ucredit <span class="o">=</span> <span class="nt">-1</span>    <span class="c"># 최소 대문자 1개</span>
lcredit <span class="o">=</span> <span class="nt">-1</span>    <span class="c"># 최소 소문자 1개  </span>
dcredit <span class="o">=</span> <span class="nt">-1</span>    <span class="c"># 최소 숫자 1개</span>
ocredit <span class="o">=</span> <span class="nt">-1</span>    <span class="c"># 최소 특수문자 1개</span>
difok <span class="o">=</span> 3       <span class="c"># 이전 패스워드와 3글자 이상 달라야 함</span>

<span class="c"># 패스워드 에이징 정책</span>
<span class="c"># /etc/login.defs</span>
PASS_MAX_DAYS   90     <span class="c"># 최대 유효기간</span>
PASS_MIN_DAYS   1      <span class="c"># 최소 변경 주기</span>
PASS_MIN_LEN    12     <span class="c"># 최소 길이</span>
PASS_WARN_AGE   7      <span class="c"># 만료 경고 기간</span>

<span class="c"># 기존 사용자에게 정책 적용</span>
chage <span class="nt">-M</span> 90 <span class="nt">-m</span> 1 <span class="nt">-W</span> 7 username

<span class="c"># 계정 잠금 정책 (실패 시도 제한)</span>
<span class="c"># /etc/pam.d/common-auth</span>
auth required pam_tally2.so <span class="nv">deny</span><span class="o">=</span>5 <span class="nv">unlock_time</span><span class="o">=</span>1800 <span class="nv">onerr</span><span class="o">=</span>fail

<span class="c"># 잠긴 계정 확인 및 해제</span>
pam_tally2 <span class="nt">--user</span> username
pam_tally2 <span class="nt">--user</span> username <span class="nt">--reset</span>
</code></pre></div></div>

<h4 id="루트-계정-보안">루트 계정 보안</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 루트 직접 로그인 차단</span>
<span class="c"># /etc/ssh/sshd_config</span>
PermitRootLogin no
PasswordAuthentication no
PubkeyAuthentication <span class="nb">yes</span>

<span class="c"># 콘솔 루트 로그인 제한</span>
<span class="c"># /etc/securetty (허용할 터미널만 남기기)</span>
console
tty1

<span class="c"># sudo 권한 세밀하게 제어</span>
<span class="c"># /etc/sudoers</span>
<span class="c"># 특정 명령만 허용</span>
webadmin <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> /usr/sbin/service apache2 <span class="k">*</span>, /usr/sbin/service nginx <span class="k">*</span>
<span class="c"># 패스워드 없이 특정 명령 실행</span>
backup <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/rsync, /bin/tar

<span class="c"># sudo 사용 로그 강화</span>
<span class="c"># /etc/rsyslog.conf 또는 /etc/rsyslog.d/50-default.conf</span>
local2.<span class="k">*</span>                        /var/log/sudo.log

<span class="c"># /etc/sudoers에 추가</span>
Defaults    <span class="nv">logfile</span><span class="o">=</span><span class="s2">"/var/log/sudo.log"</span>
Defaults    log_input, log_output
Defaults    <span class="nv">iolog_dir</span><span class="o">=</span><span class="s2">"/var/log/sudo-io"</span>
</code></pre></div></div>

<h3 id="-ssh-보안-강화">🔒 SSH 보안 강화</h3>

<h4 id="ssh-서버-보안-설정">SSH 서버 보안 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/ssh/sshd_config 보안 설정</span>
Protocol 2
Port 2222                    <span class="c"># 기본 포트 변경</span>
PermitRootLogin no
PasswordAuthentication no
PubkeyAuthentication <span class="nb">yes
</span>AuthorizedKeysFile .ssh/authorized_keys
MaxAuthTries 3
MaxSessions 3
MaxStartups 3
LoginGraceTime 60
ClientAliveInterval 300
ClientAliveCountMax 2
UsePAM <span class="nb">yes
</span>X11Forwarding no
AllowTcpForwarding no
GatewayPorts no
PermitTunnel no

<span class="c"># 특정 사용자/그룹만 SSH 접근 허용</span>
AllowUsers admin developer
AllowGroups sshusers
DenyUsers guest anonymous
DenyGroups wheel

<span class="c"># 특정 IP에서만 접근 허용</span>
Match Address 192.168.1.0/24,10.0.0.0/8
    PasswordAuthentication <span class="nb">yes
    
</span>Match Address <span class="k">*</span>,!192.168.1.0/24,!10.0.0.0/8
    DenyUsers <span class="k">*</span>

<span class="c"># 서비스 재시작</span>
systemctl restart sshd
</code></pre></div></div>

<h4 id="ssh-키-기반-인증-구축">SSH 키 기반 인증 구축</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 클라이언트에서 키 생성 (ED25519 권장)</span>
ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"your-email@domain.com"</span>
<span class="c"># 또는 RSA 키 (최소 4096비트)</span>
ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"your-email@domain.com"</span>

<span class="c"># 공개키 서버에 복사</span>
ssh-copy-id <span class="nt">-i</span> ~/.ssh/id_ed25519.pub username@server-ip

<span class="c"># 수동으로 공개키 설정</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/.ssh
<span class="nb">chmod </span>700 ~/.ssh
<span class="nb">cat</span> <span class="o">&gt;&gt;</span> ~/.ssh/authorized_keys <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG... your-email@domain.com
</span><span class="no">EOF
</span><span class="nb">chmod </span>600 ~/.ssh/authorized_keys
<span class="nb">chown </span>username:username ~/.ssh <span class="nt">-R</span>

<span class="c"># SSH 키 관리 - 키별 제한 설정</span>
<span class="c"># ~/.ssh/authorized_keys</span>
<span class="nb">command</span><span class="o">=</span><span class="s2">"/usr/local/bin/backup-script"</span>,no-port-forwarding,no-X11-forwarding,no-agent-forwarding ssh-rsa AAAAB3... backup@server
<span class="nv">from</span><span class="o">=</span><span class="s2">"192.168.1.100"</span>,no-port-forwarding ssh-rsa AAAAB3... admin@workstation

<span class="c"># SSH Certificate Authority 구축</span>
<span class="c"># CA 키 생성</span>
ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-f</span> /etc/ssh/ca_key

<span class="c"># 사용자 인증서 발급</span>
ssh-keygen <span class="nt">-s</span> /etc/ssh/ca_key <span class="nt">-I</span> <span class="s2">"user-certificate"</span> <span class="nt">-n</span> username <span class="nt">-V</span> +1w ~/.ssh/id_rsa.pub

<span class="c"># 서버 설정에서 CA 신뢰</span>
<span class="c"># /etc/ssh/sshd_config</span>
TrustedUserCAKeys /etc/ssh/ca_key.pub
</code></pre></div></div>

<h3 id="️-방화벽-설정">🛡️ 방화벽 설정</h3>

<h4 id="iptables-기본-보안-설정">iptables 기본 보안 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># 강력한 iptables 보안 설정</span>

<span class="c"># 모든 기존 규칙 초기화</span>
iptables <span class="nt">-F</span>
iptables <span class="nt">-X</span>
iptables <span class="nt">-t</span> nat <span class="nt">-F</span>
iptables <span class="nt">-t</span> nat <span class="nt">-X</span>
iptables <span class="nt">-t</span> mangle <span class="nt">-F</span>
iptables <span class="nt">-t</span> mangle <span class="nt">-X</span>

<span class="c"># 기본 정책: 모든 트래픽 차단</span>
iptables <span class="nt">-P</span> INPUT DROP
iptables <span class="nt">-P</span> FORWARD DROP
iptables <span class="nt">-P</span> OUTPUT DROP

<span class="c"># Loopback 허용</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-i</span> lo <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-o</span> lo <span class="nt">-j</span> ACCEPT

<span class="c"># 기존 연결 유지</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> ESTABLISHED,RELATED <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> ESTABLISHED <span class="nt">-j</span> ACCEPT

<span class="c"># SSH 접근 허용 (브루트포스 방지)</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2222 <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> NEW <span class="nt">-m</span> recent <span class="nt">--set</span> <span class="nt">--name</span> SSH
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2222 <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> NEW <span class="nt">-m</span> recent <span class="nt">--update</span> <span class="nt">--seconds</span> 60 <span class="nt">--hitcount</span> 4 <span class="nt">--name</span> SSH <span class="nt">-j</span> DROP
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2222 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--sport</span> 2222 <span class="nt">-j</span> ACCEPT

<span class="c"># DNS 허용 (필수)</span>
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> udp <span class="nt">--dport</span> 53 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 53 <span class="nt">-j</span> ACCEPT

<span class="c"># NTP 허용</span>
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> udp <span class="nt">--dport</span> 123 <span class="nt">-j</span> ACCEPT

<span class="c"># HTTP/HTTPS 아웃바운드 허용</span>
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 80 <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 443 <span class="nt">-j</span> ACCEPT

<span class="c"># 웹 서버가 있다면 인바운드도 허용</span>
<span class="c"># iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span>
<span class="c"># iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span>

<span class="c"># ICMP 제한적 허용 (ping)</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-p</span> icmp <span class="nt">--icmp-type</span> echo-request <span class="nt">-m</span> limit <span class="nt">--limit</span> 1/second <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> icmp <span class="nt">--icmp-type</span> echo-reply <span class="nt">-j</span> ACCEPT
iptables <span class="nt">-A</span> OUTPUT <span class="nt">-p</span> icmp <span class="nt">--icmp-type</span> echo-request <span class="nt">-j</span> ACCEPT

<span class="c"># 로깅 설정 (DDoS 방지)</span>
iptables <span class="nt">-A</span> INPUT <span class="nt">-m</span> limit <span class="nt">--limit</span> 5/min <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"iptables INPUT denied: "</span> <span class="nt">--log-level</span> 7

<span class="c"># 설정 저장</span>
iptables-save <span class="o">&gt;</span> /etc/iptables/rules.v4

<span class="c"># 부팅 시 자동 로드</span>
<span class="nb">echo</span> <span class="s1">'#!/bin/bash'</span> <span class="o">&gt;</span> /etc/network/if-pre-up.d/iptables
<span class="nb">echo</span> <span class="s1">'iptables-restore &lt; /etc/iptables/rules.v4'</span> <span class="o">&gt;&gt;</span> /etc/network/if-pre-up.d/iptables
<span class="nb">chmod</span> +x /etc/network/if-pre-up.d/iptables
</code></pre></div></div>

<h4 id="ufw-uncomplicated-firewall-활용">UFW (Uncomplicated Firewall) 활용</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># UFW 초기화 및 기본 설정</span>
ufw <span class="nt">--force</span> reset
ufw default deny incoming
ufw default deny outgoing
ufw default deny forward

<span class="c"># 필수 아웃바운드 허용</span>
ufw allow out 53      <span class="c"># DNS</span>
ufw allow out 80      <span class="c"># HTTP</span>
ufw allow out 443     <span class="c"># HTTPS</span>
ufw allow out 123     <span class="c"># NTP</span>

<span class="c"># SSH 접근 허용 (포트 변경했다면)</span>
ufw allow from 192.168.1.0/24 to any port 2222

<span class="c"># 애플리케이션별 허용</span>
ufw allow <span class="s2">"Apache Full"</span>
ufw allow <span class="s2">"Nginx Full"</span>

<span class="c"># 고급 규칙</span>
ufw allow from 10.0.0.0/8 to any port 3306  <span class="c"># MySQL</span>
ufw deny from 192.168.1.100                 <span class="c"># 특정 IP 차단</span>

<span class="c"># 로깅 활성화</span>
ufw logging on

<span class="c"># 방화벽 활성화</span>
ufw <span class="nb">enable</span>

<span class="c"># 상태 확인</span>
ufw status verbose
ufw status numbered
</code></pre></div></div>

<h2 id="selinuxapparmor-보안--mandatory-access-control">SELinux/AppArmor 보안 | Mandatory Access Control</h2>

<h3 id="-selinux-구성-및-관리">🔐 SELinux 구성 및 관리</h3>

<h4 id="selinux-기본-설정">SELinux 기본 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SELinux 상태 확인</span>
sestatus
getenforce

<span class="c"># SELinux 모드 변경</span>
<span class="c"># /etc/selinux/config</span>
<span class="nv">SELINUX</span><span class="o">=</span>enforcing     <span class="c"># enforcing, permissive, disabled</span>
<span class="nv">SELINUXTYPE</span><span class="o">=</span>targeted  <span class="c"># targeted, minimum, mls</span>

<span class="c"># 임시 모드 변경</span>
setenforce 1  <span class="c"># enforcing</span>
setenforce 0  <span class="c"># permissive</span>

<span class="c"># 컨텍스트 확인</span>
<span class="nb">ls</span> <span class="nt">-lZ</span> /var/www/html/
ps auxZ | <span class="nb">grep </span>httpd
<span class="nb">id</span> <span class="nt">-Z</span>

<span class="c"># 파일 컨텍스트 복원</span>
restorecon <span class="nt">-Rv</span> /var/www/html/
restorecon <span class="nt">-Rv</span> /home/username/

<span class="c"># 컨텍스트 수동 설정</span>
<span class="nb">chcon</span> <span class="nt">-t</span> httpd_exec_t /usr/local/apache2/bin/httpd
semanage fcontext <span class="nt">-a</span> <span class="nt">-t</span> httpd_exec_t <span class="s2">"/usr/local/apache2/bin/httpd"</span>
</code></pre></div></div>

<h4 id="selinux-정책-관리">SELinux 정책 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 불린 값 확인 및 설정</span>
getsebool <span class="nt">-a</span> | <span class="nb">grep </span>httpd
setsebool <span class="nt">-P</span> httpd_can_network_connect on
setsebool <span class="nt">-P</span> httpd_can_sendmail on

<span class="c"># 포트 라벨 관리</span>
semanage port <span class="nt">-l</span> | <span class="nb">grep </span>http
semanage port <span class="nt">-a</span> <span class="nt">-t</span> http_port_t <span class="nt">-p</span> tcp 8080

<span class="c"># 사용자 매핑</span>
semanage login <span class="nt">-l</span>
semanage user <span class="nt">-l</span>
semanage login <span class="nt">-a</span> <span class="nt">-s</span> user_u regularuser

<span class="c"># 커스텀 정책 모듈 생성</span>
<span class="c"># audit.log에서 정책 생성</span>
<span class="nb">grep </span>httpd /var/log/audit/audit.log | audit2allow <span class="nt">-m</span> myhttpd
<span class="nb">grep </span>httpd /var/log/audit/audit.log | audit2allow <span class="nt">-M</span> myhttpd
semodule <span class="nt">-i</span> myhttpd.pp

<span class="c"># 정책 모듈 관리</span>
semodule <span class="nt">-l</span> | <span class="nb">grep </span>my
semodule <span class="nt">-r</span> myhttpd
</code></pre></div></div>

<h3 id="️-apparmor-프로파일-작성">🛡️ AppArmor 프로파일 작성</h3>

<h4 id="apparmor-기본-관리">AppArmor 기본 관리</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># AppArmor 상태 확인</span>
aa-status
aa-enabled

<span class="c"># 프로파일 모드 확인</span>
aa-status | <span class="nb">grep </span>profiles

<span class="c"># 프로파일 모드 변경</span>
aa-enforce /etc/apparmor.d/usr.bin.firefox
aa-complain /etc/apparmor.d/usr.bin.firefox
aa-disable /etc/apparmor.d/usr.bin.firefox

<span class="c"># 프로파일 재로드</span>
apparmor_parser <span class="nt">-r</span> /etc/apparmor.d/usr.bin.firefox
</code></pre></div></div>

<h4 id="커스텀-apparmor-프로파일-작성">커스텀 AppArmor 프로파일 작성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 새로운 애플리케이션 프로파일 생성</span>
<span class="c"># /etc/apparmor.d/usr.local.bin.myapp</span>
<span class="c">#include &lt;tunables/global&gt;</span>

/usr/local/bin/myapp <span class="o">{</span>
  <span class="c">#include &lt;abstractions/base&gt;</span>
  <span class="c">#include &lt;abstractions/nameservice&gt;</span>
  
  <span class="c"># 실행 파일</span>
  /usr/local/bin/myapp mr,
  
  <span class="c"># 라이브러리</span>
  /lib<span class="o">{</span>,32,64<span class="o">}</span>/<span class="k">**</span> mr,
  /usr/lib<span class="o">{</span>,32,64<span class="o">}</span>/<span class="k">**</span> mr,
  
  <span class="c"># 설정 파일 (읽기 전용)</span>
  /etc/myapp/<span class="k">**</span> r,
  owner /home/<span class="k">*</span>/.myapp/<span class="k">**</span> rw,
  
  <span class="c"># 데이터 디렉토리</span>
  /var/lib/myapp/<span class="k">**</span> rw,
  /var/log/myapp/<span class="k">**</span> w,
  
  <span class="c"># 네트워크 접근</span>
  network inet stream,
  network inet6 stream,
  
  <span class="c"># 프로세스 제어</span>
  capability setuid,
  capability setgid,
  
  <span class="c"># 임시 파일</span>
  /tmp/myapp.<span class="k">**</span> rw,
  owner /tmp/myapp-<span class="k">**</span> rw,
  
  <span class="c"># 거부할 접근</span>
  deny /etc/passwd r,
  deny /etc/shadow r,
  deny owner /home/<span class="k">*</span>/.ssh/<span class="k">**</span> rw,
  
  <span class="c"># 하위 프로세스 실행</span>
  /bin/dash ix,
  /usr/bin/python3 ix,
<span class="o">}</span>

<span class="c"># 프로파일 로드 및 활성화</span>
apparmor_parser <span class="nt">-r</span> /etc/apparmor.d/usr.local.bin.myapp
aa-enforce /etc/apparmor.d/usr.local.bin.myapp

<span class="c"># 프로파일 개발 모드 (학습)</span>
aa-genprof /usr/local/bin/myapp
<span class="c"># 애플리케이션 실행하며 동작 확인</span>
aa-logprof
</code></pre></div></div>

<h2 id="시스템-하드닝--system-hardening">시스템 하드닝 | System Hardening</h2>

<h3 id="-커널-보안-매개변수-조정">🔧 커널 보안 매개변수 조정</h3>

<h4 id="sysctl-보안-설정">sysctl 보안 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/sysctl.d/99-security.conf</span>
<span class="c"># 네트워크 보안</span>
net.ipv4.ip_forward <span class="o">=</span> 0
net.ipv4.conf.all.send_redirects <span class="o">=</span> 0
net.ipv4.conf.default.send_redirects <span class="o">=</span> 0
net.ipv4.conf.all.accept_redirects <span class="o">=</span> 0
net.ipv4.conf.default.accept_redirects <span class="o">=</span> 0
net.ipv4.conf.all.secure_redirects <span class="o">=</span> 0
net.ipv4.conf.default.secure_redirects <span class="o">=</span> 0
net.ipv6.conf.all.accept_redirects <span class="o">=</span> 0
net.ipv6.conf.default.accept_redirects <span class="o">=</span> 0
net.ipv4.conf.all.accept_source_route <span class="o">=</span> 0
net.ipv4.conf.default.accept_source_route <span class="o">=</span> 0
net.ipv6.conf.all.accept_source_route <span class="o">=</span> 0
net.ipv6.conf.default.accept_source_route <span class="o">=</span> 0

<span class="c"># SYN 플러드 방지</span>
net.ipv4.tcp_syncookies <span class="o">=</span> 1
net.ipv4.tcp_max_syn_backlog <span class="o">=</span> 2048
net.ipv4.tcp_synack_retries <span class="o">=</span> 2
net.ipv4.tcp_syn_retries <span class="o">=</span> 5

<span class="c"># ICMP 보안</span>
net.ipv4.icmp_echo_ignore_broadcasts <span class="o">=</span> 1
net.ipv4.icmp_ignore_bogus_error_responses <span class="o">=</span> 1
net.ipv4.icmp_echo_ignore_all <span class="o">=</span> 0

<span class="c"># IP 스푸핑 방지</span>
net.ipv4.conf.all.rp_filter <span class="o">=</span> 1
net.ipv4.conf.default.rp_filter <span class="o">=</span> 1

<span class="c"># IPv6 보안</span>
net.ipv6.conf.all.disable_ipv6 <span class="o">=</span> 1
net.ipv6.conf.default.disable_ipv6 <span class="o">=</span> 1

<span class="c"># 메모리 보안</span>
kernel.randomize_va_space <span class="o">=</span> 2
kernel.exec-shield <span class="o">=</span> 1
kernel.dmesg_restrict <span class="o">=</span> 1
kernel.kptr_restrict <span class="o">=</span> 2

<span class="c"># 프로세스 보안  </span>
fs.suid_dumpable <span class="o">=</span> 0
kernel.core_uses_pid <span class="o">=</span> 1
kernel.ctrl-alt-del <span class="o">=</span> 0

<span class="c"># 설정 적용</span>
sysctl <span class="nt">-p</span> /etc/sysctl.d/99-security.conf
</code></pre></div></div>

<h4 id="파일-시스템-보안">파일 시스템 보안</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 중요 디렉토리 마운트 옵션 강화</span>
<span class="c"># /etc/fstab</span>
/tmp        /tmp        tmpfs   defaults,nodev,nosuid,noexec    0 0
/var/tmp    /var/tmp    tmpfs   defaults,nodev,nosuid,noexec    0 0
/dev/shm    /dev/shm    tmpfs   defaults,nodev,nosuid,noexec    0 0

<span class="c"># 파일 권한 강화</span>
<span class="nb">chmod </span>700 /root
<span class="nb">chmod </span>600 /etc/ssh/sshd_config
<span class="nb">chmod </span>600 /etc/passwd-
<span class="nb">chmod </span>600 /etc/shadow
<span class="nb">chmod </span>600 /etc/gshadow
<span class="nb">chmod </span>644 /etc/group

<span class="c"># 불필요한 SUID/SGID 제거</span>
find / <span class="nt">-type</span> f <span class="se">\(</span> <span class="nt">-perm</span> <span class="nt">-4000</span> <span class="nt">-o</span> <span class="nt">-perm</span> <span class="nt">-2000</span> <span class="se">\)</span> <span class="nt">-print</span> <span class="o">&gt;</span> /tmp/suid_sgid_files
<span class="c"># 검토 후 필요없는 것들 제거</span>
<span class="nb">chmod </span>u-s /usr/bin/unnecessary-suid-program

<span class="c"># 숨겨진 파일 및 디렉토리 검사</span>
find / <span class="nt">-name</span> <span class="s2">".*"</span> <span class="nt">-type</span> f <span class="nt">-exec</span> <span class="nb">ls</span> <span class="nt">-la</span> <span class="o">{}</span> <span class="se">\;</span> 2&gt;/dev/null
find / <span class="nt">-name</span> <span class="s2">".*"</span> <span class="nt">-type</span> d <span class="nt">-exec</span> <span class="nb">ls</span> <span class="nt">-lad</span> <span class="o">{}</span> <span class="se">\;</span> 2&gt;/dev/null

<span class="c"># 대용량 파일 검사 (backdoor 가능성)</span>
find / <span class="nt">-size</span> +10M <span class="nt">-type</span> f <span class="nt">-exec</span> <span class="nb">ls</span> <span class="nt">-la</span> <span class="o">{}</span> <span class="se">\;</span> 2&gt;/dev/null

<span class="c"># 최근 수정된 파일 검사</span>
find / <span class="nt">-mtime</span> <span class="nt">-7</span> <span class="nt">-type</span> f <span class="nt">-exec</span> <span class="nb">ls</span> <span class="nt">-la</span> <span class="o">{}</span> <span class="se">\;</span> 2&gt;/dev/null
</code></pre></div></div>

<h3 id="-서비스-및-데몬-보안">🔍 서비스 및 데몬 보안</h3>

<h4 id="불필요한-서비스-제거">불필요한 서비스 제거</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 실행 중인 서비스 확인</span>
systemctl list-units <span class="nt">--type</span><span class="o">=</span>service <span class="nt">--state</span><span class="o">=</span>running
netstat <span class="nt">-tulpn</span>
ss <span class="nt">-tulpn</span>

<span class="c"># 불필요한 서비스 중지 및 비활성화</span>
systemctl stop cups
systemctl disable cups
systemctl mask cups

<span class="c"># 위험한 서비스들 (일반적으로 비활성화)</span>
<span class="nv">services_to_disable</span><span class="o">=(</span>
    <span class="s2">"telnet"</span>
    <span class="s2">"rsh"</span>
    <span class="s2">"rlogin"</span>
    <span class="s2">"tftp"</span>
    <span class="s2">"xinetd"</span>
    <span class="s2">"sendmail"</span>
    <span class="s2">"postfix"</span>
    <span class="s2">"dovecot"</span>
    <span class="s2">"cups"</span>
    <span class="s2">"avahi-daemon"</span>
    <span class="s2">"bluetooth"</span>
<span class="o">)</span>

<span class="k">for </span>service <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">services_to_disable</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    if </span>systemctl is-enabled <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Disabling </span><span class="nv">$service</span><span class="s2">..."</span>
        systemctl stop <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span>
        systemctl disable <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span>
        systemctl mask <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span>
    <span class="k">fi
done</span>

<span class="c"># 네트워크 서비스 점검</span>
lsof <span class="nt">-i</span>
netstat <span class="nt">-anp</span> | <span class="nb">grep </span>LISTEN
</code></pre></div></div>

<h4 id="애플리케이션별-보안-설정">애플리케이션별 보안 설정</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Apache 보안 설정</span>
<span class="c"># /etc/apache2/conf-available/security.conf</span>
ServerTokens Prod
ServerSignature Off
TraceEnable Off
Header always <span class="nb">set </span>X-Content-Type-Options nosniff
Header always <span class="nb">set </span>X-Frame-Options DENY
Header always <span class="nb">set </span>X-XSS-Protection <span class="s2">"1; mode=block"</span>
Header always <span class="nb">set </span>Strict-Transport-Security <span class="s2">"max-age=63072000; includeSubDomains; preload"</span>

<span class="c"># Nginx 보안 설정</span>
<span class="c"># /etc/nginx/nginx.conf</span>
server_tokens off<span class="p">;</span>
add_header X-Frame-Options DENY<span class="p">;</span>
add_header X-Content-Type-Options nosniff<span class="p">;</span>
add_header X-XSS-Protection <span class="s2">"1; mode=block"</span><span class="p">;</span>
add_header Strict-Transport-Security <span class="s2">"max-age=63072000; includeSubDomains; preload"</span><span class="p">;</span>

<span class="c"># MySQL/MariaDB 보안</span>
mysql_secure_installation

<span class="c"># PostgreSQL 보안 설정</span>
<span class="c"># /etc/postgresql/*/main/postgresql.conf</span>
ssl <span class="o">=</span> on
ssl_ciphers <span class="o">=</span> <span class="s1">'HIGH:MEDIUM:+3DES:!aNULL'</span>
ssl_prefer_server_ciphers <span class="o">=</span> on

<span class="c"># /etc/postgresql/*/main/pg_hba.conf</span>
<span class="c"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span>
<span class="nb">local   </span>all             all                                     md5
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
</code></pre></div></div>

<h2 id="침입-탐지-시스템--intrusion-detection-systems">침입 탐지 시스템 | Intrusion Detection Systems</h2>

<h3 id="-aide-advanced-intrusion-detection-environment">🚨 AIDE (Advanced Intrusion Detection Environment)</h3>

<h4 id="aide-설치-및-구성">AIDE 설치 및 구성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># AIDE 설치</span>
apt-get <span class="nb">install </span>aide aide-common

<span class="c"># 설정 파일 수정</span>
<span class="c"># /etc/aide/aide.conf</span>
<span class="nv">database</span><span class="o">=</span>file:/var/lib/aide/aide.db
<span class="nv">database_out</span><span class="o">=</span>file:/var/lib/aide/aide.db.new
<span class="nv">gzip_dbout</span><span class="o">=</span><span class="nb">yes
</span><span class="nv">report_url</span><span class="o">=</span>file:/var/log/aide/aide.log
<span class="nv">report_url</span><span class="o">=</span>stdout

<span class="c"># 규칙 정의</span>
/boot   f+p+u+g+s+b+m+c+md5+sha1
/bin    f+p+u+g+s+b+m+c+md5+sha1
/sbin   f+p+u+g+s+b+m+c+md5+sha1
/lib    f+p+u+g+s+b+m+c+md5+sha1
/opt    f+p+u+g+s+b+m+c+md5+sha1
/usr    f+p+u+g+s+b+m+c+md5+sha1
/root   f+p+u+g+s+b+m+c+md5+sha1
/etc    f+p+u+g+s+b+m+c+md5+sha1

<span class="c"># 제외할 디렉토리</span>
<span class="o">!</span>/var/log/.<span class="k">*</span>
<span class="o">!</span>/var/spool/.<span class="k">*</span>
<span class="o">!</span>/var/run/.<span class="k">*</span>
<span class="o">!</span>/var/lock/.<span class="k">*</span>
<span class="o">!</span>/proc/.<span class="k">*</span>
<span class="o">!</span>/sys/.<span class="k">*</span>
<span class="o">!</span>/dev/.<span class="k">*</span>
<span class="o">!</span>/tmp/.<span class="k">*</span>

<span class="c"># 초기 데이터베이스 생성</span>
aideinit

<span class="c"># 데이터베이스 업데이트</span>
<span class="nb">cp</span> /var/lib/aide/aide.db.new /var/lib/aide/aide.db

<span class="c"># 무결성 검사 실행</span>
aide <span class="nt">--check</span>

<span class="c"># 자동화 스크립트</span>
<span class="c">#!/bin/bash</span>
<span class="c"># /usr/local/bin/aide-check.sh</span>
<span class="nv">AIDE_LOG</span><span class="o">=</span><span class="s2">"/var/log/aide/aide-</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span><span class="s2">.log"</span>

aide <span class="nt">--check</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$AIDE_LOG</span><span class="s2">"</span> 2&gt;&amp;1
<span class="nv">EXIT_CODE</span><span class="o">=</span><span class="nv">$?</span>

<span class="k">if</span> <span class="o">[</span> <span class="nv">$EXIT_CODE</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"AIDE detected changes on </span><span class="si">$(</span><span class="nb">hostname</span><span class="si">)</span><span class="s2">"</span> | <span class="se">\</span>
    mail <span class="nt">-s</span> <span class="s2">"AIDE Alert - File Integrity Check Failed"</span> admin@company.com <span class="se">\</span>
    <span class="nt">-A</span> <span class="s2">"</span><span class="nv">$AIDE_LOG</span><span class="s2">"</span>
<span class="k">fi</span>

<span class="c"># cron 설정</span>
<span class="c"># /etc/cron.d/aide</span>
0 2 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> root /usr/local/bin/aide-check.sh
</code></pre></div></div>

<h3 id="-fail2ban-설정">🔍 Fail2Ban 설정</h3>

<h4 id="fail2ban-구성-및-커스터마이징">Fail2Ban 구성 및 커스터마이징</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Fail2Ban 설치</span>
apt-get <span class="nb">install </span>fail2ban

<span class="c"># 기본 설정 파일 복사</span>
<span class="nb">cp</span> /etc/fail2ban/jail.conf /etc/fail2ban/jail.local

<span class="c"># /etc/fail2ban/jail.local 설정</span>
<span class="o">[</span>DEFAULT]
bantime <span class="o">=</span> 3600
findtime <span class="o">=</span> 600
maxretry <span class="o">=</span> 3
backend <span class="o">=</span> systemd
banaction <span class="o">=</span> iptables-multiport
banaction_allports <span class="o">=</span> iptables-allports
ignoreip <span class="o">=</span> 127.0.0.1/8 192.168.1.0/24 10.0.0.0/8

<span class="c"># SSH 보호</span>
<span class="o">[</span>sshd]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> 2222
logpath <span class="o">=</span> /var/log/auth.log
maxretry <span class="o">=</span> 3
bantime <span class="o">=</span> 3600

<span class="c"># Apache 보호</span>
<span class="o">[</span>apache-auth]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
logpath <span class="o">=</span> /var/log/apache2/error.log

<span class="o">[</span>apache-badbots]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
logpath <span class="o">=</span> /var/log/apache2/access.log

<span class="o">[</span>apache-noscript]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> http,https
logpath <span class="o">=</span> /var/log/apache2/access.log

<span class="c"># 커스텀 필터 생성</span>
<span class="c"># /etc/fail2ban/filter.d/custom-app.conf</span>
<span class="o">[</span>Definition]
failregex <span class="o">=</span> ^.<span class="k">*</span>Failed login attempt from &lt;HOST&gt;.<span class="k">*</span><span class="err">$</span>
            ^.<span class="k">*</span>Invalid user .<span class="k">*</span> from &lt;HOST&gt;.<span class="k">*</span><span class="err">$</span>
            ^.<span class="k">*</span>authentication failure.<span class="k">*</span><span class="nv">rhost</span><span class="o">=</span>&lt;HOST&gt;.<span class="k">*</span><span class="err">$</span>
ignoreregex <span class="o">=</span>

<span class="c"># 커스텀 jail 설정</span>
<span class="c"># /etc/fail2ban/jail.local에 추가</span>
<span class="o">[</span>custom-app]
enabled <span class="o">=</span> <span class="nb">true
</span>port <span class="o">=</span> 8080
logpath <span class="o">=</span> /var/log/custom-app.log
filter <span class="o">=</span> custom-app
maxretry <span class="o">=</span> 5
bantime <span class="o">=</span> 7200

<span class="c"># Fail2Ban 관리 명령</span>
fail2ban-client status
fail2ban-client status sshd
fail2ban-client unban 192.168.1.100
fail2ban-client reload
</code></pre></div></div>

<h3 id="-ossecwazuh-설치">🔐 OSSEC/Wazuh 설치</h3>

<h4 id="wazuh-agent-설치-및-구성">Wazuh Agent 설치 및 구성</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Wazuh 저장소 추가</span>
curl <span class="nt">-s</span> https://packages.wazuh.com/key/GPG-KEY-WAZUH | apt-key add -
<span class="nb">echo</span> <span class="s2">"deb https://packages.wazuh.com/4.x/apt/ stable main"</span> <span class="o">&gt;</span> /etc/apt/sources.list.d/wazuh.list
apt-get update

<span class="c"># Wazuh Agent 설치</span>
apt-get <span class="nb">install </span>wazuh-agent

<span class="c"># 에이전트 설정</span>
<span class="c"># /var/ossec/etc/ossec.conf</span>
&lt;ossec_config&gt;
  &lt;client&gt;
    &lt;server&gt;
      &lt;address&gt;MANAGER_IP&lt;/address&gt;
      &lt;port&gt;1514&lt;/port&gt;
      &lt;protocol&gt;tcp&lt;/protocol&gt;
    &lt;/server&gt;
    &lt;config-profile&gt;linux, ubuntu, ubuntu20,&lt;/config-profile&gt;
    &lt;notify_time&gt;10&lt;/notify_time&gt;
    &lt;time-reconnect&gt;60&lt;/time-reconnect&gt;
    &lt;auto_restart&gt;yes&lt;/auto_restart&gt;
    &lt;crypto_method&gt;aes&lt;/crypto_method&gt;
  &lt;/client&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 로그 모니터링 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;localfile&gt;
    &lt;log_format&gt;syslog&lt;/log_format&gt;
    &lt;location&gt;/var/log/auth.log&lt;/location&gt;
  &lt;/localfile&gt;

  &lt;localfile&gt;
    &lt;log_format&gt;syslog&lt;/log_format&gt;
    &lt;location&gt;/var/log/syslog&lt;/location&gt;
  &lt;/localfile&gt;

  &lt;localfile&gt;
    &lt;log_format&gt;apache&lt;/log_format&gt;
    &lt;location&gt;/var/log/apache2/access.log&lt;/location&gt;
  &lt;/localfile&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 파일 무결성 모니터링 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;syscheck&gt;
    &lt;disabled&gt;no&lt;/disabled&gt;
    &lt;frequency&gt;43200&lt;/frequency&gt;
    &lt;scan_on_start&gt;yes&lt;/scan_on_start&gt;
    
    &lt;directories <span class="nv">check_all</span><span class="o">=</span><span class="s2">"yes"</span> <span class="nv">realtime</span><span class="o">=</span><span class="s2">"yes"</span><span class="o">&gt;</span>/etc&lt;/directories&gt;
    &lt;directories <span class="nv">check_all</span><span class="o">=</span><span class="s2">"yes"</span> <span class="nv">realtime</span><span class="o">=</span><span class="s2">"yes"</span><span class="o">&gt;</span>/usr/bin&lt;/directories&gt;
    &lt;directories <span class="nv">check_all</span><span class="o">=</span><span class="s2">"yes"</span> <span class="nv">realtime</span><span class="o">=</span><span class="s2">"yes"</span><span class="o">&gt;</span>/usr/sbin&lt;/directories&gt;
    &lt;directories <span class="nv">check_all</span><span class="o">=</span><span class="s2">"yes"</span> <span class="nv">realtime</span><span class="o">=</span><span class="s2">"yes"</span><span class="o">&gt;</span>/bin&lt;/directories&gt;
    &lt;directories <span class="nv">check_all</span><span class="o">=</span><span class="s2">"yes"</span> <span class="nv">realtime</span><span class="o">=</span><span class="s2">"yes"</span><span class="o">&gt;</span>/sbin&lt;/directories&gt;
    
    &lt;ignore&gt;/etc/mtab&lt;/ignore&gt;
    &lt;ignore&gt;/etc/hosts.deny&lt;/ignore&gt;
    &lt;ignore&gt;/etc/mail/statistics&lt;/ignore&gt;
    &lt;ignore&gt;/etc/random-seed&lt;/ignore&gt;
    &lt;ignore&gt;/etc/adjtime&lt;/ignore&gt;
  &lt;/syscheck&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 루트킷 탐지 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;rootcheck&gt;
    &lt;disabled&gt;no&lt;/disabled&gt;
    &lt;check_files&gt;yes&lt;/check_files&gt;
    &lt;check_trojans&gt;yes&lt;/check_trojans&gt;
    &lt;check_dev&gt;yes&lt;/check_dev&gt;
    &lt;check_sys&gt;yes&lt;/check_sys&gt;
    &lt;check_pids&gt;yes&lt;/check_pids&gt;
    &lt;check_ports&gt;yes&lt;/check_ports&gt;
    &lt;check_if&gt;yes&lt;/check_if&gt;
  &lt;/rootcheck&gt;

  &lt;<span class="o">!</span><span class="nt">--</span> 활성 응답 <span class="nt">--</span><span class="o">&gt;</span>
  &lt;active-response&gt;
    &lt;disabled&gt;no&lt;/disabled&gt;
    &lt;ca_store&gt;/var/ossec/etc/wpk_root.pem&lt;/ca_store&gt;
    &lt;ca_verification&gt;yes&lt;/ca_verification&gt;
  &lt;/active-response&gt;
&lt;/ossec_config&gt;

<span class="c"># 서비스 시작</span>
systemctl <span class="nb">enable </span>wazuh-agent
systemctl start wazuh-agent

<span class="c"># 상태 확인</span>
systemctl status wazuh-agent
/var/ossec/bin/ossec-control status
</code></pre></div></div>

<h2 id="컨테이너-보안--container-security">컨테이너 보안 | Container Security</h2>

<h3 id="-docker-보안-설정">🐳 Docker 보안 설정</h3>

<h4 id="docker-데몬-보안-강화">Docker 데몬 보안 강화</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Docker 데몬 설정</span>
<span class="c"># /etc/docker/daemon.json</span>
<span class="o">{</span>
    <span class="s2">"icc"</span>: <span class="nb">false</span>,
    <span class="s2">"userns-remap"</span>: <span class="s2">"default"</span>,
    <span class="s2">"no-new-privileges"</span>: <span class="nb">true</span>,
    <span class="s2">"seccomp-profile"</span>: <span class="s2">"/etc/docker/seccomp.json"</span>,
    <span class="s2">"selinux-enabled"</span>: <span class="nb">true</span>,
    <span class="s2">"disable-legacy-registry"</span>: <span class="nb">true</span>,
    <span class="s2">"live-restore"</span>: <span class="nb">true</span>,
    <span class="s2">"userland-proxy"</span>: <span class="nb">false</span>,
    <span class="s2">"experimental"</span>: <span class="nb">false</span>,
    <span class="s2">"metrics-addr"</span>: <span class="s2">"127.0.0.1:9323"</span>,
    <span class="s2">"log-driver"</span>: <span class="s2">"json-file"</span>,
    <span class="s2">"log-opts"</span>: <span class="o">{</span>
        <span class="s2">"max-size"</span>: <span class="s2">"10m"</span>,
        <span class="s2">"max-file"</span>: <span class="s2">"3"</span>
    <span class="o">}</span>,
    <span class="s2">"storage-driver"</span>: <span class="s2">"overlay2"</span>,
    <span class="s2">"default-ulimits"</span>: <span class="o">{</span>
        <span class="s2">"nofile"</span>: <span class="o">{</span>
            <span class="s2">"name"</span>: <span class="s2">"nofile"</span>,
            <span class="s2">"hard"</span>: 64000,
            <span class="s2">"soft"</span>: 64000
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c"># 시스템 재시작</span>
systemctl restart docker

<span class="c"># 보안 컨테이너 실행 예시</span>
docker run <span class="nt">-d</span> <span class="se">\</span>
  <span class="nt">--name</span> secure-app <span class="se">\</span>
  <span class="nt">--read-only</span> <span class="se">\</span>
  <span class="nt">--tmpfs</span> /tmp <span class="se">\</span>
  <span class="nt">--tmpfs</span> /var/run <span class="se">\</span>
  <span class="nt">--tmpfs</span> /var/lock <span class="se">\</span>
  <span class="nt">--user</span> 1000:1000 <span class="se">\</span>
  <span class="nt">--cap-drop</span> ALL <span class="se">\</span>
  <span class="nt">--cap-add</span> NET_BIND_SERVICE <span class="se">\</span>
  <span class="nt">--security-opt</span> no-new-privileges:true <span class="se">\</span>
  <span class="nt">--security-opt</span> apparmor:docker-default <span class="se">\</span>
  <span class="nt">--memory</span> 512m <span class="se">\</span>
  <span class="nt">--cpus</span><span class="o">=</span><span class="s2">"0.5"</span> <span class="se">\</span>
  <span class="nt">--pids-limit</span> 100 <span class="se">\</span>
  <span class="nt">--restart</span> unless-stopped <span class="se">\</span>
  nginx:alpine
</code></pre></div></div>

<h4 id="dockerfile-보안-모범-사례">Dockerfile 보안 모범 사례</h4>
<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 보안 강화 Dockerfile 예시</span>
<span class="k">FROM</span><span class="s"> alpine:3.18</span>

<span class="c"># 보안 업데이트 적용</span>
<span class="k">RUN </span>apk update <span class="o">&amp;&amp;</span> apk upgrade <span class="o">&amp;&amp;</span> <span class="se">\
</span>    apk add <span class="nt">--no-cache</span> tini <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">rm</span> <span class="nt">-rf</span> /var/cache/apk/<span class="k">*</span>

<span class="c"># 비특권 사용자 생성</span>
<span class="k">RUN </span>addgroup <span class="nt">-g</span> 1000 <span class="nt">-S</span> appgroup <span class="o">&amp;&amp;</span> <span class="se">\
</span>    adduser <span class="nt">-u</span> 1000 <span class="nt">-S</span> appuser <span class="nt">-G</span> appgroup

<span class="c"># 애플리케이션 디렉토리 생성 및 권한 설정</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --chown=appuser:appgroup . .</span>

<span class="c"># 실행 파일 권한만 부여</span>
<span class="k">RUN </span><span class="nb">chmod </span>755 /app/entrypoint.sh <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">chmod </span>644 /app/<span class="k">*</span>.conf

<span class="c"># 비특권 사용자로 전환</span>
<span class="k">USER</span><span class="s"> appuser:appgroup</span>

<span class="c"># 시그널 처리를 위한 tini 사용</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["/sbin/tini", "--"]</span>
<span class="k">CMD</span><span class="s"> ["./entrypoint.sh"]</span>

<span class="c"># 불필요한 네트워크 포트 노출 금지</span>
<span class="c"># EXPOSE 80 (필요한 경우만)</span>

<span class="c"># 헬스체크 추가</span>
<span class="k">HEALTHCHECK</span><span class="s"> --interval=30s --timeout=3s --start-period=5s --retries=3 \</span>
  CMD curl -f http://localhost:8080/health || exit 1
</code></pre></div></div>

<h3 id="-kubernetes-보안">⚓ Kubernetes 보안</h3>

<h4 id="pod-security-standards-적용">Pod Security Standards 적용</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Pod Security Policy (deprecated, use Pod Security Standards)</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Namespace</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">secure-namespace</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">pod-security.kubernetes.io/enforce</span><span class="pi">:</span> <span class="s">restricted</span>
    <span class="na">pod-security.kubernetes.io/audit</span><span class="pi">:</span> <span class="s">restricted</span>
    <span class="na">pod-security.kubernetes.io/warn</span><span class="pi">:</span> <span class="s">restricted</span>

<span class="nn">---</span>
<span class="c1"># 보안 강화 Pod 예시</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">secure-pod</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">secure-namespace</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">securityContext</span><span class="pi">:</span>
    <span class="na">runAsNonRoot</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">runAsUser</span><span class="pi">:</span> <span class="m">1000</span>
    <span class="na">runAsGroup</span><span class="pi">:</span> <span class="m">1000</span>
    <span class="na">fsGroup</span><span class="pi">:</span> <span class="m">1000</span>
    <span class="na">seccompProfile</span><span class="pi">:</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">RuntimeDefault</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">app</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:alpine</span>
    <span class="na">securityContext</span><span class="pi">:</span>
      <span class="na">allowPrivilegeEscalation</span><span class="pi">:</span> <span class="kc">false</span>
      <span class="na">readOnlyRootFilesystem</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">runAsNonRoot</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">runAsUser</span><span class="pi">:</span> <span class="m">1000</span>
      <span class="na">capabilities</span><span class="pi">:</span>
        <span class="na">drop</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">ALL</span>
        <span class="na">add</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">NET_BIND_SERVICE</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="na">limits</span><span class="pi">:</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">256Mi"</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">200m"</span>
      <span class="na">requests</span><span class="pi">:</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">100m"</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">tmp-volume</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/tmp</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">var-cache-nginx</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/cache/nginx</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">var-run</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/run</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">tmp-volume</span>
    <span class="na">emptyDir</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">var-cache-nginx</span>
    <span class="na">emptyDir</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">var-run</span>
    <span class="na">emptyDir</span><span class="pi">:</span> <span class="pi">{}</span>

<span class="nn">---</span>
<span class="c1"># Network Policy</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">NetworkPolicy</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default-deny-all</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">secure-namespace</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">podSelector</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">policyTypes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Ingress</span>
  <span class="pi">-</span> <span class="s">Egress</span>

<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">NetworkPolicy</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">allow-web-traffic</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">secure-namespace</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">podSelector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">web</span>
  <span class="na">policyTypes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Ingress</span>
  <span class="pi">-</span> <span class="s">Egress</span>
  <span class="na">ingress</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">from</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">namespaceSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">ingress-system</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">egress</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">to</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">podSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">app</span><span class="pi">:</span> <span class="s">database</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">5432</span>
  <span class="pi">-</span> <span class="na">to</span><span class="pi">:</span> <span class="pi">{}</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">UDP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">53</span>
</code></pre></div></div>

<h2 id="컴플라이언스와-감사--compliance-and-auditing">컴플라이언스와 감사 | Compliance and Auditing</h2>

<h3 id="-cis-benchmark-적용">📋 CIS Benchmark 적용</h3>

<h4 id="cis-controls-자동화-스크립트">CIS Controls 자동화 스크립트</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># CIS Ubuntu 20.04 LTS Benchmark 자동 적용 스크립트</span>

<span class="nb">echo</span> <span class="s2">"CIS Benchmark 자동 적용을 시작합니다..."</span>

<span class="c"># 1. 파일 시스템 구성</span>
<span class="nb">echo</span> <span class="s2">"1. 파일 시스템 보안 설정..."</span>

<span class="c"># 1.1 임시 파일 시스템 보안</span>
<span class="k">if</span> <span class="o">!</span> <span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"/tmp.*nodev"</span> /etc/fstab<span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"/tmp /tmp tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0"</span> <span class="o">&gt;&gt;</span> /etc/fstab
<span class="k">fi</span>

<span class="c"># 1.2 불필요한 파일 시스템 비활성화</span>
<span class="nb">cat</span> <span class="o">&gt;&gt;</span> /etc/modprobe.d/blacklist-rare-filesystems.conf <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
install cramfs /bin/true
install freevxfs /bin/true
install jffs2 /bin/true
install hfs /bin/true
install hfsplus /bin/true
install squashfs /bin/true
install udf /bin/true
install fat /bin/true
install vfat /bin/true
install usb-storage /bin/true
</span><span class="no">EOF

</span><span class="c"># 2. 서비스 설정</span>
<span class="nb">echo</span> <span class="s2">"2. 서비스 보안 설정..."</span>

<span class="c"># 2.1 시간 동기화</span>
systemctl <span class="nb">enable </span>ntp
systemctl start ntp

<span class="c"># 2.2 불필요한 서비스 비활성화</span>
<span class="nv">services_to_disable</span><span class="o">=(</span>
    <span class="s2">"autofs"</span>
    <span class="s2">"avahi-daemon"</span> 
    <span class="s2">"cups"</span>
    <span class="s2">"dhcpd"</span>
    <span class="s2">"slapd"</span>
    <span class="s2">"nfs"</span>
    <span class="s2">"rpcbind"</span>
    <span class="s2">"bind9"</span>
    <span class="s2">"vsftpd"</span>
    <span class="s2">"apache2"</span>
    <span class="s2">"dovecot"</span>
    <span class="s2">"smbd"</span>
    <span class="s2">"squid"</span>
    <span class="s2">"snmpd"</span>
    <span class="s2">"rsync"</span>
<span class="o">)</span>

<span class="k">for </span>service <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">services_to_disable</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    if </span>systemctl is-enabled <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
        </span>systemctl disable <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span>
        systemctl stop <span class="s2">"</span><span class="nv">$service</span><span class="s2">"</span>
    <span class="k">fi
done</span>

<span class="c"># 3. 네트워크 매개변수 설정</span>
<span class="nb">echo</span> <span class="s2">"3. 네트워크 보안 설정..."</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/sysctl.d/99-cis.conf <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
net.ipv4.ip_forward = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.disable_ipv6 = 1
</span><span class="no">EOF

</span>sysctl <span class="nt">-p</span> /etc/sysctl.d/99-cis.conf

<span class="c"># 4. 로깅 및 감사 설정</span>
<span class="nb">echo</span> <span class="s2">"4. 로깅 및 감사 설정..."</span>

<span class="c"># 4.1 auditd 설치 및 구성</span>
apt-get <span class="nb">install</span> <span class="nt">-y</span> auditd audispd-plugins

<span class="nb">cat</span> <span class="o">&gt;</span> /etc/audit/rules.d/cis.rules <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
# 시간 변경 감사
-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
-a always,exit -F arch=b64 -S clock_settime -k time-change
-a always,exit -F arch=b32 -S clock_settime -k time-change
-w /etc/localtime -p wa -k time-change

# 사용자/그룹 정보 감사
-w /etc/group -p wa -k identity
-w /etc/passwd -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity

# 네트워크 환경 감사
-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
-w /etc/issue -p wa -k system-locale
-w /etc/issue.net -p wa -k system-locale
-w /etc/hosts -p wa -k system-locale
-w /etc/network -p wa -k system-locale

# MAC 정책 변경 감사
-w /etc/selinux/ -p wa -k MAC-policy
-w /usr/share/selinux/ -p wa -k MAC-policy

# 로그인/로그아웃 감사
-w /var/log/faillog -p wa -k logins
-w /var/log/lastlog -p wa -k logins
-w /var/log/tallylog -p wa -k logins

# 세션 시작 정보 감사
-w /var/run/utmp -p wa -k session
-w /var/log/wtmp -p wa -k logins
-w /var/log/btmp -p wa -k logins

# 권한 변경 감사
-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod

# 관리자 액세스 감사
-w /etc/sudoers -p wa -k scope
-w /etc/sudoers.d/ -p wa -k scope

# 커널 모듈 로딩/언로딩 감사
-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
-a always,exit -F arch=b64 -S init_module -S delete_module -k modules

# 파일 삭제 감사
-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=1000 -F auid!=4294967295 -k delete
-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=1000 -F auid!=4294967295 -k delete

# 설정 불변성
-e 2
</span><span class="no">EOF

</span>systemctl <span class="nb">enable </span>auditd
systemctl start auditd

<span class="c"># 5. 액세스 제어 설정</span>
<span class="nb">echo</span> <span class="s2">"5. 액세스 제어 설정..."</span>

<span class="c"># 5.1 cron 접근 제한</span>
<span class="nb">echo</span> <span class="s2">"root"</span> <span class="o">&gt;</span> /etc/cron.allow
<span class="nb">chmod </span>600 /etc/cron.allow
<span class="nb">rm</span> <span class="nt">-f</span> /etc/cron.deny

<span class="c"># 5.2 SSH 보안 강화 (이미 앞에서 다룸)</span>
<span class="c"># 5.3 PAM 설정 강화 (이미 앞에서 다룸)</span>

<span class="c"># 6. 시스템 유지보수</span>
<span class="nb">echo</span> <span class="s2">"6. 시스템 유지보수 설정..."</span>

<span class="c"># 6.1 파일 권한 점검</span>
find /etc <span class="nt">-type</span> f <span class="nt">-perm</span> /g+w,o+w <span class="nt">-exec</span> <span class="nb">chmod </span>go-w <span class="o">{}</span> <span class="se">\;</span>

<span class="c"># 6.2 SUID/SGID 점검 스크립트 생성</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /usr/local/bin/check-suid-sgid.sh <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/bash
find / </span><span class="se">\(</span><span class="sh"> -perm -4000 -o -perm -2000 </span><span class="se">\)</span><span class="sh"> -type f -exec ls -ld {} </span><span class="se">\;</span><span class="sh"> 2&gt;/dev/null | </span><span class="se">\</span><span class="sh">
while read line; do
    echo "</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="sh">: </span><span class="nv">$line</span><span class="sh">" &gt;&gt; /var/log/suid-sgid.log
done
</span><span class="no">EOF

</span><span class="nb">chmod</span> +x /usr/local/bin/check-suid-sgid.sh

<span class="c"># 6.3 정기 보안 점검 cron 설정</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/cron.daily/security-check <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/bash
/usr/local/bin/check-suid-sgid.sh
/usr/bin/aide --check 2&gt;&amp;1 | logger -t aide
</span><span class="no">EOF

</span><span class="nb">chmod</span> +x /etc/cron.daily/security-check

<span class="nb">echo</span> <span class="s2">"CIS Benchmark 적용 완료!"</span>
<span class="nb">echo</span> <span class="s2">"시스템을 재부팅하여 모든 설정을 적용하세요."</span>
</code></pre></div></div>

<h3 id="-보안-모니터링-대시보드">📊 보안 모니터링 대시보드</h3>

<h4 id="prometheus--grafana-보안-메트릭">Prometheus + Grafana 보안 메트릭</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># prometheus-rules.yml</span>
<span class="na">groups</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">security_rules</span>
  <span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">HighFailedLoginRate</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">rate(node_auth_failed_total[5m]) &gt; </span><span class="m">0.1</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">2m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s2">"</span><span class="s">High</span><span class="nv"> </span><span class="s">failed</span><span class="nv"> </span><span class="s">login</span><span class="nv"> </span><span class="s">rate</span><span class="nv"> </span><span class="s">detected"</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">$labels.instance</span><span class="nv"> </span><span class="s">}}</span><span class="nv"> </span><span class="s">has</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">high</span><span class="nv"> </span><span class="s">failed</span><span class="nv"> </span><span class="s">login</span><span class="nv"> </span><span class="s">rate</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">{{</span><span class="nv"> </span><span class="s">$value</span><span class="nv"> </span><span class="s">}}</span><span class="nv"> </span><span class="s">per</span><span class="nv"> </span><span class="s">second"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">RootLoginDetected</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">increase(node_auth_success_total{user="root"}[1m]) &gt; </span><span class="m">0</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">0m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">critical</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Root</span><span class="nv"> </span><span class="s">login</span><span class="nv"> </span><span class="s">detected"</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Root</span><span class="nv"> </span><span class="s">user</span><span class="nv"> </span><span class="s">login</span><span class="nv"> </span><span class="s">detected</span><span class="nv"> </span><span class="s">on</span><span class="nv"> </span><span class="s">{{</span><span class="nv"> </span><span class="s">$labels.instance</span><span class="nv"> </span><span class="s">}}"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">SudoCommandExecuted</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">increase(node_sudo_commands_total[1m]) &gt; </span><span class="m">0</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">0m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">info</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Sudo</span><span class="nv"> </span><span class="s">command</span><span class="nv"> </span><span class="s">executed"</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Sudo</span><span class="nv"> </span><span class="s">command</span><span class="nv"> </span><span class="s">executed</span><span class="nv"> </span><span class="s">on</span><span class="nv"> </span><span class="s">{{</span><span class="nv"> </span><span class="s">$labels.instance</span><span class="nv"> </span><span class="s">}}"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">FileSystemModification</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">rate(node_filesystem_files_free[5m]) &lt; -0.1</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">5m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Rapid</span><span class="nv"> </span><span class="s">file</span><span class="nv"> </span><span class="s">system</span><span class="nv"> </span><span class="s">changes</span><span class="nv"> </span><span class="s">detected"</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Rapid</span><span class="nv"> </span><span class="s">file</span><span class="nv"> </span><span class="s">system</span><span class="nv"> </span><span class="s">changes</span><span class="nv"> </span><span class="s">on</span><span class="nv"> </span><span class="s">{{</span><span class="nv"> </span><span class="s">$labels.instance</span><span class="nv"> </span><span class="s">}}</span><span class="nv"> </span><span class="s">at</span><span class="nv"> </span><span class="s">{{</span><span class="nv"> </span><span class="s">$labels.mountpoint</span><span class="nv"> </span><span class="s">}}"</span>
</code></pre></div></div>

<h4 id="보안-로그-분석-스크립트">보안 로그 분석 스크립트</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span><span class="p">,</span> <span class="n">Counter</span>
<span class="kn">import</span> <span class="n">argparse</span>

<span class="k">class</span> <span class="nc">SecurityLogAnalyzer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">failed_logins</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">successful_logins</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sudo_commands</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">suspicious_activities</span> <span class="o">=</span> <span class="p">[]</span>
        
    <span class="k">def</span> <span class="nf">parse_auth_log</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">log_file</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">인증 로그 파싱</span><span class="sh">"""</span>
        <span class="n">patterns</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">failed_login</span><span class="sh">'</span><span class="p">:</span> <span class="sa">r</span><span class="sh">'</span><span class="s">(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Failed password for (\w+) from (\d+\.\d+\.\d+\.\d+)</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">successful_login</span><span class="sh">'</span><span class="p">:</span> <span class="sa">r</span><span class="sh">'</span><span class="s">(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Accepted password for (\w+) from (\d+\.\d+\.\d+\.\d+)</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">sudo_command</span><span class="sh">'</span><span class="p">:</span> <span class="sa">r</span><span class="sh">'</span><span class="s">(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*sudo.*USER=(\w+).*COMMAND=(.*)</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">invalid_user</span><span class="sh">'</span><span class="p">:</span> <span class="sa">r</span><span class="sh">'</span><span class="s">(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Invalid user (\w+) from (\d+\.\d+\.\d+\.\d+)</span><span class="sh">'</span>
        <span class="p">}</span>
        
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">log_file</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
                <span class="c1"># 실패한 로그인 시도
</span>                <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">patterns</span><span class="p">[</span><span class="sh">'</span><span class="s">failed_login</span><span class="sh">'</span><span class="p">],</span> <span class="n">line</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
                    <span class="n">timestamp</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">ip</span> <span class="o">=</span> <span class="k">match</span><span class="p">.</span><span class="nf">groups</span><span class="p">()</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">failed_logins</span><span class="p">[</span><span class="n">ip</span><span class="p">].</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">timestamp</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">ip</span>
                    <span class="p">})</span>
                
                <span class="c1"># 성공한 로그인
</span>                <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">patterns</span><span class="p">[</span><span class="sh">'</span><span class="s">successful_login</span><span class="sh">'</span><span class="p">],</span> <span class="n">line</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
                    <span class="n">timestamp</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">ip</span> <span class="o">=</span> <span class="k">match</span><span class="p">.</span><span class="nf">groups</span><span class="p">()</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">successful_logins</span><span class="p">[</span><span class="n">ip</span><span class="p">].</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">timestamp</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">ip</span>
                    <span class="p">})</span>
                
                <span class="c1"># sudo 명령
</span>                <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">patterns</span><span class="p">[</span><span class="sh">'</span><span class="s">sudo_command</span><span class="sh">'</span><span class="p">],</span> <span class="n">line</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
                    <span class="n">timestamp</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">command</span> <span class="o">=</span> <span class="k">match</span><span class="p">.</span><span class="nf">groups</span><span class="p">()</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">sudo_commands</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">timestamp</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">command</span><span class="sh">'</span><span class="p">:</span> <span class="n">command</span>
                    <span class="p">})</span>
                
                <span class="c1"># 잘못된 사용자
</span>                <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">patterns</span><span class="p">[</span><span class="sh">'</span><span class="s">invalid_user</span><span class="sh">'</span><span class="p">],</span> <span class="n">line</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
                    <span class="n">timestamp</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">ip</span> <span class="o">=</span> <span class="k">match</span><span class="p">.</span><span class="nf">groups</span><span class="p">()</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">suspicious_activities</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">invalid_user</span><span class="sh">'</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">timestamp</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">ip</span>
                    <span class="p">})</span>
    
    <span class="k">def</span> <span class="nf">detect_brute_force</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">브루트포스 공격 탐지</span><span class="sh">"""</span>
        <span class="n">brute_force_ips</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">ip</span><span class="p">,</span> <span class="n">attempts</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">failed_logins</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">attempts</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="p">:</span>
                <span class="n">brute_force_ips</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">'</span><span class="s">ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">ip</span><span class="p">,</span>
                    <span class="sh">'</span><span class="s">attempts</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">attempts</span><span class="p">),</span>
                    <span class="sh">'</span><span class="s">users_targeted</span><span class="sh">'</span><span class="p">:</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">([</span><span class="n">attempt</span><span class="p">[</span><span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">]</span> <span class="k">for</span> <span class="n">attempt</span> <span class="ow">in</span> <span class="n">attempts</span><span class="p">])),</span>
                    <span class="sh">'</span><span class="s">first_attempt</span><span class="sh">'</span><span class="p">:</span> <span class="n">attempts</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">],</span>
                    <span class="sh">'</span><span class="s">last_attempt</span><span class="sh">'</span><span class="p">:</span> <span class="n">attempts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">]</span>
                <span class="p">})</span>
        
        <span class="k">return</span> <span class="n">brute_force_ips</span>
    
    <span class="k">def</span> <span class="nf">detect_privilege_escalation</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">권한 상승 탐지</span><span class="sh">"""</span>
        <span class="n">privilege_escalations</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="n">dangerous_commands</span> <span class="o">=</span> <span class="p">[</span>
            <span class="sh">'</span><span class="s">passwd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">useradd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">usermod</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">userdel</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">chmod 777</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">chmod 4755</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">chown root</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">systemctl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">service</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">crontab -e</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">/bin/bash</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">/bin/sh</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">su -</span><span class="sh">'</span>
        <span class="p">]</span>
        
        <span class="k">for</span> <span class="n">sudo_cmd</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">sudo_commands</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">dangerous_cmd</span> <span class="ow">in</span> <span class="n">dangerous_commands</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">dangerous_cmd</span> <span class="ow">in</span> <span class="n">sudo_cmd</span><span class="p">[</span><span class="sh">'</span><span class="s">command</span><span class="sh">'</span><span class="p">]:</span>
                    <span class="n">privilege_escalations</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">sudo_cmd</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">],</span>
                        <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="n">sudo_cmd</span><span class="p">[</span><span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">],</span>
                        <span class="sh">'</span><span class="s">command</span><span class="sh">'</span><span class="p">:</span> <span class="n">sudo_cmd</span><span class="p">[</span><span class="sh">'</span><span class="s">command</span><span class="sh">'</span><span class="p">],</span>
                        <span class="sh">'</span><span class="s">risk_level</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">high</span><span class="sh">'</span> <span class="k">if</span> <span class="n">dangerous_cmd</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">passwd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">useradd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">/bin/bash</span><span class="sh">'</span><span class="p">]</span> <span class="k">else</span> <span class="sh">'</span><span class="s">medium</span><span class="sh">'</span>
                    <span class="p">})</span>
                    <span class="k">break</span>
        
        <span class="k">return</span> <span class="n">privilege_escalations</span>
    
    <span class="k">def</span> <span class="nf">analyze_login_patterns</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">로그인 패턴 분석</span><span class="sh">"""</span>
        <span class="n">patterns</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">geographic_anomalies</span><span class="sh">'</span><span class="p">:</span> <span class="p">[],</span>
            <span class="sh">'</span><span class="s">time_anomalies</span><span class="sh">'</span><span class="p">:</span> <span class="p">[],</span>
            <span class="sh">'</span><span class="s">user_anomalies</span><span class="sh">'</span><span class="p">:</span> <span class="p">[]</span>
        <span class="p">}</span>
        
        <span class="c1"># 사용자별 로그인 빈도 분석
</span>        <span class="n">user_login_count</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">ip</span><span class="p">,</span> <span class="n">logins</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">successful_logins</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">for</span> <span class="n">login</span> <span class="ow">in</span> <span class="n">logins</span><span class="p">:</span>
                <span class="n">user_login_count</span><span class="p">[</span><span class="n">login</span><span class="p">[</span><span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="c1"># 비정상적으로 많은 로그인
</span>        <span class="n">avg_logins</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">user_login_count</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">user_login_count</span><span class="p">)</span> <span class="k">if</span> <span class="n">user_login_count</span> <span class="k">else</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">user</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">user_login_count</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="n">avg_logins</span> <span class="o">*</span> <span class="mi">3</span><span class="p">:</span>  <span class="c1"># 평균의 3배 이상
</span>                <span class="n">patterns</span><span class="p">[</span><span class="sh">'</span><span class="s">user_anomalies</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span>
                    <span class="sh">'</span><span class="s">login_count</span><span class="sh">'</span><span class="p">:</span> <span class="n">count</span><span class="p">,</span>
                    <span class="sh">'</span><span class="s">anomaly_type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">excessive_logins</span><span class="sh">'</span>
                <span class="p">})</span>
        
        <span class="k">return</span> <span class="n">patterns</span>
    
    <span class="k">def</span> <span class="nf">generate_report</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">보안 분석 리포트 생성</span><span class="sh">"""</span>
        <span class="n">report</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">analysis_date</span><span class="sh">'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">'</span><span class="s">total_failed_logins</span><span class="sh">'</span><span class="p">:</span> <span class="nf">sum</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">attempts</span><span class="p">)</span> <span class="k">for</span> <span class="n">attempts</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">failed_logins</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span>
                <span class="sh">'</span><span class="s">total_successful_logins</span><span class="sh">'</span><span class="p">:</span> <span class="nf">sum</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">logins</span><span class="p">)</span> <span class="k">for</span> <span class="n">logins</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">successful_logins</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span>
                <span class="sh">'</span><span class="s">total_sudo_commands</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sudo_commands</span><span class="p">),</span>
                <span class="sh">'</span><span class="s">suspicious_activities</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">suspicious_activities</span><span class="p">)</span>
            <span class="p">},</span>
            <span class="sh">'</span><span class="s">brute_force_attacks</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">detect_brute_force</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">privilege_escalations</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">detect_privilege_escalation</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">login_patterns</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">analyze_login_patterns</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">suspicious_activities</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">suspicious_activities</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">recommendations</span><span class="sh">'</span><span class="p">:</span> <span class="p">[]</span>
        <span class="p">}</span>
        
        <span class="c1"># 추천사항 생성
</span>        <span class="k">if</span> <span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">brute_force_attacks</span><span class="sh">'</span><span class="p">]:</span>
            <span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">recommendations</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">브루트포스 공격이 탐지되었습니다. fail2ban 설정을 검토하고 IP 차단을 고려하세요.</span><span class="sh">"</span>
            <span class="p">)</span>
        
        <span class="k">if</span> <span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">privilege_escalations</span><span class="sh">'</span><span class="p">]:</span>
            <span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">recommendations</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">권한 상승 활동이 탐지되었습니다. sudo 사용을 검토하고 필요시 권한을 제한하세요.</span><span class="sh">"</span>
            <span class="p">)</span>
        
        <span class="k">if</span> <span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">total_failed_logins</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
            <span class="n">report</span><span class="p">[</span><span class="sh">'</span><span class="s">recommendations</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">과도한 실패 로그인 시도가 있습니다. 패스워드 정책을 강화하세요.</span><span class="sh">"</span>
            <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">report</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">Security Log Analyzer</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--log-file</span><span class="sh">'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">'</span><span class="s">/var/log/auth.log</span><span class="sh">'</span><span class="p">,</span> 
                       <span class="nb">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Path to authentication log file</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--output</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">-o</span><span class="sh">'</span><span class="p">,</span> <span class="nb">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Output file for JSON report</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--threshold</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
                       <span class="nb">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Brute force detection threshold</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>
    
    <span class="n">analyzer</span> <span class="o">=</span> <span class="nc">SecurityLogAnalyzer</span><span class="p">()</span>
    <span class="n">analyzer</span><span class="p">.</span><span class="nf">parse_auth_log</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">log_file</span><span class="p">)</span>
    
    <span class="n">report</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">generate_report</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">output</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">output</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">report</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">report</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="마무리와-다음-단계">마무리와 다음 단계</h2>

<p>이 종합적인 리눅스 보안 가이드를 통해 다음과 같은 내용을 다뤘습니다:</p>

<h3 id="-다룬-주요-내용">✅ 다룬 주요 내용</h3>
<ul>
  <li><strong>기초 보안</strong>: 사용자 계정, SSH, 방화벽 설정</li>
  <li><strong>고급 보안</strong>: SELinux/AppArmor, 시스템 하드닝</li>
  <li><strong>침입 탐지</strong>: AIDE, Fail2Ban, Wazuh 구축</li>
  <li><strong>컨테이너 보안</strong>: Docker/Kubernetes 보안 설정</li>
  <li><strong>컴플라이언스</strong>: CIS Benchmark 적용</li>
  <li><strong>모니터링</strong>: 보안 로그 분석 및 대시보드</li>
</ul>

<h3 id="-다음-단계-권장사항">🚀 다음 단계 권장사항</h3>

<ol>
  <li><strong>정기적인 보안 점검</strong> - 월간 보안 체크리스트 운영</li>
  <li><strong>침투 테스트</strong> - 분기별 모의 해킹 테스트 수행</li>
  <li><strong>보안 교육</strong> - 팀원 대상 보안 인식 교육</li>
  <li><strong>인시던트 대응</strong> - 보안 사고 대응 절차 수립</li>
  <li><strong>백업 및 복구</strong> - 정기적인 백업 및 복구 테스트</li>
</ol>

<h3 id="-추가-학습-자료">📚 추가 학습 자료</h3>
<ul>
  <li><strong>인증</strong>: CompTIA Security+, CISSP, CEH</li>
  <li><strong>도구</strong>: Metasploit, Nessus, OpenVAS</li>
  <li><strong>표준</strong>: NIST Cybersecurity Framework, ISO 27001</li>
</ul>

<p>리눅스 보안은 지속적인 과정입니다. 항상 최신 위협 동향을 파악하고 보안 설정을 업데이트하세요! 🔒🛡️</p>]]></content><author><name>DevOps Engineer</name></author><category term="Security" /><category term="Linux" /><category term="linux-security" /><category term="firewall" /><category term="selinux" /><category term="hardening" /><category term="intrusion-detection" /><category term="container-security" /><category term="compliance" /><summary type="html"><![CDATA[리눅스 시스템의 보안을 체계적으로 구축하고 관리하는 완전한 가이드입니다. 기초부터 고급 보안 기법까지 실무에 바로 적용할 수 있는 내용으로 구성했습니다. 리눅스 보안 기초 | Linux Security Fundamentals 🔐 사용자 계정 보안 패스워드 정책 강화 # 패스워드 복잡성 정책 설정 # /etc/pam.d/common-password (Ubuntu/Debian) password requisite pam_pwquality.so retry=3 minlen=12 minclass=3 maxrepeat=2 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1 # /etc/security/pwquality.conf minlen = 12 minclass = 3 maxrepeat = 2 maxclasssrepeat = 4 ucredit = -1 # 최소 대문자 1개 lcredit = -1 # 최소 소문자 1개 dcredit = -1 # 최소 숫자 1개 ocredit = -1 # 최소 특수문자 1개 difok = 3 # 이전 패스워드와 3글자 이상 달라야 함 # 패스워드 에이징 정책 # /etc/login.defs PASS_MAX_DAYS 90 # 최대 유효기간 PASS_MIN_DAYS 1 # 최소 변경 주기 PASS_MIN_LEN 12 # 최소 길이 PASS_WARN_AGE 7 # 만료 경고 기간 # 기존 사용자에게 정책 적용 chage -M 90 -m 1 -W 7 username # 계정 잠금 정책 (실패 시도 제한) # /etc/pam.d/common-auth auth required pam_tally2.so deny=5 unlock_time=1800 onerr=fail # 잠긴 계정 확인 및 해제 pam_tally2 --user username pam_tally2 --user username --reset 루트 계정 보안 # 루트 직접 로그인 차단 # /etc/ssh/sshd_config PermitRootLogin no PasswordAuthentication no PubkeyAuthentication yes # 콘솔 루트 로그인 제한 # /etc/securetty (허용할 터미널만 남기기) console tty1 # sudo 권한 세밀하게 제어 # /etc/sudoers # 특정 명령만 허용 webadmin ALL=(ALL) /usr/sbin/service apache2 *, /usr/sbin/service nginx * # 패스워드 없이 특정 명령 실행 backup ALL=(ALL) NOPASSWD: /usr/bin/rsync, /bin/tar # sudo 사용 로그 강화 # /etc/rsyslog.conf 또는 /etc/rsyslog.d/50-default.conf local2.* /var/log/sudo.log # /etc/sudoers에 추가 Defaults logfile="/var/log/sudo.log" Defaults log_input, log_output Defaults iolog_dir="/var/log/sudo-io" 🔒 SSH 보안 강화 SSH 서버 보안 설정 # /etc/ssh/sshd_config 보안 설정 Protocol 2 Port 2222 # 기본 포트 변경 PermitRootLogin no PasswordAuthentication no PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys MaxAuthTries 3 MaxSessions 3 MaxStartups 3 LoginGraceTime 60 ClientAliveInterval 300 ClientAliveCountMax 2 UsePAM yes X11Forwarding no AllowTcpForwarding no GatewayPorts no PermitTunnel no # 특정 사용자/그룹만 SSH 접근 허용 AllowUsers admin developer AllowGroups sshusers DenyUsers guest anonymous DenyGroups wheel # 특정 IP에서만 접근 허용 Match Address 192.168.1.0/24,10.0.0.0/8 PasswordAuthentication yes Match Address *,!192.168.1.0/24,!10.0.0.0/8 DenyUsers * # 서비스 재시작 systemctl restart sshd SSH 키 기반 인증 구축 # 클라이언트에서 키 생성 (ED25519 권장) ssh-keygen -t ed25519 -b 4096 -C "your-email@domain.com" # 또는 RSA 키 (최소 4096비트) ssh-keygen -t rsa -b 4096 -C "your-email@domain.com" # 공개키 서버에 복사 ssh-copy-id -i ~/.ssh/id_ed25519.pub username@server-ip # 수동으로 공개키 설정 mkdir -p ~/.ssh chmod 700 ~/.ssh cat &gt;&gt; ~/.ssh/authorized_keys &lt;&lt; 'EOF' ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG... your-email@domain.com EOF chmod 600 ~/.ssh/authorized_keys chown username:username ~/.ssh -R # SSH 키 관리 - 키별 제한 설정 # ~/.ssh/authorized_keys command="/usr/local/bin/backup-script",no-port-forwarding,no-X11-forwarding,no-agent-forwarding ssh-rsa AAAAB3... backup@server from="192.168.1.100",no-port-forwarding ssh-rsa AAAAB3... admin@workstation # SSH Certificate Authority 구축 # CA 키 생성 ssh-keygen -t rsa -b 4096 -f /etc/ssh/ca_key # 사용자 인증서 발급 ssh-keygen -s /etc/ssh/ca_key -I "user-certificate" -n username -V +1w ~/.ssh/id_rsa.pub # 서버 설정에서 CA 신뢰 # /etc/ssh/sshd_config TrustedUserCAKeys /etc/ssh/ca_key.pub 🛡️ 방화벽 설정 iptables 기본 보안 설정 #!/bin/bash # 강력한 iptables 보안 설정 # 모든 기존 규칙 초기화 iptables -F iptables -X iptables -t nat -F iptables -t nat -X iptables -t mangle -F iptables -t mangle -X # 기본 정책: 모든 트래픽 차단 iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT DROP # Loopback 허용 iptables -A INPUT -i lo -j ACCEPT iptables -A OUTPUT -o lo -j ACCEPT # 기존 연결 유지 iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT # SSH 접근 허용 (브루트포스 방지) iptables -A INPUT -p tcp --dport 2222 -m conntrack --ctstate NEW -m recent --set --name SSH iptables -A INPUT -p tcp --dport 2222 -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 4 --name SSH -j DROP iptables -A INPUT -p tcp --dport 2222 -j ACCEPT iptables -A OUTPUT -p tcp --sport 2222 -j ACCEPT # DNS 허용 (필수) iptables -A OUTPUT -p udp --dport 53 -j ACCEPT iptables -A OUTPUT -p tcp --dport 53 -j ACCEPT # NTP 허용 iptables -A OUTPUT -p udp --dport 123 -j ACCEPT # HTTP/HTTPS 아웃바운드 허용 iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT # 웹 서버가 있다면 인바운드도 허용 # iptables -A INPUT -p tcp --dport 80 -j ACCEPT # iptables -A INPUT -p tcp --dport 443 -j ACCEPT # ICMP 제한적 허용 (ping) iptables -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/second -j ACCEPT iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT # 로깅 설정 (DDoS 방지) iptables -A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables INPUT denied: " --log-level 7 # 설정 저장 iptables-save &gt; /etc/iptables/rules.v4 # 부팅 시 자동 로드 echo '#!/bin/bash' &gt; /etc/network/if-pre-up.d/iptables echo 'iptables-restore &lt; /etc/iptables/rules.v4' &gt;&gt; /etc/network/if-pre-up.d/iptables chmod +x /etc/network/if-pre-up.d/iptables UFW (Uncomplicated Firewall) 활용 # UFW 초기화 및 기본 설정 ufw --force reset ufw default deny incoming ufw default deny outgoing ufw default deny forward # 필수 아웃바운드 허용 ufw allow out 53 # DNS ufw allow out 80 # HTTP ufw allow out 443 # HTTPS ufw allow out 123 # NTP # SSH 접근 허용 (포트 변경했다면) ufw allow from 192.168.1.0/24 to any port 2222 # 애플리케이션별 허용 ufw allow "Apache Full" ufw allow "Nginx Full" # 고급 규칙 ufw allow from 10.0.0.0/8 to any port 3306 # MySQL ufw deny from 192.168.1.100 # 특정 IP 차단 # 로깅 활성화 ufw logging on # 방화벽 활성화 ufw enable # 상태 확인 ufw status verbose ufw status numbered SELinux/AppArmor 보안 | Mandatory Access Control 🔐 SELinux 구성 및 관리 SELinux 기본 설정 # SELinux 상태 확인 sestatus getenforce # SELinux 모드 변경 # /etc/selinux/config SELINUX=enforcing # enforcing, permissive, disabled SELINUXTYPE=targeted # targeted, minimum, mls # 임시 모드 변경 setenforce 1 # enforcing setenforce 0 # permissive # 컨텍스트 확인 ls -lZ /var/www/html/ ps auxZ | grep httpd id -Z # 파일 컨텍스트 복원 restorecon -Rv /var/www/html/ restorecon -Rv /home/username/ # 컨텍스트 수동 설정 chcon -t httpd_exec_t /usr/local/apache2/bin/httpd semanage fcontext -a -t httpd_exec_t "/usr/local/apache2/bin/httpd" SELinux 정책 관리 # 불린 값 확인 및 설정 getsebool -a | grep httpd setsebool -P httpd_can_network_connect on setsebool -P httpd_can_sendmail on # 포트 라벨 관리 semanage port -l | grep http semanage port -a -t http_port_t -p tcp 8080 # 사용자 매핑 semanage login -l semanage user -l semanage login -a -s user_u regularuser # 커스텀 정책 모듈 생성 # audit.log에서 정책 생성 grep httpd /var/log/audit/audit.log | audit2allow -m myhttpd grep httpd /var/log/audit/audit.log | audit2allow -M myhttpd semodule -i myhttpd.pp # 정책 모듈 관리 semodule -l | grep my semodule -r myhttpd 🛡️ AppArmor 프로파일 작성 AppArmor 기본 관리 # AppArmor 상태 확인 aa-status aa-enabled # 프로파일 모드 확인 aa-status | grep profiles # 프로파일 모드 변경 aa-enforce /etc/apparmor.d/usr.bin.firefox aa-complain /etc/apparmor.d/usr.bin.firefox aa-disable /etc/apparmor.d/usr.bin.firefox # 프로파일 재로드 apparmor_parser -r /etc/apparmor.d/usr.bin.firefox 커스텀 AppArmor 프로파일 작성 # 새로운 애플리케이션 프로파일 생성 # /etc/apparmor.d/usr.local.bin.myapp #include &lt;tunables/global&gt; /usr/local/bin/myapp { #include &lt;abstractions/base&gt; #include &lt;abstractions/nameservice&gt; # 실행 파일 /usr/local/bin/myapp mr, # 라이브러리 /lib{,32,64}/** mr, /usr/lib{,32,64}/** mr, # 설정 파일 (읽기 전용) /etc/myapp/** r, owner /home/*/.myapp/** rw, # 데이터 디렉토리 /var/lib/myapp/** rw, /var/log/myapp/** w, # 네트워크 접근 network inet stream, network inet6 stream, # 프로세스 제어 capability setuid, capability setgid, # 임시 파일 /tmp/myapp.** rw, owner /tmp/myapp-** rw, # 거부할 접근 deny /etc/passwd r, deny /etc/shadow r, deny owner /home/*/.ssh/** rw, # 하위 프로세스 실행 /bin/dash ix, /usr/bin/python3 ix, } # 프로파일 로드 및 활성화 apparmor_parser -r /etc/apparmor.d/usr.local.bin.myapp aa-enforce /etc/apparmor.d/usr.local.bin.myapp # 프로파일 개발 모드 (학습) aa-genprof /usr/local/bin/myapp # 애플리케이션 실행하며 동작 확인 aa-logprof 시스템 하드닝 | System Hardening 🔧 커널 보안 매개변수 조정 sysctl 보안 설정 # /etc/sysctl.d/99-security.conf # 네트워크 보안 net.ipv4.ip_forward = 0 net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0 net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0 net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0 net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0 # SYN 플러드 방지 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_max_syn_backlog = 2048 net.ipv4.tcp_synack_retries = 2 net.ipv4.tcp_syn_retries = 5 # ICMP 보안 net.ipv4.icmp_echo_ignore_broadcasts = 1 net.ipv4.icmp_ignore_bogus_error_responses = 1 net.ipv4.icmp_echo_ignore_all = 0 # IP 스푸핑 방지 net.ipv4.conf.all.rp_filter = 1 net.ipv4.conf.default.rp_filter = 1 # IPv6 보안 net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 # 메모리 보안 kernel.randomize_va_space = 2 kernel.exec-shield = 1 kernel.dmesg_restrict = 1 kernel.kptr_restrict = 2 # 프로세스 보안 fs.suid_dumpable = 0 kernel.core_uses_pid = 1 kernel.ctrl-alt-del = 0 # 설정 적용 sysctl -p /etc/sysctl.d/99-security.conf 파일 시스템 보안 # 중요 디렉토리 마운트 옵션 강화 # /etc/fstab /tmp /tmp tmpfs defaults,nodev,nosuid,noexec 0 0 /var/tmp /var/tmp tmpfs defaults,nodev,nosuid,noexec 0 0 /dev/shm /dev/shm tmpfs defaults,nodev,nosuid,noexec 0 0 # 파일 권한 강화 chmod 700 /root chmod 600 /etc/ssh/sshd_config chmod 600 /etc/passwd- chmod 600 /etc/shadow chmod 600 /etc/gshadow chmod 644 /etc/group # 불필요한 SUID/SGID 제거 find / -type f \( -perm -4000 -o -perm -2000 \) -print &gt; /tmp/suid_sgid_files # 검토 후 필요없는 것들 제거 chmod u-s /usr/bin/unnecessary-suid-program # 숨겨진 파일 및 디렉토리 검사 find / -name ".*" -type f -exec ls -la {} \; 2&gt;/dev/null find / -name ".*" -type d -exec ls -lad {} \; 2&gt;/dev/null # 대용량 파일 검사 (backdoor 가능성) find / -size +10M -type f -exec ls -la {} \; 2&gt;/dev/null # 최근 수정된 파일 검사 find / -mtime -7 -type f -exec ls -la {} \; 2&gt;/dev/null 🔍 서비스 및 데몬 보안 불필요한 서비스 제거 # 실행 중인 서비스 확인 systemctl list-units --type=service --state=running netstat -tulpn ss -tulpn # 불필요한 서비스 중지 및 비활성화 systemctl stop cups systemctl disable cups systemctl mask cups # 위험한 서비스들 (일반적으로 비활성화) services_to_disable=( "telnet" "rsh" "rlogin" "tftp" "xinetd" "sendmail" "postfix" "dovecot" "cups" "avahi-daemon" "bluetooth" ) for service in "${services_to_disable[@]}"; do if systemctl is-enabled "$service" &gt;/dev/null 2&gt;&amp;1; then echo "Disabling $service..." systemctl stop "$service" systemctl disable "$service" systemctl mask "$service" fi done # 네트워크 서비스 점검 lsof -i netstat -anp | grep LISTEN 애플리케이션별 보안 설정 # Apache 보안 설정 # /etc/apache2/conf-available/security.conf ServerTokens Prod ServerSignature Off TraceEnable Off Header always set X-Content-Type-Options nosniff Header always set X-Frame-Options DENY Header always set X-XSS-Protection "1; mode=block" Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" # Nginx 보안 설정 # /etc/nginx/nginx.conf server_tokens off; add_header X-Frame-Options DENY; add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection "1; mode=block"; add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"; # MySQL/MariaDB 보안 mysql_secure_installation # PostgreSQL 보안 설정 # /etc/postgresql/*/main/postgresql.conf ssl = on ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' ssl_prefer_server_ciphers = on # /etc/postgresql/*/main/pg_hba.conf # TYPE DATABASE USER ADDRESS METHOD local all all md5 host all all 127.0.0.1/32 md5 host all all ::1/128 md5 침입 탐지 시스템 | Intrusion Detection Systems 🚨 AIDE (Advanced Intrusion Detection Environment) AIDE 설치 및 구성 # AIDE 설치 apt-get install aide aide-common # 설정 파일 수정 # /etc/aide/aide.conf database=file:/var/lib/aide/aide.db database_out=file:/var/lib/aide/aide.db.new gzip_dbout=yes report_url=file:/var/log/aide/aide.log report_url=stdout # 규칙 정의 /boot f+p+u+g+s+b+m+c+md5+sha1 /bin f+p+u+g+s+b+m+c+md5+sha1 /sbin f+p+u+g+s+b+m+c+md5+sha1 /lib f+p+u+g+s+b+m+c+md5+sha1 /opt f+p+u+g+s+b+m+c+md5+sha1 /usr f+p+u+g+s+b+m+c+md5+sha1 /root f+p+u+g+s+b+m+c+md5+sha1 /etc f+p+u+g+s+b+m+c+md5+sha1 # 제외할 디렉토리 !/var/log/.* !/var/spool/.* !/var/run/.* !/var/lock/.* !/proc/.* !/sys/.* !/dev/.* !/tmp/.* # 초기 데이터베이스 생성 aideinit # 데이터베이스 업데이트 cp /var/lib/aide/aide.db.new /var/lib/aide/aide.db # 무결성 검사 실행 aide --check # 자동화 스크립트 #!/bin/bash # /usr/local/bin/aide-check.sh AIDE_LOG="/var/log/aide/aide-$(date +%Y%m%d).log" aide --check &gt; "$AIDE_LOG" 2&gt;&amp;1 EXIT_CODE=$? if [ $EXIT_CODE -ne 0 ]; then echo "AIDE detected changes on $(hostname)" | \ mail -s "AIDE Alert - File Integrity Check Failed" admin@company.com \ -A "$AIDE_LOG" fi # cron 설정 # /etc/cron.d/aide 0 2 * * * root /usr/local/bin/aide-check.sh 🔍 Fail2Ban 설정 Fail2Ban 구성 및 커스터마이징 # Fail2Ban 설치 apt-get install fail2ban # 기본 설정 파일 복사 cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local # /etc/fail2ban/jail.local 설정 [DEFAULT] bantime = 3600 findtime = 600 maxretry = 3 backend = systemd banaction = iptables-multiport banaction_allports = iptables-allports ignoreip = 127.0.0.1/8 192.168.1.0/24 10.0.0.0/8 # SSH 보호 [sshd] enabled = true port = 2222 logpath = /var/log/auth.log maxretry = 3 bantime = 3600 # Apache 보호 [apache-auth] enabled = true port = http,https logpath = /var/log/apache2/error.log [apache-badbots] enabled = true port = http,https logpath = /var/log/apache2/access.log [apache-noscript] enabled = true port = http,https logpath = /var/log/apache2/access.log # 커스텀 필터 생성 # /etc/fail2ban/filter.d/custom-app.conf [Definition] failregex = ^.*Failed login attempt from &lt;HOST&gt;.*$ ^.*Invalid user .* from &lt;HOST&gt;.*$ ^.*authentication failure.*rhost=&lt;HOST&gt;.*$ ignoreregex = # 커스텀 jail 설정 # /etc/fail2ban/jail.local에 추가 [custom-app] enabled = true port = 8080 logpath = /var/log/custom-app.log filter = custom-app maxretry = 5 bantime = 7200 # Fail2Ban 관리 명령 fail2ban-client status fail2ban-client status sshd fail2ban-client unban 192.168.1.100 fail2ban-client reload 🔐 OSSEC/Wazuh 설치 Wazuh Agent 설치 및 구성 # Wazuh 저장소 추가 curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | apt-key add - echo "deb https://packages.wazuh.com/4.x/apt/ stable main" &gt; /etc/apt/sources.list.d/wazuh.list apt-get update # Wazuh Agent 설치 apt-get install wazuh-agent # 에이전트 설정 # /var/ossec/etc/ossec.conf &lt;ossec_config&gt; &lt;client&gt; &lt;server&gt; &lt;address&gt;MANAGER_IP&lt;/address&gt; &lt;port&gt;1514&lt;/port&gt; &lt;protocol&gt;tcp&lt;/protocol&gt; &lt;/server&gt; &lt;config-profile&gt;linux, ubuntu, ubuntu20,&lt;/config-profile&gt; &lt;notify_time&gt;10&lt;/notify_time&gt; &lt;time-reconnect&gt;60&lt;/time-reconnect&gt; &lt;auto_restart&gt;yes&lt;/auto_restart&gt; &lt;crypto_method&gt;aes&lt;/crypto_method&gt; &lt;/client&gt; &lt;!-- 로그 모니터링 --&gt; &lt;localfile&gt; &lt;log_format&gt;syslog&lt;/log_format&gt; &lt;location&gt;/var/log/auth.log&lt;/location&gt; &lt;/localfile&gt; &lt;localfile&gt; &lt;log_format&gt;syslog&lt;/log_format&gt; &lt;location&gt;/var/log/syslog&lt;/location&gt; &lt;/localfile&gt; &lt;localfile&gt; &lt;log_format&gt;apache&lt;/log_format&gt; &lt;location&gt;/var/log/apache2/access.log&lt;/location&gt; &lt;/localfile&gt; &lt;!-- 파일 무결성 모니터링 --&gt; &lt;syscheck&gt; &lt;disabled&gt;no&lt;/disabled&gt; &lt;frequency&gt;43200&lt;/frequency&gt; &lt;scan_on_start&gt;yes&lt;/scan_on_start&gt; &lt;directories check_all="yes" realtime="yes"&gt;/etc&lt;/directories&gt; &lt;directories check_all="yes" realtime="yes"&gt;/usr/bin&lt;/directories&gt; &lt;directories check_all="yes" realtime="yes"&gt;/usr/sbin&lt;/directories&gt; &lt;directories check_all="yes" realtime="yes"&gt;/bin&lt;/directories&gt; &lt;directories check_all="yes" realtime="yes"&gt;/sbin&lt;/directories&gt; &lt;ignore&gt;/etc/mtab&lt;/ignore&gt; &lt;ignore&gt;/etc/hosts.deny&lt;/ignore&gt; &lt;ignore&gt;/etc/mail/statistics&lt;/ignore&gt; &lt;ignore&gt;/etc/random-seed&lt;/ignore&gt; &lt;ignore&gt;/etc/adjtime&lt;/ignore&gt; &lt;/syscheck&gt; &lt;!-- 루트킷 탐지 --&gt; &lt;rootcheck&gt; &lt;disabled&gt;no&lt;/disabled&gt; &lt;check_files&gt;yes&lt;/check_files&gt; &lt;check_trojans&gt;yes&lt;/check_trojans&gt; &lt;check_dev&gt;yes&lt;/check_dev&gt; &lt;check_sys&gt;yes&lt;/check_sys&gt; &lt;check_pids&gt;yes&lt;/check_pids&gt; &lt;check_ports&gt;yes&lt;/check_ports&gt; &lt;check_if&gt;yes&lt;/check_if&gt; &lt;/rootcheck&gt; &lt;!-- 활성 응답 --&gt; &lt;active-response&gt; &lt;disabled&gt;no&lt;/disabled&gt; &lt;ca_store&gt;/var/ossec/etc/wpk_root.pem&lt;/ca_store&gt; &lt;ca_verification&gt;yes&lt;/ca_verification&gt; &lt;/active-response&gt; &lt;/ossec_config&gt; # 서비스 시작 systemctl enable wazuh-agent systemctl start wazuh-agent # 상태 확인 systemctl status wazuh-agent /var/ossec/bin/ossec-control status 컨테이너 보안 | Container Security 🐳 Docker 보안 설정 Docker 데몬 보안 강화 # Docker 데몬 설정 # /etc/docker/daemon.json { "icc": false, "userns-remap": "default", "no-new-privileges": true, "seccomp-profile": "/etc/docker/seccomp.json", "selinux-enabled": true, "disable-legacy-registry": true, "live-restore": true, "userland-proxy": false, "experimental": false, "metrics-addr": "127.0.0.1:9323", "log-driver": "json-file", "log-opts": { "max-size": "10m", "max-file": "3" }, "storage-driver": "overlay2", "default-ulimits": { "nofile": { "name": "nofile", "hard": 64000, "soft": 64000 } } } # 시스템 재시작 systemctl restart docker # 보안 컨테이너 실행 예시 docker run -d \ --name secure-app \ --read-only \ --tmpfs /tmp \ --tmpfs /var/run \ --tmpfs /var/lock \ --user 1000:1000 \ --cap-drop ALL \ --cap-add NET_BIND_SERVICE \ --security-opt no-new-privileges:true \ --security-opt apparmor:docker-default \ --memory 512m \ --cpus="0.5" \ --pids-limit 100 \ --restart unless-stopped \ nginx:alpine Dockerfile 보안 모범 사례 # 보안 강화 Dockerfile 예시 FROM alpine:3.18 # 보안 업데이트 적용 RUN apk update &amp;&amp; apk upgrade &amp;&amp; \ apk add --no-cache tini &amp;&amp; \ rm -rf /var/cache/apk/* # 비특권 사용자 생성 RUN addgroup -g 1000 -S appgroup &amp;&amp; \ adduser -u 1000 -S appuser -G appgroup # 애플리케이션 디렉토리 생성 및 권한 설정 WORKDIR /app COPY --chown=appuser:appgroup . . # 실행 파일 권한만 부여 RUN chmod 755 /app/entrypoint.sh &amp;&amp; \ chmod 644 /app/*.conf # 비특권 사용자로 전환 USER appuser:appgroup # 시그널 처리를 위한 tini 사용 ENTRYPOINT ["/sbin/tini", "--"] CMD ["./entrypoint.sh"] # 불필요한 네트워크 포트 노출 금지 # EXPOSE 80 (필요한 경우만) # 헬스체크 추가 HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \ CMD curl -f http://localhost:8080/health || exit 1 ⚓ Kubernetes 보안 Pod Security Standards 적용 # Pod Security Policy (deprecated, use Pod Security Standards) apiVersion: v1 kind: Namespace metadata: name: secure-namespace labels: pod-security.kubernetes.io/enforce: restricted pod-security.kubernetes.io/audit: restricted pod-security.kubernetes.io/warn: restricted --- # 보안 강화 Pod 예시 apiVersion: v1 kind: Pod metadata: name: secure-pod namespace: secure-namespace spec: securityContext: runAsNonRoot: true runAsUser: 1000 runAsGroup: 1000 fsGroup: 1000 seccompProfile: type: RuntimeDefault containers: - name: app image: nginx:alpine securityContext: allowPrivilegeEscalation: false readOnlyRootFilesystem: true runAsNonRoot: true runAsUser: 1000 capabilities: drop: - ALL add: - NET_BIND_SERVICE resources: limits: memory: "256Mi" cpu: "200m" requests: memory: "128Mi" cpu: "100m" volumeMounts: - name: tmp-volume mountPath: /tmp - name: var-cache-nginx mountPath: /var/cache/nginx - name: var-run mountPath: /var/run volumes: - name: tmp-volume emptyDir: {} - name: var-cache-nginx emptyDir: {} - name: var-run emptyDir: {} --- # Network Policy apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: default-deny-all namespace: secure-namespace spec: podSelector: {} policyTypes: - Ingress - Egress --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: allow-web-traffic namespace: secure-namespace spec: podSelector: matchLabels: app: web policyTypes: - Ingress - Egress ingress: - from: - namespaceSelector: matchLabels: name: ingress-system ports: - protocol: TCP port: 80 egress: - to: - podSelector: matchLabels: app: database ports: - protocol: TCP port: 5432 - to: {} ports: - protocol: UDP port: 53 컴플라이언스와 감사 | Compliance and Auditing 📋 CIS Benchmark 적용 CIS Controls 자동화 스크립트 #!/bin/bash # CIS Ubuntu 20.04 LTS Benchmark 자동 적용 스크립트 echo "CIS Benchmark 자동 적용을 시작합니다..." # 1. 파일 시스템 구성 echo "1. 파일 시스템 보안 설정..." # 1.1 임시 파일 시스템 보안 if ! grep -q "/tmp.*nodev" /etc/fstab; then echo "/tmp /tmp tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0" &gt;&gt; /etc/fstab fi # 1.2 불필요한 파일 시스템 비활성화 cat &gt;&gt; /etc/modprobe.d/blacklist-rare-filesystems.conf &lt;&lt; 'EOF' install cramfs /bin/true install freevxfs /bin/true install jffs2 /bin/true install hfs /bin/true install hfsplus /bin/true install squashfs /bin/true install udf /bin/true install fat /bin/true install vfat /bin/true install usb-storage /bin/true EOF # 2. 서비스 설정 echo "2. 서비스 보안 설정..." # 2.1 시간 동기화 systemctl enable ntp systemctl start ntp # 2.2 불필요한 서비스 비활성화 services_to_disable=( "autofs" "avahi-daemon" "cups" "dhcpd" "slapd" "nfs" "rpcbind" "bind9" "vsftpd" "apache2" "dovecot" "smbd" "squid" "snmpd" "rsync" ) for service in "${services_to_disable[@]}"; do if systemctl is-enabled "$service" &gt;/dev/null 2&gt;&amp;1; then systemctl disable "$service" systemctl stop "$service" fi done # 3. 네트워크 매개변수 설정 echo "3. 네트워크 보안 설정..." cat &gt; /etc/sysctl.d/99-cis.conf &lt;&lt; 'EOF' net.ipv4.ip_forward = 0 net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0 net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0 net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1 net.ipv4.icmp_echo_ignore_broadcasts = 1 net.ipv4.icmp_ignore_bogus_error_responses = 1 net.ipv4.conf.all.rp_filter = 1 net.ipv4.conf.default.rp_filter = 1 net.ipv4.tcp_syncookies = 1 net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0 net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0 net.ipv6.conf.all.disable_ipv6 = 1 EOF sysctl -p /etc/sysctl.d/99-cis.conf # 4. 로깅 및 감사 설정 echo "4. 로깅 및 감사 설정..." # 4.1 auditd 설치 및 구성 apt-get install -y auditd audispd-plugins cat &gt; /etc/audit/rules.d/cis.rules &lt;&lt; 'EOF' # 시간 변경 감사 -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change -a always,exit -F arch=b64 -S clock_settime -k time-change -a always,exit -F arch=b32 -S clock_settime -k time-change -w /etc/localtime -p wa -k time-change # 사용자/그룹 정보 감사 -w /etc/group -p wa -k identity -w /etc/passwd -p wa -k identity -w /etc/gshadow -p wa -k identity -w /etc/shadow -p wa -k identity -w /etc/security/opasswd -p wa -k identity # 네트워크 환경 감사 -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale -w /etc/issue -p wa -k system-locale -w /etc/issue.net -p wa -k system-locale -w /etc/hosts -p wa -k system-locale -w /etc/network -p wa -k system-locale # MAC 정책 변경 감사 -w /etc/selinux/ -p wa -k MAC-policy -w /usr/share/selinux/ -p wa -k MAC-policy # 로그인/로그아웃 감사 -w /var/log/faillog -p wa -k logins -w /var/log/lastlog -p wa -k logins -w /var/log/tallylog -p wa -k logins # 세션 시작 정보 감사 -w /var/run/utmp -p wa -k session -w /var/log/wtmp -p wa -k logins -w /var/log/btmp -p wa -k logins # 권한 변경 감사 -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid&gt;=1000 -F auid!=4294967295 -k perm_mod # 관리자 액세스 감사 -w /etc/sudoers -p wa -k scope -w /etc/sudoers.d/ -p wa -k scope # 커널 모듈 로딩/언로딩 감사 -w /sbin/insmod -p x -k modules -w /sbin/rmmod -p x -k modules -w /sbin/modprobe -p x -k modules -a always,exit -F arch=b64 -S init_module -S delete_module -k modules # 파일 삭제 감사 -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=1000 -F auid!=4294967295 -k delete -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=1000 -F auid!=4294967295 -k delete # 설정 불변성 -e 2 EOF systemctl enable auditd systemctl start auditd # 5. 액세스 제어 설정 echo "5. 액세스 제어 설정..." # 5.1 cron 접근 제한 echo "root" &gt; /etc/cron.allow chmod 600 /etc/cron.allow rm -f /etc/cron.deny # 5.2 SSH 보안 강화 (이미 앞에서 다룸) # 5.3 PAM 설정 강화 (이미 앞에서 다룸) # 6. 시스템 유지보수 echo "6. 시스템 유지보수 설정..." # 6.1 파일 권한 점검 find /etc -type f -perm /g+w,o+w -exec chmod go-w {} \; # 6.2 SUID/SGID 점검 스크립트 생성 cat &gt; /usr/local/bin/check-suid-sgid.sh &lt;&lt; 'EOF' #!/bin/bash find / \( -perm -4000 -o -perm -2000 \) -type f -exec ls -ld {} \; 2&gt;/dev/null | \ while read line; do echo "$(date): $line" &gt;&gt; /var/log/suid-sgid.log done EOF chmod +x /usr/local/bin/check-suid-sgid.sh # 6.3 정기 보안 점검 cron 설정 cat &gt; /etc/cron.daily/security-check &lt;&lt; 'EOF' #!/bin/bash /usr/local/bin/check-suid-sgid.sh /usr/bin/aide --check 2&gt;&amp;1 | logger -t aide EOF chmod +x /etc/cron.daily/security-check echo "CIS Benchmark 적용 완료!" echo "시스템을 재부팅하여 모든 설정을 적용하세요." 📊 보안 모니터링 대시보드 Prometheus + Grafana 보안 메트릭 # prometheus-rules.yml groups: - name: security_rules rules: - alert: HighFailedLoginRate expr: rate(node_auth_failed_total[5m]) &gt; 0.1 for: 2m labels: severity: warning annotations: summary: "High failed login rate detected" description: "{{ $labels.instance }} has a high failed login rate of {{ $value }} per second" - alert: RootLoginDetected expr: increase(node_auth_success_total{user="root"}[1m]) &gt; 0 for: 0m labels: severity: critical annotations: summary: "Root login detected" description: "Root user login detected on {{ $labels.instance }}" - alert: SudoCommandExecuted expr: increase(node_sudo_commands_total[1m]) &gt; 0 for: 0m labels: severity: info annotations: summary: "Sudo command executed" description: "Sudo command executed on {{ $labels.instance }}" - alert: FileSystemModification expr: rate(node_filesystem_files_free[5m]) &lt; -0.1 for: 5m labels: severity: warning annotations: summary: "Rapid file system changes detected" description: "Rapid file system changes on {{ $labels.instance }} at {{ $labels.mountpoint }}" 보안 로그 분석 스크립트 #!/usr/bin/env python3 import re import json import datetime from collections import defaultdict, Counter import argparse class SecurityLogAnalyzer: def __init__(self): self.failed_logins = defaultdict(list) self.successful_logins = defaultdict(list) self.sudo_commands = [] self.suspicious_activities = [] def parse_auth_log(self, log_file): """인증 로그 파싱""" patterns = { 'failed_login': r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Failed password for (\w+) from (\d+\.\d+\.\d+\.\d+)', 'successful_login': r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Accepted password for (\w+) from (\d+\.\d+\.\d+\.\d+)', 'sudo_command': r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*sudo.*USER=(\w+).*COMMAND=(.*)', 'invalid_user': r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*Invalid user (\w+) from (\d+\.\d+\.\d+\.\d+)' } with open(log_file, 'r') as f: for line in f: # 실패한 로그인 시도 match = re.search(patterns['failed_login'], line) if match: timestamp, user, ip = match.groups() self.failed_logins[ip].append({ 'timestamp': timestamp, 'user': user, 'ip': ip }) # 성공한 로그인 match = re.search(patterns['successful_login'], line) if match: timestamp, user, ip = match.groups() self.successful_logins[ip].append({ 'timestamp': timestamp, 'user': user, 'ip': ip }) # sudo 명령 match = re.search(patterns['sudo_command'], line) if match: timestamp, user, command = match.groups() self.sudo_commands.append({ 'timestamp': timestamp, 'user': user, 'command': command }) # 잘못된 사용자 match = re.search(patterns['invalid_user'], line) if match: timestamp, user, ip = match.groups() self.suspicious_activities.append({ 'type': 'invalid_user', 'timestamp': timestamp, 'user': user, 'ip': ip }) def detect_brute_force(self, threshold=10): """브루트포스 공격 탐지""" brute_force_ips = [] for ip, attempts in self.failed_logins.items(): if len(attempts) &gt;= threshold: brute_force_ips.append({ 'ip': ip, 'attempts': len(attempts), 'users_targeted': list(set([attempt['user'] for attempt in attempts])), 'first_attempt': attempts[0]['timestamp'], 'last_attempt': attempts[-1]['timestamp'] }) return brute_force_ips def detect_privilege_escalation(self): """권한 상승 탐지""" privilege_escalations = [] dangerous_commands = [ 'passwd', 'useradd', 'usermod', 'userdel', 'chmod 777', 'chmod 4755', 'chown root', 'systemctl', 'service', 'crontab -e', '/bin/bash', '/bin/sh', 'su -' ] for sudo_cmd in self.sudo_commands: for dangerous_cmd in dangerous_commands: if dangerous_cmd in sudo_cmd['command']: privilege_escalations.append({ 'timestamp': sudo_cmd['timestamp'], 'user': sudo_cmd['user'], 'command': sudo_cmd['command'], 'risk_level': 'high' if dangerous_cmd in ['passwd', 'useradd', '/bin/bash'] else 'medium' }) break return privilege_escalations def analyze_login_patterns(self): """로그인 패턴 분석""" patterns = { 'geographic_anomalies': [], 'time_anomalies': [], 'user_anomalies': [] } # 사용자별 로그인 빈도 분석 user_login_count = Counter() for ip, logins in self.successful_logins.items(): for login in logins: user_login_count[login['user']] += 1 # 비정상적으로 많은 로그인 avg_logins = sum(user_login_count.values()) / len(user_login_count) if user_login_count else 0 for user, count in user_login_count.items(): if count &gt; avg_logins * 3: # 평균의 3배 이상 patterns['user_anomalies'].append({ 'user': user, 'login_count': count, 'anomaly_type': 'excessive_logins' }) return patterns def generate_report(self): """보안 분석 리포트 생성""" report = { 'analysis_date': datetime.datetime.now().isoformat(), 'summary': { 'total_failed_logins': sum(len(attempts) for attempts in self.failed_logins.values()), 'total_successful_logins': sum(len(logins) for logins in self.successful_logins.values()), 'total_sudo_commands': len(self.sudo_commands), 'suspicious_activities': len(self.suspicious_activities) }, 'brute_force_attacks': self.detect_brute_force(), 'privilege_escalations': self.detect_privilege_escalation(), 'login_patterns': self.analyze_login_patterns(), 'suspicious_activities': self.suspicious_activities, 'recommendations': [] } # 추천사항 생성 if report['brute_force_attacks']: report['recommendations'].append( "브루트포스 공격이 탐지되었습니다. fail2ban 설정을 검토하고 IP 차단을 고려하세요." ) if report['privilege_escalations']: report['recommendations'].append( "권한 상승 활동이 탐지되었습니다. sudo 사용을 검토하고 필요시 권한을 제한하세요." ) if report['summary']['total_failed_logins'] &gt; 100: report['recommendations'].append( "과도한 실패 로그인 시도가 있습니다. 패스워드 정책을 강화하세요." ) return report def main(): parser = argparse.ArgumentParser(description='Security Log Analyzer') parser.add_argument('--log-file', default='/var/log/auth.log', help='Path to authentication log file') parser.add_argument('--output', '-o', help='Output file for JSON report') parser.add_argument('--threshold', type=int, default=10, help='Brute force detection threshold') args = parser.parse_args() analyzer = SecurityLogAnalyzer() analyzer.parse_auth_log(args.log_file) report = analyzer.generate_report() if args.output: with open(args.output, 'w') as f: json.dump(report, f, indent=2) else: print(json.dumps(report, indent=2)) if __name__ == '__main__': main() 마무리와 다음 단계 이 종합적인 리눅스 보안 가이드를 통해 다음과 같은 내용을 다뤘습니다: ✅ 다룬 주요 내용 기초 보안: 사용자 계정, SSH, 방화벽 설정 고급 보안: SELinux/AppArmor, 시스템 하드닝 침입 탐지: AIDE, Fail2Ban, Wazuh 구축 컨테이너 보안: Docker/Kubernetes 보안 설정 컴플라이언스: CIS Benchmark 적용 모니터링: 보안 로그 분석 및 대시보드 🚀 다음 단계 권장사항 정기적인 보안 점검 - 월간 보안 체크리스트 운영 침투 테스트 - 분기별 모의 해킹 테스트 수행 보안 교육 - 팀원 대상 보안 인식 교육 인시던트 대응 - 보안 사고 대응 절차 수립 백업 및 복구 - 정기적인 백업 및 복구 테스트 📚 추가 학습 자료 인증: CompTIA Security+, CISSP, CEH 도구: Metasploit, Nessus, OpenVAS 표준: NIST Cybersecurity Framework, ISO 27001 리눅스 보안은 지속적인 과정입니다. 항상 최신 위협 동향을 파악하고 보안 설정을 업데이트하세요! 🔒🛡️]]></summary></entry></feed>